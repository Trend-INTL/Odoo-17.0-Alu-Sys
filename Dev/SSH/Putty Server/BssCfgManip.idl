// IDL interface for BssCfgManip
// A COM object for programmatic configuration of Bitvise SSH Server
// Copyright (C) 2005-2024 by Bitvise Limited.

// BssCfgManip MUST be accessed from a process with administrative access to
// the system. Processes that lack administrative access will not be able to
// interact with the Bitvise SSH Server configuration.


import "oaidl.idl";
import "ocidl.idl";

interface IActState915;
interface IInstance915;
interface IInstances915;
interface ICertificate915;
interface ICertificates915;
interface IHostKeypair915;
interface IHostKeypairs915;
interface IPasswordCache915;
interface IPopupAndTray915;
interface IVersion915;
interface IDkimKeypair915;

interface IAcceptInstructions915;
interface IAccessControl915;
interface IAccount915;
interface IAccountAuthentication915;
interface IAccountConnectionSetup915;
interface IAccountFileTransfer915;
interface IAccountForwarding915;
interface IAccountKbdiTotp915;
interface IAccountLimitsAndQuotas915;
interface IAccountSessionSetup915;
interface IAccountTerminalAndExec915;
interface IAccountTerminalShellSettings915;
interface IAdditionalDomains915;
interface IAdditionalDomainsEntry915;
interface IAddressAcceptRule915;
interface IAddressAcceptRuleForIPv4_915;
interface IAddressAcceptRules915;
interface IAddressAcceptRulesForIPv4_915;
interface IAddressRule915;
interface IAddressRuleIPv6_915;
interface IAllowAcceptInstructions915;
interface IAllowAddressAcceptRule915;
interface IBindingIpv4_915;
interface IBindingIpv6_915;
interface IBindings915;
interface IBindingsIpv4_915;
interface IBindingsIpv6_915;
interface IClientVersionRule915;
interface IClientVersionRules915;
interface ICompression915;
interface IConnOnLogoffCommand915;
interface IConnOnLogoffCommandWithDefault915;
interface IConnOnLogonCommand915;
interface IConnOnLogonCommandWithDefault915;
interface IConnOnUploadCommand915;
interface IConnOnUploadCommandWithDefault915;
interface IConnectInstructions915;
interface IConnectProfile915;
interface IConnectProfiles915;
interface IConnectRuleWithDefault915;
interface IConnectRuleWithProfileInfo915;
interface IConnectRulesWithDefault915;
interface IConnectRulesWithProfileInfo915;
interface IConnections915;
interface ICustomSubsystem915;
interface ICustomSubsystems915;
interface IDayOccurrenceGroup915;
interface IDayOfWeekGroup915;
interface IDebugging915;
interface IDenialOfServiceProtection915;
interface IDomainOrder915;
interface IDomainOrderEntry915;
interface IEncryptedVolume915;
interface IEncryptedVolumes915;
interface IEncryption915;
interface IEnumerations915;
interface IFileShare915;
interface IFileShares915;
interface IFileTransferSettings915;
interface IFollowerSettings915;
interface IGlobalKbdiTotp915;
interface IGroup915;
interface IGroupAuthentication915;
interface IGroupConnectionSetup915;
interface IGroupFileTransfer915;
interface IGroupForwarding915;
interface IGroupKbdiTotp915;
interface IGroupLimitsAndQuotas915;
interface IGroupSessionSetup915;
interface IGroupTerminalAndExec915;
interface IGroupTerminalShellSettings915;
interface IHealthMonitoring915;
interface IInstanceTypeSettings915;
interface IInterfaceRule915;
interface IIpBlocking915;
interface IKex915;
interface IListenInstructions915;
interface IListenRule915;
interface IListeningRules915;
interface ILogging915;
interface IMac915;
interface IMaintenancePeriod915;
interface IMaintenancePeriods915;
interface IMasterSettings915;
interface IMonitoredVolume915;
interface IMonitoredVolumes915;
interface IMonthGroup915;
interface IMountPointAddressAcceptRules915;
interface IMountPointRootPathWhitelist915;
interface IMountPointRootPathWhitelistEntry915;
interface IMoveCompletedUploads915;
interface IMoveCompletedUploadsWithDefault915;
interface INetworkShareAccountSettings915;
interface INetworkShareGroupSettings915;
interface INetworkShareSettings915;
interface INetworkShareTaskProfileSettings915;
interface INetworkShareVirtAccountSettings915;
interface INetworkShareVirtGroupSettings915;
interface IPermanentBandwidths915;
interface IPortRangeRule915;
interface IPwAuthWhitelist915;
interface IPwAuthWhitelistEntry915;
interface IRemoteAdminAccess915;
interface IServer915;
interface ISessions915;
interface ISettings915;
interface ISfsMountPoint915;
interface ISfsMountPoints915;
interface ISfsSettingsPair915;
interface ISfsSettingsPairs915;
interface ISfsSftpProviderSettings915;
interface ISfsUndefMountPoint915;
interface ISfsUndefMountPoints915;
interface ISfsWinProviderSettings915;
interface ISignatureAlgs915;
interface ISmtpSending915;
interface ISrvSideC2SRules915;
interface ISrvSideIPv4C2SRule915;
interface ISrvSideIPv4C2SRules915;
interface ISrvSideIPv4S2CRule915;
interface ISrvSideIPv4S2CRules915;
interface ISrvSideIPv6C2SRule915;
interface ISrvSideIPv6C2SRules915;
interface ISrvSideIPv6S2CRule915;
interface ISrvSideIPv6S2CRules915;
interface ISrvSideS2CRules915;
interface ISshAlgorithms915;
interface ISshProfile915;
interface ISshProfiles915;
interface IStats915;
interface IStatsQuotas915;
interface ITask915;
interface ITaskList915;
interface ITaskProfile915;
interface ITaskProfiles915;
interface ITaskSettings915;
interface ITaskTrigger915;
interface ITaskTriggers915;
interface ITerminalConsoleSettings915;
interface ITlsAlgorithms915;
interface IUpdateSettings915;
interface IUserAuthMethod915;
interface IUserAuthMethods915;
interface IUserNameBlacklist915;
interface IUserNameBlacklistEntry915;
interface IVirtAccount915;
interface IVirtAccountAuthentication915;
interface IVirtAccountConnectionSetup915;
interface IVirtAccountFileTransfer915;
interface IVirtAccountSessionSetup915;
interface IVirtAccounts915;
interface IVirtAccountsPwdPolicy915;
interface IVirtGroup915;
interface IVirtGroupAuthentication915;
interface IVirtGroupConnectionSetup915;
interface IVirtGroupFileTransfer915;
interface IVirtGroupSessionSetup915;
interface IVirtGroups915;
interface IVirtualGroupWhitelist915;
interface IVirtualGroupWhitelistEntry915;
interface IWhitelistAddress915;
interface IWhitelistedAddresses915;
interface IWinAccounts915;
interface IWinGroups915;
interface IWinOnLogoffCommand915;
interface IWinOnLogoffCommandWithDefault915;
interface IWinOnLogonCommand915;
interface IWinOnLogonCommandWithDefault915;
interface IWindowsFirewall915;

typedef enum
{
	AddressVer4Type_ipv4 = 0,
	AddressVer4Type_location = 4,
	AddressVer4Type_dnsName = 3
} AddressVer4Type915;

typedef enum
{
	AddressVer6Type_ipv4 = 0,
	AddressVer6Type_ipv6 = 1,
	AddressVer6Type_location = 4,
	AddressVer6Type_anyIP = 2,
	AddressVer6Type_dnsName = 3
} AddressVer6Type915;

typedef enum
{
	AdsiEncryption_kerberos = 0,
	AdsiEncryption_tls = 1,
	AdsiEncryption_plaintext = 2
} AdsiEncryption915;

typedef enum
{
	AuthDisp_defaultValue = 0,
	AuthDisp_disabled = 1,
	AuthDisp_allowed = 2,
	AuthDisp_required = 3
} AuthDisp915;

typedef enum
{
	AutoManageHostKeys_disabled = 1,
	AutoManageHostKeys_enabledKeepOld = 2,
	AutoManageHostKeys_enabledDeleteOld = 3
} AutoManageHostKeys915;

typedef enum
{
	AutomaticIpBlocking_doNotBlock = 1,
	AutomaticIpBlocking_blockTemporarily = 2,
	AutomaticIpBlocking_blockPermanently = 3
} AutomaticIpBlocking915;

typedef enum
{
	AutomaticUpdatesType_doNotCheck = 0,
	AutomaticUpdatesType_checkOnly = 1,
	AutomaticUpdatesType_stronglyRecommended = 2,
	AutomaticUpdatesType_recommended = 3,
	AutomaticUpdatesType_allAvailable = 4,
	AutomaticUpdatesType_applyAvailable = 4,
	AutomaticUpdatesType_applyRecommended = 3,
	AutomaticUpdatesType_applyStronglyRecommended = 2,
	AutomaticUpdatesType_checkForUpdates = 1,
	AutomaticUpdatesType_doNotCheckForUpdates = 0
} AutomaticUpdatesType915;

typedef enum
{
	BandwidthLimit_defaultValue = 0,
	BandwidthLimit_none = 1,
	BandwidthLimit_mbps = 2,
	BandwidthLimit_kbps = 3
} BandwidthLimit915;

typedef enum
{
	BandwidthType_defaultValue = 0,
	BandwidthType_perUser = 1,
	BandwidthType_perConnection = 2
} BandwidthType915;

typedef enum
{
	CertAlgId_rsa = 0
} CertAlgId915;

typedef enum
{
	CertificateFormat_bitvise = 0,
	CertificateFormat_x509 = 1,
	CertificateFormat_pfx = 2,
	CertificateFormat_pem = 3
} CertificateFormat915;

typedef enum
{
	CertificateType_certificate = 0,
	CertificateType_privateKey = 1,
	CertificateType_nonEmployableCertificate = 2
} CertificateType915;

typedef enum
{
	ConsoleVersion_systemDefault = 0,
	ConsoleVersion_preWin10 = 1,
	ConsoleVersion_win10 = 2
} ConsoleVersion915;

typedef enum
{
	CsvColumnNames_doNotInclude = 0,
	CsvColumnNames_friendlyNames = 1,
	CsvColumnNames_scriptableNames = 2
} CsvColumnNames915;

typedef enum
{
	CustomSubsysAccess_defaultValue = 1,
	CustomSubsysAccess_denyAll = 2,
	CustomSubsysAccess_allowSpecific = 3,
	CustomSubsysAccess_allowAll = 4
} CustomSubsysAccess915;

typedef enum
{
	DayChoice_dayOfWeek = 0,
	DayChoice_dayOfMonth = 1
} DayChoice915;

typedef enum
{
	DefaultGlobalYesNo_defaultValue = 0,
	DefaultGlobalYesNo_yes = 1,
	DefaultGlobalYesNo_no = 2,
	DefaultGlobalYesNo_false = 2,
	DefaultGlobalYesNo_true = 1
} DefaultGlobalYesNo915;

typedef enum
{
	DefaultGroupYesNo_defaultValue = 0,
	DefaultGroupYesNo_yes = 1,
	DefaultGroupYesNo_no = 2,
	DefaultGroupYesNo_false = 2,
	DefaultGroupYesNo_true = 1
} DefaultGroupYesNo915;

typedef enum
{
	DefaultYesNo_defaultValue = 0,
	DefaultYesNo_yes = 1,
	DefaultYesNo_no = 2,
	DefaultYesNo_false = 2,
	DefaultYesNo_true = 1
} DefaultYesNo915;

typedef enum
{
	DirHandleMisuse_failImmediately = 0,
	DirHandleMisuse_forwardAsIs = 1,
	DirHandleMisuse_replaceWithPathOp = 2
} DirHandleMisuse915;

typedef enum
{
	DisplayTimeType_defaultValue = 0,
	DisplayTimeType_serverTimeWithOffset = 1,
	DisplayTimeType_serverTime = 2,
	DisplayTimeType_utc = 3
} DisplayTimeType915;

typedef enum
{
	DuplicateTaskPolicy_doNotStart = 1,
	DuplicateTaskPolicy_parallel = 2,
	DuplicateTaskPolicy_stopExisting = 3,
	DuplicateTaskPolicy_queue = 4
} DuplicateTaskPolicy915;

typedef enum
{
	EmailSending_notConfigured = 0,
	EmailSending_sendViaRelay = 1,
	EmailSending_sendDirectly = 2
} EmailSending915;

typedef enum
{
	EmulateCheckFile_always = 0,
	EmulateCheckFile_asFallback = 1,
	EmulateCheckFile_never = 2
} EmulateCheckFile915;

typedef enum
{
	EmulateTextMode_always = 0,
	EmulateTextMode_ifNeeded = 1
} EmulateTextMode915;

typedef enum
{
	EmulateTextNewline_autoDetect = 0,
	EmulateTextNewline_crlf = 1,
	EmulateTextNewline_lf = 2,
	EmulateTextNewline_cr = 3
} EmulateTextNewline915;

typedef enum
{
	EventType_error = 0,
	EventType_warning = 1,
	EventType_info = 2,
	EventType_trace = 3,
	EventType_debug = 4,
	EventType_unrecognized = 5
} EventType915;

typedef enum
{
	FileSharing_none = 0,
	FileSharing_read = 1,
	FileSharing_write = 2,
	FileSharing_delete = 4,
	FileSharing_readWrite = 3,
	FileSharing_readDelete = 5,
	FileSharing_writeDelete = 6,
	FileSharing_readWriteDelete = 7
} FileSharing915;

typedef enum
{
	FileSharingBeh_defaultValue = 0,
	FileSharingBeh_free = 1,
	FileSharingBeh_force = 2
} FileSharingBeh915;

typedef enum
{
	GitType_cygwin = 0,
	GitType_msysgit = 1
} GitType915;

typedef enum
{
	GlobalAuthMethod_disabledGlobally = 1,
	GlobalAuthMethod_permitWinAccounts = 2,
	GlobalAuthMethod_permitVirtAccounts = 3,
	GlobalAuthMethod_permit = 4
} GlobalAuthMethod915;

typedef enum
{
	GlobalGssApiAuth_disabled = 1,
	GlobalGssApiAuth_allowed = 2,
	GlobalGssApiAuth_required = 3
} GlobalGssApiAuth915;

typedef enum
{
	GlobalRequestCapable_builtInRules = 0,
	GlobalRequestCapable_yes = 1,
	GlobalRequestCapable_no = 2
} GlobalRequestCapable915;

typedef enum
{
	GroupType_everyone = 0,
	GroupType_local = 1,
	GroupType_domain = 2
} GroupType915;

typedef enum
{
	GssKex_keep = 0,
	GssKex_prefer = 1,
	GssKex_disable = 2
} GssKex915;

typedef enum
{
	HostKeyType_key = 0,
	HostKeyType_unrecognizedKey = 1,
	HostKeyType_md5Fingerprint = 2,
	HostKeyType_bubbleBabbleFingerprint = 3,
	HostKeyType_sha256Fingerprint = 4
} HostKeyType915;

typedef enum
{
	IfTemporaryProfileLoaded_defaultValue = 0,
	IfTemporaryProfileLoaded_treatAsFailure = 1,
	IfTemporaryProfileLoaded_noRestrict = 2
} IfTemporaryProfileLoaded915;

typedef enum
{
	ImageFileFormat_bmp1Bpp = 0,
	ImageFileFormat_bmp8Bpp = 1,
	ImageFileFormat_bmp16Bpp = 2,
	ImageFileFormat_bmp24Bpp = 3,
	ImageFileFormat_png = 4,
	ImageFileFormat_svg = 5
} ImageFileFormat915;

typedef enum
{
	InstanceType_standalone = 0,
	InstanceType_follower = 1,
	InstanceType_master = 2,
	InstanceType_secondaryMaster = 3
} InstanceType915;

typedef enum
{
	InterfaceType_ipv4 = 0,
	InterfaceType_ipv6 = 1,
	InterfaceType_freeForm = 3,
	InterfaceType_anyIntf = 2
} InterfaceType915;

typedef enum
{
	IpListType_defaultType = 0,
	IpListType_blockedIPs = 1,
	IpListType_permittedIPs = 2
} IpListType915;

typedef enum
{
	IpVersionType_ipv4 = 0,
	IpVersionType_ipv6 = 1
} IpVersionType915;

typedef enum
{
	IpVersionWN_none = 2,
	IpVersionWN_ipv4 = 0,
	IpVersionWN_ipv6 = 1
} IpVersionWN915;

typedef enum
{
	JobObject_doNotUse = 0,
	JobObject_noBreakaway = 1,
	JobObject_allowBreakaway = 2
} JobObject915;

typedef enum
{
	KbdiTotpAlg_defaultValue = 0,
	KbdiTotpAlg_hmacSha1 = 1,
	KbdiTotpAlg_hmacSha256 = 2,
	KbdiTotpAlg_hmacSha512 = 3
} KbdiTotpAlg915;

typedef enum
{
	KbdiTotpAuth_defaultValue = 0,
	KbdiTotpAuth_disabled = 1,
	KbdiTotpAuth_required = 2
} KbdiTotpAuth915;

typedef enum
{
	KbdiTotpNumDigits_defaultValue = 0,
	KbdiTotpNumDigits_digits6 = 6,
	KbdiTotpNumDigits_digits7 = 7,
	KbdiTotpNumDigits_digits8 = 8
} KbdiTotpNumDigits915;

typedef enum
{
	KeypairAlgId_rsa = 1,
	KeypairAlgId_ed25519 = 6,
	KeypairAlgId_ecdsaSecp256k1 = 2,
	KeypairAlgId_ecdsaNistp256 = 3,
	KeypairAlgId_ecdsaNistp384 = 4,
	KeypairAlgId_ecdsaNistp521 = 5,
	KeypairAlgId_dsa = 0
} KeypairAlgId915;

typedef enum
{
	KeypairFormat_bitvise = 0,
	KeypairFormat_openSsh = 1
} KeypairFormat915;

typedef enum
{
	LicenseType_unknown = 0,
	LicenseType_personal = 1,
	LicenseType_nonProfit = 2,
	LicenseType_business = 3
} LicenseType915;

typedef enum
{
	LocationType_country = 0,
	LocationType_continent = 1
} LocationType915;

typedef enum
{
	LogArchivalPathType_relToInstDir = 1,
	LogArchivalPathType_relToLogDir = 2
} LogArchivalPathType915;

typedef enum
{
	LogFileWriteCloseTag_always = 0,
	LogFileWriteCloseTag_onFileClose = 1
} LogFileWriteCloseTag915;

typedef enum
{
	LogLevel_EW_logLevelE = 0,
	LogLevel_EW_logLevelEW = 1,
	LogLevel_EW_logLevelCustom = 9
} LogLevel_EW915;

typedef enum
{
	LogLevel_EWI_logLevelE = 0,
	LogLevel_EWI_logLevelEW = 1,
	LogLevel_EWI_logLevelEWI = 2,
	LogLevel_EWI_logLevelCustom = 9
} LogLevel_EWI915;

typedef enum
{
	LogLevel_EWIT_logLevelE = 0,
	LogLevel_EWIT_logLevelEW = 1,
	LogLevel_EWIT_logLevelEWI = 2,
	LogLevel_EWIT_logLevelEWIT = 3,
	LogLevel_EWIT_logLevelCustom = 9
} LogLevel_EWIT915;

typedef enum
{
	LogLevel_EWITD_logLevelE = 0,
	LogLevel_EWITD_logLevelEW = 1,
	LogLevel_EWITD_logLevelEWI = 2,
	LogLevel_EWITD_logLevelEWIT = 3,
	LogLevel_EWITD_logLevelEWITD = 4,
	LogLevel_EWITD_logLevelCustom = 9
} LogLevel_EWITD915;

typedef enum
{
	LogonType_defaultValue = 0,
	LogonType_interactive = 1,
	LogonType_network = 2,
	LogonType_batch = 3
} LogonType915;

typedef enum
{
	LookupDirection_forward = 0,
	LookupDirection_reverse = 1
} LookupDirection915;

typedef enum
{
	NoFlowControl_disabled = 1,
	NoFlowControl_supported = 115,
	NoFlowControl_preferred = 112
} NoFlowControl915;

typedef enum
{
	OmitDefaults_yes = 0,
	OmitDefaults_no = 1
} OmitDefaults915;

typedef enum
{
	OnAccountInfoFailure_defaultValue = 0,
	OnAccountInfoFailure_denyLogin = 1,
	OnAccountInfoFailure_restrictAccess = 2,
	OnAccountInfoFailure_disableProfile = 3,
	OnAccountInfoFailure_noRestrict = 4
} OnAccountInfoFailure915;

typedef enum
{
	OnDestinationExist_replace = 0,
	OnDestinationExist_appendSuffix = 1,
	OnDestinationExist_abort = 2
} OnDestinationExist915;

typedef enum
{
	OnDnsResolvingError_next = 0,
	OnDnsResolvingError_deny = 1
} OnDnsResolvingError915;

typedef enum
{
	OnLogFileError_continue = 0,
	OnLogFileError_adminOnly = 1,
	OnLogFileError_stopServer = 2
} OnLogFileError915;

typedef enum
{
	OnMoveCompletedUploadFailure_runOnUploadCmd = 0,
	OnMoveCompletedUploadFailure_doNotRunOnUploadCmd = 1
} OnMoveCompletedUploadFailure915;

typedef enum
{
	OnRememberedSharesListFailure_defaultValue = 0,
	OnRememberedSharesListFailure_continue = 1,
	OnRememberedSharesListFailure_disconnect = 2
} OnRememberedSharesListFailure915;

typedef enum
{
	OnShareConnectFailure_continue = 0,
	OnShareConnectFailure_disconnect = 1
} OnShareConnectFailure915;

typedef enum
{
	OnStatsQuotaReached_defaultValue = 0,
	OnStatsQuotaReached_none = 1,
	OnStatsQuotaReached_dropConnection = 2,
	OnStatsQuotaReached_limitBandwidthMbps = 3,
	OnStatsQuotaReached_limitBandwidthKbps = 4
} OnStatsQuotaReached915;

typedef enum
{
	OverrideListeningInterface_never = 0,
	OverrideListeningInterface_always = 1,
	OverrideListeningInterface_ifBindFails = 2
} OverrideListeningInterface915;

typedef enum
{
	PermitMoveExist_useGeneralPerms = 0,
	PermitMoveExist_withinSameDir = 1,
	PermitMoveExist_withinMountPoint = 2,
	PermitMoveExist_accrossMountPoints = 3
} PermitMoveExist915;

typedef enum
{
	PopupMode_never = 0,
	PopupMode_whenMinimized = 1,
	PopupMode_whenInvisible = 2,
	PopupMode_always = 3
} PopupMode915;

typedef enum
{
	PriorityClass_belowNormal = 1,
	PriorityClass_normal = 2,
	PriorityClass_aboveNormal = 3
} PriorityClass915;

typedef enum
{
	ProxyProtocol_disabled = 0,
	ProxyProtocol_required = 1
} ProxyProtocol915;

typedef enum
{
	ProxyType_none = 0,
	ProxyType_socks4 = 1,
	ProxyType_socks5 = 2,
	ProxyType_http = 3
} ProxyType915;

typedef enum
{
	PublicKeyFormat_ssh2 = 0,
	PublicKeyFormat_openSsh = 1
} PublicKeyFormat915;

typedef enum
{
	PwCacheAutoSave_never = 0,
	PwCacheAutoSave_pkAccounts = 1,
	PwCacheAutoSave_allAccounts = 2
} PwCacheAutoSave915;

typedef enum
{
	RemoteAdminAccessType_defaultValue = 0,
	RemoteAdminAccessType_full = 1,
	RemoteAdminAccessType_delegated = 2,
	RemoteAdminAccessType_no = 3
} RemoteAdminAccessType915;

typedef enum
{
	SendBannerMessage_no = 0,
	SendBannerMessage_useText = 1,
	SendBannerMessage_useFile = 2
} SendBannerMessage915;

typedef enum
{
	ServiceType_ssh = 0,
	ServiceType_ftp = 1
} ServiceType915;

typedef enum
{
	SfsMountType_unlimited = 0,
	SfsMountType_directory = 1,
	SfsMountType_encrypted = 2,
	SfsMountType_sftp = 3,
	SfsMountType_hidden = 4,
	SfsMountType_custom = 5
} SfsMountType915;

typedef enum
{
	SfsProviderAcl_disable = 0,
	SfsProviderAcl_unknownToDefault = 1,
	SfsProviderAcl_unknownToError = 2,
	SfsProviderAcl_unknownToIgnore = 3
} SfsProviderAcl915;

typedef enum
{
	SfsProviderOwnerGroup_disable = 0,
	SfsProviderOwnerGroup_unknownToDefault = 1,
	SfsProviderOwnerGroup_unknownToError = 2
} SfsProviderOwnerGroup915;

typedef enum
{
	ShellAccess_defaultValue = 1,
	ShellAccess_disabled = 2,
	ShellAccess_bvshell = 10,
	ShellAccess_cmdPrompt = 3,
	ShellAccess_powershell = 4,
	ShellAccess_bash = 5,
	ShellAccess_gitonly = 6,
	ShellAccess_telnetSrv = 9,
	ShellAccess_custom = 7
} ShellAccess915;

typedef enum
{
	ShowDefaults_no = 0,
	ShowDefaults_yes = 1
} ShowDefaults915;

typedef enum
{
	SmtpAuthType_none = 0,
	SmtpAuthType_useSuitable = 1,
	SmtpAuthType_authPlain = 2,
	SmtpAuthType_authCramMd5 = 3,
	SmtpAuthType_authLogin = 4
} SmtpAuthType915;

typedef enum
{
	TaskElevation_yesIfPossible = 0,
	TaskElevation_require = 1,
	TaskElevation_noIfPossible = 2,
	TaskElevation_ifPossible = 0,
	TaskElevation_no = 2
} TaskElevation915;

typedef enum
{
	TaskOutputCodePage_ansi = 1,
	TaskOutputCodePage_utf8 = 2
} TaskOutputCodePage915;

typedef enum
{
	TaskSecurityContext_localAccount = 1,
	TaskSecurityContext_domainAccount = 2,
	TaskSecurityContext_microsoftAccount = 3,
	TaskSecurityContext_bssContext = 4,
	TaskSecurityContext_localService = 5,
	TaskSecurityContext_networkService = 6
} TaskSecurityContext915;

typedef enum
{
	TaskShutdownPolicy_stop = 1,
	TaskShutdownPolicy_continue = 2
} TaskShutdownPolicy915;

typedef enum
{
	TaskTriggerEvent_I_AUTH_KEYS_SYNC_SETTINGS_APPLIED = 319069,
	TaskTriggerEvent_I_CONNECT_ACCEPTED = 340070,
	TaskTriggerEvent_I_CONNECT_CANCELED = 340074,
	TaskTriggerEvent_I_CONNECT_DISCONNECTED_ABNORMALLY = 340467,
	TaskTriggerEvent_I_CONNECT_DISCONNECTED_NORMALLY = 340085,
	TaskTriggerEvent_I_CONNECT_REJECTED = 340071,
	TaskTriggerEvent_I_EXECS_COMMAND_EXECUTED = 362260,
	TaskTriggerEvent_I_LOGOFF_CONN_COMMAND_EXECUTED = 343155,
	TaskTriggerEvent_I_LOGOFF_WIN_COMMAND_EXECUTED = 343703,
	TaskTriggerEvent_I_LOGON_AUTH_CANNOT_COMPLETE = 342894,
	TaskTriggerEvent_I_LOGON_AUTH_COMPLETED = 342088,
	TaskTriggerEvent_I_LOGON_AUTH_REJECTED = 342090,
	TaskTriggerEvent_I_LOGON_AUTH_VIRT_PASSWORD_CHANGED = 342548,
	TaskTriggerEvent_I_LOGON_AUTH_WIN_PASSWORD_CHANGED = 342547,
	TaskTriggerEvent_I_LOGON_CONN_COMMAND_EXECUTED = 342146,
	TaskTriggerEvent_I_LOGON_WIN_COMMAND_EXECUTED = 342695,
	TaskTriggerEvent_I_SCP_SERVER_COMMAND_STARTED = 363268,
	TaskTriggerEvent_I_SERVICE_CONFIG_DESCRIPTION = 310016,
	TaskTriggerEvent_I_SFS_TRANSFER_FILE = 370348,
	TaskTriggerEvent_I_SSH_KEY_EXCHANGE_MISMATCH = 351498,
	TaskTriggerEvent_I_TOTERMS_COMMAND_EXECUTED = 361247,
	TaskTriggerEvent_I_UPDATE_MANAGER_INSTALL_LAUNCHED = 324561,
	TaskTriggerEvent_I_UPLOAD_COMMAND_EXECUTED = 350450,
	TaskTriggerEvent_W_SYSTEM_MONITOR_HIGH_CPU_USAGE = 229745,
	TaskTriggerEvent_W_SYSTEM_MONITOR_HIGH_MEMORY_USAGE = 229747,
	TaskTriggerEvent_W_SYSTEM_MONITOR_LOW_DISK_SPACE = 229749
} TaskTriggerEvent915;

typedef enum
{
	TaskTriggerPeriod_daily = 1,
	TaskTriggerPeriod_weekly = 2,
	TaskTriggerPeriod_monthly = 3
} TaskTriggerPeriod915;

typedef enum
{
	TaskTriggerType_time = 1,
	TaskTriggerType_logEvent = 2,
	TaskTriggerType_logEventList = 3
} TaskTriggerType915;

typedef enum
{
	TaskType_logMaintenance = 1,
	TaskType_execCommand = 2,
	TaskType_emailNotification = 3
} TaskType915;

typedef enum
{
	TerminalCodePage_utf8 = 65001,
	TerminalCodePage_iso88591 = 28591,
	TerminalCodePage_iso88592 = 28592,
	TerminalCodePage_iso88593 = 28593,
	TerminalCodePage_iso88594 = 28594,
	TerminalCodePage_iso88595 = 28595,
	TerminalCodePage_iso88596 = 28596,
	TerminalCodePage_iso88597 = 28597,
	TerminalCodePage_iso88598 = 28598,
	TerminalCodePage_iso88599 = 28599,
	TerminalCodePage_iso885910 = 28600,
	TerminalCodePage_iso885911 = 28601,
	TerminalCodePage_iso885913 = 28603,
	TerminalCodePage_iso885914 = 28604,
	TerminalCodePage_iso885915 = 28605,
	TerminalCodePage_iso885916 = 28606,
	TerminalCodePage_ansi1250 = 1250,
	TerminalCodePage_ansi1251 = 1251,
	TerminalCodePage_ansi1252 = 1252,
	TerminalCodePage_ansi1253 = 1253,
	TerminalCodePage_ansi1254 = 1254,
	TerminalCodePage_ansi1255 = 1255,
	TerminalCodePage_ansi1256 = 1256,
	TerminalCodePage_ansi1257 = 1257,
	TerminalCodePage_ansi1258 = 1258,
	TerminalCodePage_ansi874 = 874,
	TerminalCodePage_ansi932 = 932,
	TerminalCodePage_ansi936 = 936,
	TerminalCodePage_ansi949 = 949,
	TerminalCodePage_ansi950 = 950,
	TerminalCodePage_oem437 = 437,
	TerminalCodePage_oem720 = 720,
	TerminalCodePage_oem737 = 737,
	TerminalCodePage_oem775 = 775,
	TerminalCodePage_oem850 = 850,
	TerminalCodePage_oem852 = 852,
	TerminalCodePage_oem855 = 855,
	TerminalCodePage_oem857 = 857,
	TerminalCodePage_oem858 = 858,
	TerminalCodePage_oem860 = 860,
	TerminalCodePage_oem861 = 861,
	TerminalCodePage_oem862 = 862,
	TerminalCodePage_oem863 = 863,
	TerminalCodePage_oem864 = 864,
	TerminalCodePage_oem865 = 865,
	TerminalCodePage_oem866 = 866,
	TerminalCodePage_oem869 = 869,
	TerminalCodePage_koi8r = 20866,
	TerminalCodePage_koi8u = 21866,
	TerminalCodePage_johab = 1361
} TerminalCodePage915;

typedef enum
{
	TlsAssuranceDirect_noTls = 0,
	TlsAssuranceDirect_tlsNoHostAuth = 1,
	TlsAssuranceDirect_tlsAnyServer = 2,
	TlsAssuranceDirect_tlsDomainMatch = 3
} TlsAssuranceDirect915;

typedef enum
{
	TlsAssuranceRelay_noTls = 0,
	TlsAssuranceRelay_tlsNoHostAuth = 1,
	TlsAssuranceRelay_tlsAnyServer = 2,
	TlsAssuranceRelay_tlsDomainMatch = 3,
	TlsAssuranceRelay_tlsExactMatch = 4
} TlsAssuranceRelay915;

typedef enum
{
	UpdateDownloadMethod_downloadFromMaster = 0,
	UpdateDownloadMethod_downloadFromUrl = 1
} UpdateDownloadMethod915;

typedef enum
{
	UserAuthType_none = 0,
	UserAuthType_password = 1,
	UserAuthType_passwordOverKbdi = 2,
	UserAuthType_publicKey = 3,
	UserAuthType_gssApiWithMic = 4,
	UserAuthType_gssApiKeyEx = 5
} UserAuthType915;

typedef enum
{
	VirtAcctSecurityContext_defaultValue = 0,
	VirtAcctSecurityContext_autoAccount = 1,
	VirtAcctSecurityContext_localAccount = 2,
	VirtAcctSecurityContext_domainAccount = 3,
	VirtAcctSecurityContext_microsoftAccount = 5,
	VirtAcctSecurityContext_service = 4
} VirtAcctSecurityContext915;

typedef enum
{
	WhitelistAddressType_ipv4 = 0,
	WhitelistAddressType_ipv6 = 1,
	WhitelistAddressType_location = 4
} WhitelistAddressType915;

typedef enum
{
	WinAccountType_localAccount = 1,
	WinAccountType_domainAccount = 2,
	WinAccountType_microsoftAccount = 3
} WinAccountType915;

typedef enum
{
	WindowsFirewallSetting_dontChange = 1,
	WindowsFirewallSetting_subnetScope = 2,
	WindowsFirewallSetting_subnetScopeAllProfiles = 4,
	WindowsFirewallSetting_globalScope = 3
} WindowsFirewallSetting915;

[
	object,
	uuid(7DDA9C78-6FCC-9170-A7F1-2A29EEEB5269),
	dual,
	pointer_default(unique)
]
interface IAddressVer4Type915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] AddressVer4Type915* result);
	[propget] HRESULT location([out, retval] AddressVer4Type915* result);
	[propget] HRESULT dnsName([out, retval] AddressVer4Type915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AddressVer4Type915* value);
	HRESULT ToName([in] AddressVer4Type915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AddressVer4Type915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(0D71D53C-ED63-1CEF-5EC8-91652FC22142),
	dual,
	pointer_default(unique)
]
interface IAddressVer6Type915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] AddressVer6Type915* result);
	[propget] HRESULT ipv6([out, retval] AddressVer6Type915* result);
	[propget] HRESULT location([out, retval] AddressVer6Type915* result);
	[propget] HRESULT anyIP([out, retval] AddressVer6Type915* result);
	[propget] HRESULT dnsName([out, retval] AddressVer6Type915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AddressVer6Type915* value);
	HRESULT ToName([in] AddressVer6Type915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AddressVer6Type915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(BAFCF369-E9EC-D9D1-78E8-AC858F6CB418),
	dual,
	pointer_default(unique)
]
interface IAdsiEncryption915 : IDispatch
{
	[propget] HRESULT kerberos([out, retval] AdsiEncryption915* result);
	[propget] HRESULT tls([out, retval] AdsiEncryption915* result);
	[propget] HRESULT plaintext([out, retval] AdsiEncryption915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AdsiEncryption915* value);
	HRESULT ToName([in] AdsiEncryption915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AdsiEncryption915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(74622DCB-6E5F-F927-757E-6561C5B4D1E7),
	dual,
	pointer_default(unique)
]
interface IAuthDisp915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] AuthDisp915* result);
	[propget] HRESULT disabled([out, retval] AuthDisp915* result);
	[propget] HRESULT allowed([out, retval] AuthDisp915* result);
	[propget] HRESULT required([out, retval] AuthDisp915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AuthDisp915* value);
	HRESULT ToName([in] AuthDisp915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AuthDisp915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(C2C4AC5A-21D1-3E34-F13F-DD2337C10DB8),
	dual,
	pointer_default(unique)
]
interface IAutoManageHostKeys915 : IDispatch
{
	[propget] HRESULT disabled([out, retval] AutoManageHostKeys915* result);
	[propget] HRESULT enabledKeepOld([out, retval] AutoManageHostKeys915* result);
	[propget] HRESULT enabledDeleteOld([out, retval] AutoManageHostKeys915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AutoManageHostKeys915* value);
	HRESULT ToName([in] AutoManageHostKeys915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AutoManageHostKeys915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B978A6D3-B044-2C79-9622-FA6E1D8C639E),
	dual,
	pointer_default(unique)
]
interface IAutomaticIpBlocking915 : IDispatch
{
	[propget] HRESULT doNotBlock([out, retval] AutomaticIpBlocking915* result);
	[propget] HRESULT blockTemporarily([out, retval] AutomaticIpBlocking915* result);
	[propget] HRESULT blockPermanently([out, retval] AutomaticIpBlocking915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AutomaticIpBlocking915* value);
	HRESULT ToName([in] AutomaticIpBlocking915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AutomaticIpBlocking915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(BF17887F-7F94-25E1-CF6B-CEF21130652A),
	dual,
	pointer_default(unique)
]
interface IAutomaticUpdatesType915 : IDispatch
{
	[propget] HRESULT doNotCheck([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT checkOnly([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT stronglyRecommended([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT recommended([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT allAvailable([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT applyAvailable([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT applyRecommended([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT applyStronglyRecommended([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT checkForUpdates([out, retval] AutomaticUpdatesType915* result);
	[propget] HRESULT doNotCheckForUpdates([out, retval] AutomaticUpdatesType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] AutomaticUpdatesType915* value);
	HRESULT ToName([in] AutomaticUpdatesType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] AutomaticUpdatesType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(704AD177-9986-CD84-6F89-641726F8CED6),
	dual,
	pointer_default(unique)
]
interface IBandwidthLimit915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] BandwidthLimit915* result);
	[propget] HRESULT none([out, retval] BandwidthLimit915* result);
	[propget] HRESULT mbps([out, retval] BandwidthLimit915* result);
	[propget] HRESULT kbps([out, retval] BandwidthLimit915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] BandwidthLimit915* value);
	HRESULT ToName([in] BandwidthLimit915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] BandwidthLimit915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(52DA608F-E6F2-F2B8-2F31-14B25DF6EF55),
	dual,
	pointer_default(unique)
]
interface IBandwidthType915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] BandwidthType915* result);
	[propget] HRESULT perUser([out, retval] BandwidthType915* result);
	[propget] HRESULT perConnection([out, retval] BandwidthType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] BandwidthType915* value);
	HRESULT ToName([in] BandwidthType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] BandwidthType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(18E8138F-1807-6574-B055-4A21B1481E79),
	dual,
	pointer_default(unique)
]
interface ICertAlgId915 : IDispatch
{
	[propget] HRESULT rsa([out, retval] CertAlgId915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] CertAlgId915* value);
	HRESULT ToName([in] CertAlgId915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] CertAlgId915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(BFD40C4A-D28A-147E-4EFE-487455306A7A),
	dual,
	pointer_default(unique)
]
interface ICertificateFormat915 : IDispatch
{
	[propget] HRESULT bitvise([out, retval] CertificateFormat915* result);
	[propget] HRESULT x509([out, retval] CertificateFormat915* result);
	[propget] HRESULT pfx([out, retval] CertificateFormat915* result);
	[propget] HRESULT pem([out, retval] CertificateFormat915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] CertificateFormat915* value);
	HRESULT ToName([in] CertificateFormat915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] CertificateFormat915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(8CB401BF-40DD-3618-7DFB-D47D29D61BD5),
	dual,
	pointer_default(unique)
]
interface ICertificateType915 : IDispatch
{
	[propget] HRESULT certificate([out, retval] CertificateType915* result);
	[propget] HRESULT privateKey([out, retval] CertificateType915* result);
	[propget] HRESULT nonEmployableCertificate([out, retval] CertificateType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] CertificateType915* value);
	HRESULT ToName([in] CertificateType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] CertificateType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7A36427A-DC46-BF49-E4E3-0AED2FC1558B),
	dual,
	pointer_default(unique)
]
interface IConsoleVersion915 : IDispatch
{
	[propget] HRESULT systemDefault([out, retval] ConsoleVersion915* result);
	[propget] HRESULT preWin10([out, retval] ConsoleVersion915* result);
	[propget] HRESULT win10([out, retval] ConsoleVersion915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ConsoleVersion915* value);
	HRESULT ToName([in] ConsoleVersion915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ConsoleVersion915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(8EDA8B4D-EA1B-5FA3-FE8E-444C291DE66F),
	dual,
	pointer_default(unique)
]
interface ICsvColumnNames915 : IDispatch
{
	[propget] HRESULT doNotInclude([out, retval] CsvColumnNames915* result);
	[propget] HRESULT friendlyNames([out, retval] CsvColumnNames915* result);
	[propget] HRESULT scriptableNames([out, retval] CsvColumnNames915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] CsvColumnNames915* value);
	HRESULT ToName([in] CsvColumnNames915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] CsvColumnNames915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(5BA31E2F-94AF-936E-EBE6-53E7F2E5A565),
	dual,
	pointer_default(unique)
]
interface ICustomSubsysAccess915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] CustomSubsysAccess915* result);
	[propget] HRESULT denyAll([out, retval] CustomSubsysAccess915* result);
	[propget] HRESULT allowSpecific([out, retval] CustomSubsysAccess915* result);
	[propget] HRESULT allowAll([out, retval] CustomSubsysAccess915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] CustomSubsysAccess915* value);
	HRESULT ToName([in] CustomSubsysAccess915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] CustomSubsysAccess915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(FC822CEE-D085-50E6-A6A8-6C5C3D0A84C1),
	dual,
	pointer_default(unique)
]
interface IDayChoice915 : IDispatch
{
	[propget] HRESULT dayOfWeek([out, retval] DayChoice915* result);
	[propget] HRESULT dayOfMonth([out, retval] DayChoice915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DayChoice915* value);
	HRESULT ToName([in] DayChoice915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DayChoice915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7F0BF0FB-66F4-7FBA-FFF5-FF76422C95FB),
	dual,
	pointer_default(unique)
]
interface IDefaultGlobalYesNo915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] DefaultGlobalYesNo915* result);
	[propget] HRESULT yes([out, retval] DefaultGlobalYesNo915* result);
	[propget] HRESULT no([out, retval] DefaultGlobalYesNo915* result);
	[propget] HRESULT false([out, retval] DefaultGlobalYesNo915* result);
	[propget] HRESULT true([out, retval] DefaultGlobalYesNo915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DefaultGlobalYesNo915* value);
	HRESULT ToName([in] DefaultGlobalYesNo915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DefaultGlobalYesNo915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(EBE5F049-4D1E-75C3-0C44-AF227A8E24F1),
	dual,
	pointer_default(unique)
]
interface IDefaultGroupYesNo915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] DefaultGroupYesNo915* result);
	[propget] HRESULT yes([out, retval] DefaultGroupYesNo915* result);
	[propget] HRESULT no([out, retval] DefaultGroupYesNo915* result);
	[propget] HRESULT false([out, retval] DefaultGroupYesNo915* result);
	[propget] HRESULT true([out, retval] DefaultGroupYesNo915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DefaultGroupYesNo915* value);
	HRESULT ToName([in] DefaultGroupYesNo915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DefaultGroupYesNo915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(5F599240-F63F-6C6D-11FF-5E435E357C79),
	dual,
	pointer_default(unique)
]
interface IDefaultYesNo915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] DefaultYesNo915* result);
	[propget] HRESULT yes([out, retval] DefaultYesNo915* result);
	[propget] HRESULT no([out, retval] DefaultYesNo915* result);
	[propget] HRESULT false([out, retval] DefaultYesNo915* result);
	[propget] HRESULT true([out, retval] DefaultYesNo915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DefaultYesNo915* value);
	HRESULT ToName([in] DefaultYesNo915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DefaultYesNo915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(3E26AC70-0572-FB93-160C-CF292FB9E3B7),
	dual,
	pointer_default(unique)
]
interface IDirHandleMisuse915 : IDispatch
{
	[propget] HRESULT failImmediately([out, retval] DirHandleMisuse915* result);
	[propget] HRESULT forwardAsIs([out, retval] DirHandleMisuse915* result);
	[propget] HRESULT replaceWithPathOp([out, retval] DirHandleMisuse915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DirHandleMisuse915* value);
	HRESULT ToName([in] DirHandleMisuse915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DirHandleMisuse915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(DF18B966-CEA8-92A7-3621-F31A23F92895),
	dual,
	pointer_default(unique)
]
interface IDisplayTimeType915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] DisplayTimeType915* result);
	[propget] HRESULT serverTimeWithOffset([out, retval] DisplayTimeType915* result);
	[propget] HRESULT serverTime([out, retval] DisplayTimeType915* result);
	[propget] HRESULT utc([out, retval] DisplayTimeType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DisplayTimeType915* value);
	HRESULT ToName([in] DisplayTimeType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DisplayTimeType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(2824D16F-A52F-38AF-4DDC-736D71415568),
	dual,
	pointer_default(unique)
]
interface IDuplicateTaskPolicy915 : IDispatch
{
	[propget] HRESULT doNotStart([out, retval] DuplicateTaskPolicy915* result);
	[propget] HRESULT parallel([out, retval] DuplicateTaskPolicy915* result);
	[propget] HRESULT stopExisting([out, retval] DuplicateTaskPolicy915* result);
	[propget] HRESULT queue([out, retval] DuplicateTaskPolicy915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] DuplicateTaskPolicy915* value);
	HRESULT ToName([in] DuplicateTaskPolicy915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] DuplicateTaskPolicy915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(6AE65365-7826-FBFA-5F01-A11F9691A908),
	dual,
	pointer_default(unique)
]
interface IEmailSending915 : IDispatch
{
	[propget] HRESULT notConfigured([out, retval] EmailSending915* result);
	[propget] HRESULT sendViaRelay([out, retval] EmailSending915* result);
	[propget] HRESULT sendDirectly([out, retval] EmailSending915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] EmailSending915* value);
	HRESULT ToName([in] EmailSending915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] EmailSending915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(CD114940-0E0E-1585-80B7-A287893D40F7),
	dual,
	pointer_default(unique)
]
interface IEmulateCheckFile915 : IDispatch
{
	[propget] HRESULT always([out, retval] EmulateCheckFile915* result);
	[propget] HRESULT asFallback([out, retval] EmulateCheckFile915* result);
	[propget] HRESULT never([out, retval] EmulateCheckFile915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] EmulateCheckFile915* value);
	HRESULT ToName([in] EmulateCheckFile915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] EmulateCheckFile915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B8C8AB72-A542-FC6F-3308-56F380234D15),
	dual,
	pointer_default(unique)
]
interface IEmulateTextMode915 : IDispatch
{
	[propget] HRESULT always([out, retval] EmulateTextMode915* result);
	[propget] HRESULT ifNeeded([out, retval] EmulateTextMode915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] EmulateTextMode915* value);
	HRESULT ToName([in] EmulateTextMode915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] EmulateTextMode915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(E88EACF8-11DF-82CC-277C-439FFAE13893),
	dual,
	pointer_default(unique)
]
interface IEmulateTextNewline915 : IDispatch
{
	[propget] HRESULT autoDetect([out, retval] EmulateTextNewline915* result);
	[propget] HRESULT crlf([out, retval] EmulateTextNewline915* result);
	[propget] HRESULT lf([out, retval] EmulateTextNewline915* result);
	[propget] HRESULT cr([out, retval] EmulateTextNewline915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] EmulateTextNewline915* value);
	HRESULT ToName([in] EmulateTextNewline915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] EmulateTextNewline915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(42678D7C-C54D-6800-BB70-878372E7E4A2),
	dual,
	pointer_default(unique)
]
interface IEventType915 : IDispatch
{
	[propget] HRESULT error([out, retval] EventType915* result);
	[propget] HRESULT warning([out, retval] EventType915* result);
	[propget] HRESULT info([out, retval] EventType915* result);
	[propget] HRESULT trace([out, retval] EventType915* result);
	[propget] HRESULT debug([out, retval] EventType915* result);
	[propget] HRESULT unrecognized([out, retval] EventType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] EventType915* value);
	HRESULT ToName([in] EventType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] EventType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(73917FFD-B259-CC93-B13B-D1EC17A91E1C),
	dual,
	pointer_default(unique)
]
interface IFileSharing915 : IDispatch
{
	[propget] HRESULT none([out, retval] FileSharing915* result);
	[propget] HRESULT read([out, retval] FileSharing915* result);
	[propget] HRESULT write([out, retval] FileSharing915* result);
	[propget] HRESULT delete([out, retval] FileSharing915* result);
	[propget] HRESULT readWrite([out, retval] FileSharing915* result);
	[propget] HRESULT readDelete([out, retval] FileSharing915* result);
	[propget] HRESULT writeDelete([out, retval] FileSharing915* result);
	[propget] HRESULT readWriteDelete([out, retval] FileSharing915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] FileSharing915* value);
	HRESULT ToName([in] FileSharing915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] FileSharing915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(BB69DB15-7FFA-5A98-5200-48B50A4EDC64),
	dual,
	pointer_default(unique)
]
interface IFileSharingBeh915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] FileSharingBeh915* result);
	[propget] HRESULT free([out, retval] FileSharingBeh915* result);
	[propget] HRESULT force([out, retval] FileSharingBeh915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] FileSharingBeh915* value);
	HRESULT ToName([in] FileSharingBeh915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] FileSharingBeh915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(633AB94E-7C7A-52E3-4716-3DAEC14159C5),
	dual,
	pointer_default(unique)
]
interface IGitType915 : IDispatch
{
	[propget] HRESULT cygwin([out, retval] GitType915* result);
	[propget] HRESULT msysgit([out, retval] GitType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GitType915* value);
	HRESULT ToName([in] GitType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GitType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(8712843A-A284-79AA-CF41-C4A26E196AAE),
	dual,
	pointer_default(unique)
]
interface IGlobalAuthMethod915 : IDispatch
{
	[propget] HRESULT disabledGlobally([out, retval] GlobalAuthMethod915* result);
	[propget] HRESULT permitWinAccounts([out, retval] GlobalAuthMethod915* result);
	[propget] HRESULT permitVirtAccounts([out, retval] GlobalAuthMethod915* result);
	[propget] HRESULT permit([out, retval] GlobalAuthMethod915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GlobalAuthMethod915* value);
	HRESULT ToName([in] GlobalAuthMethod915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GlobalAuthMethod915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(F4AFF6E7-5832-1AEE-75F8-AAE944207626),
	dual,
	pointer_default(unique)
]
interface IGlobalGssApiAuth915 : IDispatch
{
	[propget] HRESULT disabled([out, retval] GlobalGssApiAuth915* result);
	[propget] HRESULT allowed([out, retval] GlobalGssApiAuth915* result);
	[propget] HRESULT required([out, retval] GlobalGssApiAuth915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GlobalGssApiAuth915* value);
	HRESULT ToName([in] GlobalGssApiAuth915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GlobalGssApiAuth915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(BFD732B2-DD27-863F-6E2D-9AC7EF297C59),
	dual,
	pointer_default(unique)
]
interface IGlobalRequestCapable915 : IDispatch
{
	[propget] HRESULT builtInRules([out, retval] GlobalRequestCapable915* result);
	[propget] HRESULT yes([out, retval] GlobalRequestCapable915* result);
	[propget] HRESULT no([out, retval] GlobalRequestCapable915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GlobalRequestCapable915* value);
	HRESULT ToName([in] GlobalRequestCapable915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GlobalRequestCapable915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(3BD9F161-E7F7-2302-EE0B-5ABB15D86573),
	dual,
	pointer_default(unique)
]
interface IGroupType915 : IDispatch
{
	[propget] HRESULT everyone([out, retval] GroupType915* result);
	[propget] HRESULT local([out, retval] GroupType915* result);
	[propget] HRESULT domain([out, retval] GroupType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GroupType915* value);
	HRESULT ToName([in] GroupType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GroupType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B5373117-987E-689F-98AC-F0D981065659),
	dual,
	pointer_default(unique)
]
interface IGssKex915 : IDispatch
{
	[propget] HRESULT keep([out, retval] GssKex915* result);
	[propget] HRESULT prefer([out, retval] GssKex915* result);
	[propget] HRESULT disable([out, retval] GssKex915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] GssKex915* value);
	HRESULT ToName([in] GssKex915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] GssKex915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(5A6CEE3F-4CBD-F5CB-01B0-6FFD630EFD4F),
	dual,
	pointer_default(unique)
]
interface IHostKeyType915 : IDispatch
{
	[propget] HRESULT key([out, retval] HostKeyType915* result);
	[propget] HRESULT unrecognizedKey([out, retval] HostKeyType915* result);
	[propget] HRESULT md5Fingerprint([out, retval] HostKeyType915* result);
	[propget] HRESULT bubbleBabbleFingerprint([out, retval] HostKeyType915* result);
	[propget] HRESULT sha256Fingerprint([out, retval] HostKeyType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] HostKeyType915* value);
	HRESULT ToName([in] HostKeyType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] HostKeyType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(14EB23FE-5DA8-863F-B8C8-D81B52240B54),
	dual,
	pointer_default(unique)
]
interface IIfTemporaryProfileLoaded915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] IfTemporaryProfileLoaded915* result);
	[propget] HRESULT treatAsFailure([out, retval] IfTemporaryProfileLoaded915* result);
	[propget] HRESULT noRestrict([out, retval] IfTemporaryProfileLoaded915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] IfTemporaryProfileLoaded915* value);
	HRESULT ToName([in] IfTemporaryProfileLoaded915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] IfTemporaryProfileLoaded915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(4582D1B8-8441-26D2-E493-7600D9EB26A7),
	dual,
	pointer_default(unique)
]
interface IImageFileFormat915 : IDispatch
{
	[propget] HRESULT bmp1Bpp([out, retval] ImageFileFormat915* result);
	[propget] HRESULT bmp8Bpp([out, retval] ImageFileFormat915* result);
	[propget] HRESULT bmp16Bpp([out, retval] ImageFileFormat915* result);
	[propget] HRESULT bmp24Bpp([out, retval] ImageFileFormat915* result);
	[propget] HRESULT png([out, retval] ImageFileFormat915* result);
	[propget] HRESULT svg([out, retval] ImageFileFormat915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ImageFileFormat915* value);
	HRESULT ToName([in] ImageFileFormat915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ImageFileFormat915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7AA92636-1F88-F6B5-6CD1-078830A02F5F),
	dual,
	pointer_default(unique)
]
interface IInstanceType915 : IDispatch
{
	[propget] HRESULT standalone([out, retval] InstanceType915* result);
	[propget] HRESULT follower([out, retval] InstanceType915* result);
	[propget] HRESULT master([out, retval] InstanceType915* result);
	[propget] HRESULT secondaryMaster([out, retval] InstanceType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] InstanceType915* value);
	HRESULT ToName([in] InstanceType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] InstanceType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(DC36C73E-8438-E608-591E-C26CAAD3A674),
	dual,
	pointer_default(unique)
]
interface IInterfaceType915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] InterfaceType915* result);
	[propget] HRESULT ipv6([out, retval] InterfaceType915* result);
	[propget] HRESULT freeForm([out, retval] InterfaceType915* result);
	[propget] HRESULT anyIntf([out, retval] InterfaceType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] InterfaceType915* value);
	HRESULT ToName([in] InterfaceType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] InterfaceType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(434EB900-0EFB-39EA-7E20-EF7E14B646AF),
	dual,
	pointer_default(unique)
]
interface IIpListType915 : IDispatch
{
	[propget] HRESULT defaultType([out, retval] IpListType915* result);
	[propget] HRESULT blockedIPs([out, retval] IpListType915* result);
	[propget] HRESULT permittedIPs([out, retval] IpListType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] IpListType915* value);
	HRESULT ToName([in] IpListType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] IpListType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(35A2F720-B2F8-283E-7380-FF159E6A9AD1),
	dual,
	pointer_default(unique)
]
interface IIpVersionType915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] IpVersionType915* result);
	[propget] HRESULT ipv6([out, retval] IpVersionType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] IpVersionType915* value);
	HRESULT ToName([in] IpVersionType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] IpVersionType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(12CDFB0F-1A6A-B30E-32EB-3D6CCC980094),
	dual,
	pointer_default(unique)
]
interface IIpVersionWN915 : IDispatch
{
	[propget] HRESULT none([out, retval] IpVersionWN915* result);
	[propget] HRESULT ipv4([out, retval] IpVersionWN915* result);
	[propget] HRESULT ipv6([out, retval] IpVersionWN915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] IpVersionWN915* value);
	HRESULT ToName([in] IpVersionWN915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] IpVersionWN915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(8CEA0BBB-8AF6-8A70-D024-D5066676DF64),
	dual,
	pointer_default(unique)
]
interface IJobObject915 : IDispatch
{
	[propget] HRESULT doNotUse([out, retval] JobObject915* result);
	[propget] HRESULT noBreakaway([out, retval] JobObject915* result);
	[propget] HRESULT allowBreakaway([out, retval] JobObject915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] JobObject915* value);
	HRESULT ToName([in] JobObject915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] JobObject915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(92140EA6-32F6-B32E-EF9D-A34472EB715F),
	dual,
	pointer_default(unique)
]
interface IKbdiTotpAlg915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] KbdiTotpAlg915* result);
	[propget] HRESULT hmacSha1([out, retval] KbdiTotpAlg915* result);
	[propget] HRESULT hmacSha256([out, retval] KbdiTotpAlg915* result);
	[propget] HRESULT hmacSha512([out, retval] KbdiTotpAlg915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] KbdiTotpAlg915* value);
	HRESULT ToName([in] KbdiTotpAlg915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] KbdiTotpAlg915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(139C7E49-BE47-1E9C-D2E1-BF0086921F4F),
	dual,
	pointer_default(unique)
]
interface IKbdiTotpAuth915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] KbdiTotpAuth915* result);
	[propget] HRESULT disabled([out, retval] KbdiTotpAuth915* result);
	[propget] HRESULT required([out, retval] KbdiTotpAuth915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] KbdiTotpAuth915* value);
	HRESULT ToName([in] KbdiTotpAuth915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] KbdiTotpAuth915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(3CAE012C-48BF-FC2A-3112-102D6BF4E13F),
	dual,
	pointer_default(unique)
]
interface IKbdiTotpNumDigits915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] KbdiTotpNumDigits915* result);
	[propget] HRESULT digits6([out, retval] KbdiTotpNumDigits915* result);
	[propget] HRESULT digits7([out, retval] KbdiTotpNumDigits915* result);
	[propget] HRESULT digits8([out, retval] KbdiTotpNumDigits915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] KbdiTotpNumDigits915* value);
	HRESULT ToName([in] KbdiTotpNumDigits915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] KbdiTotpNumDigits915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(18518BC7-7244-F755-E837-B3C35FE64C60),
	dual,
	pointer_default(unique)
]
interface IKeypairAlgId915 : IDispatch
{
	[propget] HRESULT rsa([out, retval] KeypairAlgId915* result);
	[propget] HRESULT ed25519([out, retval] KeypairAlgId915* result);
	[propget] HRESULT ecdsaSecp256k1([out, retval] KeypairAlgId915* result);
	[propget] HRESULT ecdsaNistp256([out, retval] KeypairAlgId915* result);
	[propget] HRESULT ecdsaNistp384([out, retval] KeypairAlgId915* result);
	[propget] HRESULT ecdsaNistp521([out, retval] KeypairAlgId915* result);
	[propget] HRESULT dsa([out, retval] KeypairAlgId915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] KeypairAlgId915* value);
	HRESULT ToName([in] KeypairAlgId915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] KeypairAlgId915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7E1465F2-E7B0-331C-637A-ED79F528DCCC),
	dual,
	pointer_default(unique)
]
interface IKeypairFormat915 : IDispatch
{
	[propget] HRESULT bitvise([out, retval] KeypairFormat915* result);
	[propget] HRESULT openSsh([out, retval] KeypairFormat915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] KeypairFormat915* value);
	HRESULT ToName([in] KeypairFormat915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] KeypairFormat915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(713D82A0-1245-0E92-D706-BA5E090AB45C),
	dual,
	pointer_default(unique)
]
interface ILicenseType915 : IDispatch
{
	[propget] HRESULT unknown([out, retval] LicenseType915* result);
	[propget] HRESULT personal([out, retval] LicenseType915* result);
	[propget] HRESULT nonProfit([out, retval] LicenseType915* result);
	[propget] HRESULT business([out, retval] LicenseType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LicenseType915* value);
	HRESULT ToName([in] LicenseType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LicenseType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(37953CDF-9995-1615-465F-F387B6A62633),
	dual,
	pointer_default(unique)
]
interface ILocationType915 : IDispatch
{
	[propget] HRESULT country([out, retval] LocationType915* result);
	[propget] HRESULT continent([out, retval] LocationType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LocationType915* value);
	HRESULT ToName([in] LocationType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LocationType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(3B834B28-832F-9ACA-0F3B-4FCE4D5B5AD0),
	dual,
	pointer_default(unique)
]
interface ILogArchivalPathType915 : IDispatch
{
	[propget] HRESULT relToInstDir([out, retval] LogArchivalPathType915* result);
	[propget] HRESULT relToLogDir([out, retval] LogArchivalPathType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogArchivalPathType915* value);
	HRESULT ToName([in] LogArchivalPathType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogArchivalPathType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(287C538A-B327-CED8-CF3F-079F3BAA4C4F),
	dual,
	pointer_default(unique)
]
interface ILogFileWriteCloseTag915 : IDispatch
{
	[propget] HRESULT always([out, retval] LogFileWriteCloseTag915* result);
	[propget] HRESULT onFileClose([out, retval] LogFileWriteCloseTag915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogFileWriteCloseTag915* value);
	HRESULT ToName([in] LogFileWriteCloseTag915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogFileWriteCloseTag915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B46197E9-38D5-B837-2711-D63E32FACA0B),
	dual,
	pointer_default(unique)
]
interface ILogLevel_EW915 : IDispatch
{
	[propget] HRESULT logLevelE([out, retval] LogLevel_EW915* result);
	[propget] HRESULT logLevelEW([out, retval] LogLevel_EW915* result);
	[propget] HRESULT logLevelCustom([out, retval] LogLevel_EW915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogLevel_EW915* value);
	HRESULT ToName([in] LogLevel_EW915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogLevel_EW915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(697C6CBE-0CBD-572A-7ECB-8B6FF4C29AF1),
	dual,
	pointer_default(unique)
]
interface ILogLevel_EWI915 : IDispatch
{
	[propget] HRESULT logLevelE([out, retval] LogLevel_EWI915* result);
	[propget] HRESULT logLevelEW([out, retval] LogLevel_EWI915* result);
	[propget] HRESULT logLevelEWI([out, retval] LogLevel_EWI915* result);
	[propget] HRESULT logLevelCustom([out, retval] LogLevel_EWI915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogLevel_EWI915* value);
	HRESULT ToName([in] LogLevel_EWI915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogLevel_EWI915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(D5ACDBB0-B42F-89B7-9980-4DDDD7E21892),
	dual,
	pointer_default(unique)
]
interface ILogLevel_EWIT915 : IDispatch
{
	[propget] HRESULT logLevelE([out, retval] LogLevel_EWIT915* result);
	[propget] HRESULT logLevelEW([out, retval] LogLevel_EWIT915* result);
	[propget] HRESULT logLevelEWI([out, retval] LogLevel_EWIT915* result);
	[propget] HRESULT logLevelEWIT([out, retval] LogLevel_EWIT915* result);
	[propget] HRESULT logLevelCustom([out, retval] LogLevel_EWIT915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogLevel_EWIT915* value);
	HRESULT ToName([in] LogLevel_EWIT915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogLevel_EWIT915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(393F8F03-F1DB-3DF2-DCFF-2AA9C2E86B5B),
	dual,
	pointer_default(unique)
]
interface ILogLevel_EWITD915 : IDispatch
{
	[propget] HRESULT logLevelE([out, retval] LogLevel_EWITD915* result);
	[propget] HRESULT logLevelEW([out, retval] LogLevel_EWITD915* result);
	[propget] HRESULT logLevelEWI([out, retval] LogLevel_EWITD915* result);
	[propget] HRESULT logLevelEWIT([out, retval] LogLevel_EWITD915* result);
	[propget] HRESULT logLevelEWITD([out, retval] LogLevel_EWITD915* result);
	[propget] HRESULT logLevelCustom([out, retval] LogLevel_EWITD915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogLevel_EWITD915* value);
	HRESULT ToName([in] LogLevel_EWITD915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogLevel_EWITD915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(9CDE829B-E75C-9725-92B7-862474CBA947),
	dual,
	pointer_default(unique)
]
interface ILogonType915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] LogonType915* result);
	[propget] HRESULT interactive([out, retval] LogonType915* result);
	[propget] HRESULT network([out, retval] LogonType915* result);
	[propget] HRESULT batch([out, retval] LogonType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LogonType915* value);
	HRESULT ToName([in] LogonType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LogonType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(F7890233-EA76-7362-D44D-EA3DFCA03253),
	dual,
	pointer_default(unique)
]
interface ILookupDirection915 : IDispatch
{
	[propget] HRESULT forward([out, retval] LookupDirection915* result);
	[propget] HRESULT reverse([out, retval] LookupDirection915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] LookupDirection915* value);
	HRESULT ToName([in] LookupDirection915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] LookupDirection915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(9E14D1F8-D042-FBD7-B199-DF56B7FCE9E9),
	dual,
	pointer_default(unique)
]
interface INoFlowControl915 : IDispatch
{
	[propget] HRESULT disabled([out, retval] NoFlowControl915* result);
	[propget] HRESULT supported([out, retval] NoFlowControl915* result);
	[propget] HRESULT preferred([out, retval] NoFlowControl915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] NoFlowControl915* value);
	HRESULT ToName([in] NoFlowControl915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] NoFlowControl915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(6C68329C-233D-26EF-2595-B0FF4E357630),
	dual,
	pointer_default(unique)
]
interface IOmitDefaults915 : IDispatch
{
	[propget] HRESULT yes([out, retval] OmitDefaults915* result);
	[propget] HRESULT no([out, retval] OmitDefaults915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OmitDefaults915* value);
	HRESULT ToName([in] OmitDefaults915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OmitDefaults915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(2F5F4728-FBD3-FC09-BA21-D55393A3D711),
	dual,
	pointer_default(unique)
]
interface IOnAccountInfoFailure915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] OnAccountInfoFailure915* result);
	[propget] HRESULT denyLogin([out, retval] OnAccountInfoFailure915* result);
	[propget] HRESULT restrictAccess([out, retval] OnAccountInfoFailure915* result);
	[propget] HRESULT disableProfile([out, retval] OnAccountInfoFailure915* result);
	[propget] HRESULT noRestrict([out, retval] OnAccountInfoFailure915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnAccountInfoFailure915* value);
	HRESULT ToName([in] OnAccountInfoFailure915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnAccountInfoFailure915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(E9A07AB5-7CA7-25A9-90A4-AE40AD1A7D7B),
	dual,
	pointer_default(unique)
]
interface IOnDestinationExist915 : IDispatch
{
	[propget] HRESULT replace([out, retval] OnDestinationExist915* result);
	[propget] HRESULT appendSuffix([out, retval] OnDestinationExist915* result);
	[propget] HRESULT abort([out, retval] OnDestinationExist915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnDestinationExist915* value);
	HRESULT ToName([in] OnDestinationExist915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnDestinationExist915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(29C52AF0-FF4F-810E-8D2A-C3A47028CC24),
	dual,
	pointer_default(unique)
]
interface IOnDnsResolvingError915 : IDispatch
{
	[propget] HRESULT next([out, retval] OnDnsResolvingError915* result);
	[propget] HRESULT deny([out, retval] OnDnsResolvingError915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnDnsResolvingError915* value);
	HRESULT ToName([in] OnDnsResolvingError915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnDnsResolvingError915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(D36A67BB-6E7F-843E-D28B-D627BB1F21CA),
	dual,
	pointer_default(unique)
]
interface IOnLogFileError915 : IDispatch
{
	[propget] HRESULT continue([out, retval] OnLogFileError915* result);
	[propget] HRESULT adminOnly([out, retval] OnLogFileError915* result);
	[propget] HRESULT stopServer([out, retval] OnLogFileError915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnLogFileError915* value);
	HRESULT ToName([in] OnLogFileError915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnLogFileError915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B6C7F1C8-77B5-B7CF-F867-2C85ED540E49),
	dual,
	pointer_default(unique)
]
interface IOnMoveCompletedUploadFailure915 : IDispatch
{
	[propget] HRESULT runOnUploadCmd([out, retval] OnMoveCompletedUploadFailure915* result);
	[propget] HRESULT doNotRunOnUploadCmd([out, retval] OnMoveCompletedUploadFailure915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnMoveCompletedUploadFailure915* value);
	HRESULT ToName([in] OnMoveCompletedUploadFailure915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnMoveCompletedUploadFailure915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(AF39A58A-22F5-9BE5-9AE9-CD85D23A2B45),
	dual,
	pointer_default(unique)
]
interface IOnRememberedSharesListFailure915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] OnRememberedSharesListFailure915* result);
	[propget] HRESULT continue([out, retval] OnRememberedSharesListFailure915* result);
	[propget] HRESULT disconnect([out, retval] OnRememberedSharesListFailure915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnRememberedSharesListFailure915* value);
	HRESULT ToName([in] OnRememberedSharesListFailure915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnRememberedSharesListFailure915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(287C0592-2064-163B-CD5E-4168BE88643D),
	dual,
	pointer_default(unique)
]
interface IOnShareConnectFailure915 : IDispatch
{
	[propget] HRESULT continue([out, retval] OnShareConnectFailure915* result);
	[propget] HRESULT disconnect([out, retval] OnShareConnectFailure915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnShareConnectFailure915* value);
	HRESULT ToName([in] OnShareConnectFailure915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnShareConnectFailure915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(0421BCBA-2B21-257F-8819-DEB42A60A8CC),
	dual,
	pointer_default(unique)
]
interface IOnStatsQuotaReached915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] OnStatsQuotaReached915* result);
	[propget] HRESULT none([out, retval] OnStatsQuotaReached915* result);
	[propget] HRESULT dropConnection([out, retval] OnStatsQuotaReached915* result);
	[propget] HRESULT limitBandwidthMbps([out, retval] OnStatsQuotaReached915* result);
	[propget] HRESULT limitBandwidthKbps([out, retval] OnStatsQuotaReached915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OnStatsQuotaReached915* value);
	HRESULT ToName([in] OnStatsQuotaReached915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OnStatsQuotaReached915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(0FC003CF-0C4A-6985-F6AD-BEF4AC718BAA),
	dual,
	pointer_default(unique)
]
interface IOverrideListeningInterface915 : IDispatch
{
	[propget] HRESULT never([out, retval] OverrideListeningInterface915* result);
	[propget] HRESULT always([out, retval] OverrideListeningInterface915* result);
	[propget] HRESULT ifBindFails([out, retval] OverrideListeningInterface915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] OverrideListeningInterface915* value);
	HRESULT ToName([in] OverrideListeningInterface915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] OverrideListeningInterface915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B5213050-4F5F-524E-24A3-14A5A57192EE),
	dual,
	pointer_default(unique)
]
interface IPermitMoveExist915 : IDispatch
{
	[propget] HRESULT useGeneralPerms([out, retval] PermitMoveExist915* result);
	[propget] HRESULT withinSameDir([out, retval] PermitMoveExist915* result);
	[propget] HRESULT withinMountPoint([out, retval] PermitMoveExist915* result);
	[propget] HRESULT accrossMountPoints([out, retval] PermitMoveExist915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] PermitMoveExist915* value);
	HRESULT ToName([in] PermitMoveExist915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] PermitMoveExist915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B2831F3E-E0F5-87A7-965C-62F3F7FFC9B7),
	dual,
	pointer_default(unique)
]
interface IPopupMode915 : IDispatch
{
	[propget] HRESULT never([out, retval] PopupMode915* result);
	[propget] HRESULT whenMinimized([out, retval] PopupMode915* result);
	[propget] HRESULT whenInvisible([out, retval] PopupMode915* result);
	[propget] HRESULT always([out, retval] PopupMode915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] PopupMode915* value);
	HRESULT ToName([in] PopupMode915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] PopupMode915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B77A5D51-8DA3-DE8B-9A12-9F8EAE2611A3),
	dual,
	pointer_default(unique)
]
interface IPriorityClass915 : IDispatch
{
	[propget] HRESULT belowNormal([out, retval] PriorityClass915* result);
	[propget] HRESULT normal([out, retval] PriorityClass915* result);
	[propget] HRESULT aboveNormal([out, retval] PriorityClass915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] PriorityClass915* value);
	HRESULT ToName([in] PriorityClass915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] PriorityClass915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(A0536499-614F-2FE2-4616-0974D70B57A4),
	dual,
	pointer_default(unique)
]
interface IProxyProtocol915 : IDispatch
{
	[propget] HRESULT disabled([out, retval] ProxyProtocol915* result);
	[propget] HRESULT required([out, retval] ProxyProtocol915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ProxyProtocol915* value);
	HRESULT ToName([in] ProxyProtocol915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ProxyProtocol915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(DAF8CF54-EDA1-DE5E-D233-C2925C5A0DF4),
	dual,
	pointer_default(unique)
]
interface IProxyType915 : IDispatch
{
	[propget] HRESULT none([out, retval] ProxyType915* result);
	[propget] HRESULT socks4([out, retval] ProxyType915* result);
	[propget] HRESULT socks5([out, retval] ProxyType915* result);
	[propget] HRESULT http([out, retval] ProxyType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ProxyType915* value);
	HRESULT ToName([in] ProxyType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ProxyType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(134AB8D9-944C-2D8E-B460-084B4BDD7183),
	dual,
	pointer_default(unique)
]
interface IPublicKeyFormat915 : IDispatch
{
	[propget] HRESULT ssh2([out, retval] PublicKeyFormat915* result);
	[propget] HRESULT openSsh([out, retval] PublicKeyFormat915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] PublicKeyFormat915* value);
	HRESULT ToName([in] PublicKeyFormat915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] PublicKeyFormat915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(A0630D46-5FE4-000F-E1FC-CF60FC1B30C8),
	dual,
	pointer_default(unique)
]
interface IPwCacheAutoSave915 : IDispatch
{
	[propget] HRESULT never([out, retval] PwCacheAutoSave915* result);
	[propget] HRESULT pkAccounts([out, retval] PwCacheAutoSave915* result);
	[propget] HRESULT allAccounts([out, retval] PwCacheAutoSave915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] PwCacheAutoSave915* value);
	HRESULT ToName([in] PwCacheAutoSave915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] PwCacheAutoSave915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(15B8AB8B-770C-7299-280E-C8CE36397BC3),
	dual,
	pointer_default(unique)
]
interface IRemoteAdminAccessType915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] RemoteAdminAccessType915* result);
	[propget] HRESULT full([out, retval] RemoteAdminAccessType915* result);
	[propget] HRESULT delegated([out, retval] RemoteAdminAccessType915* result);
	[propget] HRESULT no([out, retval] RemoteAdminAccessType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] RemoteAdminAccessType915* value);
	HRESULT ToName([in] RemoteAdminAccessType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] RemoteAdminAccessType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(132CEDA2-E102-DC11-5F02-C932DD45702E),
	dual,
	pointer_default(unique)
]
interface ISendBannerMessage915 : IDispatch
{
	[propget] HRESULT no([out, retval] SendBannerMessage915* result);
	[propget] HRESULT useText([out, retval] SendBannerMessage915* result);
	[propget] HRESULT useFile([out, retval] SendBannerMessage915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] SendBannerMessage915* value);
	HRESULT ToName([in] SendBannerMessage915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] SendBannerMessage915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(F822DDC5-229D-66A8-A67A-B76EBD543E48),
	dual,
	pointer_default(unique)
]
interface IServiceType915 : IDispatch
{
	[propget] HRESULT ssh([out, retval] ServiceType915* result);
	[propget] HRESULT ftp([out, retval] ServiceType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ServiceType915* value);
	HRESULT ToName([in] ServiceType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ServiceType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(6A80E45D-7945-28B9-624B-594244D3C1DE),
	dual,
	pointer_default(unique)
]
interface ISfsMountType915 : IDispatch
{
	[propget] HRESULT unlimited([out, retval] SfsMountType915* result);
	[propget] HRESULT directory([out, retval] SfsMountType915* result);
	[propget] HRESULT encrypted([out, retval] SfsMountType915* result);
	[propget] HRESULT sftp([out, retval] SfsMountType915* result);
	[propget] HRESULT hidden([out, retval] SfsMountType915* result);
	[propget] HRESULT custom([out, retval] SfsMountType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] SfsMountType915* value);
	HRESULT ToName([in] SfsMountType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] SfsMountType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(1DEEA0F6-6513-F2D5-4189-657AB1B0A664),
	dual,
	pointer_default(unique)
]
interface ISfsProviderAcl915 : IDispatch
{
	[propget] HRESULT disable([out, retval] SfsProviderAcl915* result);
	[propget] HRESULT unknownToDefault([out, retval] SfsProviderAcl915* result);
	[propget] HRESULT unknownToError([out, retval] SfsProviderAcl915* result);
	[propget] HRESULT unknownToIgnore([out, retval] SfsProviderAcl915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] SfsProviderAcl915* value);
	HRESULT ToName([in] SfsProviderAcl915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] SfsProviderAcl915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(D625710C-CE36-6DF2-17E5-BA9F3D4F43AB),
	dual,
	pointer_default(unique)
]
interface ISfsProviderOwnerGroup915 : IDispatch
{
	[propget] HRESULT disable([out, retval] SfsProviderOwnerGroup915* result);
	[propget] HRESULT unknownToDefault([out, retval] SfsProviderOwnerGroup915* result);
	[propget] HRESULT unknownToError([out, retval] SfsProviderOwnerGroup915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] SfsProviderOwnerGroup915* value);
	HRESULT ToName([in] SfsProviderOwnerGroup915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] SfsProviderOwnerGroup915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(E5F15625-6556-195C-DAFE-A50F51C3FBAB),
	dual,
	pointer_default(unique)
]
interface IShellAccess915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] ShellAccess915* result);
	[propget] HRESULT disabled([out, retval] ShellAccess915* result);
	[propget] HRESULT bvshell([out, retval] ShellAccess915* result);
	[propget] HRESULT cmdPrompt([out, retval] ShellAccess915* result);
	[propget] HRESULT powershell([out, retval] ShellAccess915* result);
	[propget] HRESULT bash([out, retval] ShellAccess915* result);
	[propget] HRESULT gitonly([out, retval] ShellAccess915* result);
	[propget] HRESULT telnetSrv([out, retval] ShellAccess915* result);
	[propget] HRESULT custom([out, retval] ShellAccess915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ShellAccess915* value);
	HRESULT ToName([in] ShellAccess915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ShellAccess915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7AA4A163-95D7-F68E-AC6E-E0AED654AF26),
	dual,
	pointer_default(unique)
]
interface IShowDefaults915 : IDispatch
{
	[propget] HRESULT no([out, retval] ShowDefaults915* result);
	[propget] HRESULT yes([out, retval] ShowDefaults915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] ShowDefaults915* value);
	HRESULT ToName([in] ShowDefaults915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] ShowDefaults915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(757BACC2-F025-76D7-7FB7-D57CD3D9F474),
	dual,
	pointer_default(unique)
]
interface ISmtpAuthType915 : IDispatch
{
	[propget] HRESULT none([out, retval] SmtpAuthType915* result);
	[propget] HRESULT useSuitable([out, retval] SmtpAuthType915* result);
	[propget] HRESULT authPlain([out, retval] SmtpAuthType915* result);
	[propget] HRESULT authCramMd5([out, retval] SmtpAuthType915* result);
	[propget] HRESULT authLogin([out, retval] SmtpAuthType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] SmtpAuthType915* value);
	HRESULT ToName([in] SmtpAuthType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] SmtpAuthType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(4FF98B1D-9B03-4D11-1FA0-F718EBC56DC0),
	dual,
	pointer_default(unique)
]
interface ITaskElevation915 : IDispatch
{
	[propget] HRESULT yesIfPossible([out, retval] TaskElevation915* result);
	[propget] HRESULT require([out, retval] TaskElevation915* result);
	[propget] HRESULT noIfPossible([out, retval] TaskElevation915* result);
	[propget] HRESULT ifPossible([out, retval] TaskElevation915* result);
	[propget] HRESULT no([out, retval] TaskElevation915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskElevation915* value);
	HRESULT ToName([in] TaskElevation915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskElevation915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B8A635E7-1838-FFA4-6C1C-B479430FF1ED),
	dual,
	pointer_default(unique)
]
interface ITaskOutputCodePage915 : IDispatch
{
	[propget] HRESULT ansi([out, retval] TaskOutputCodePage915* result);
	[propget] HRESULT utf8([out, retval] TaskOutputCodePage915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskOutputCodePage915* value);
	HRESULT ToName([in] TaskOutputCodePage915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskOutputCodePage915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(17B119B3-AFDD-5865-81C3-ADFDFBB40AC2),
	dual,
	pointer_default(unique)
]
interface ITaskSecurityContext915 : IDispatch
{
	[propget] HRESULT localAccount([out, retval] TaskSecurityContext915* result);
	[propget] HRESULT domainAccount([out, retval] TaskSecurityContext915* result);
	[propget] HRESULT microsoftAccount([out, retval] TaskSecurityContext915* result);
	[propget] HRESULT bssContext([out, retval] TaskSecurityContext915* result);
	[propget] HRESULT localService([out, retval] TaskSecurityContext915* result);
	[propget] HRESULT networkService([out, retval] TaskSecurityContext915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskSecurityContext915* value);
	HRESULT ToName([in] TaskSecurityContext915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskSecurityContext915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(E157A3E3-321D-C09A-E7E5-4436CF21A37D),
	dual,
	pointer_default(unique)
]
interface ITaskShutdownPolicy915 : IDispatch
{
	[propget] HRESULT stop([out, retval] TaskShutdownPolicy915* result);
	[propget] HRESULT continue([out, retval] TaskShutdownPolicy915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskShutdownPolicy915* value);
	HRESULT ToName([in] TaskShutdownPolicy915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskShutdownPolicy915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(6704D0A1-2F91-D9CC-6C0D-389D2E6A4697),
	dual,
	pointer_default(unique)
]
interface ITaskTriggerEvent915 : IDispatch
{
	[propget] HRESULT I_AUTH_KEYS_SYNC_SETTINGS_APPLIED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_CONNECT_ACCEPTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_CONNECT_CANCELED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_CONNECT_DISCONNECTED_ABNORMALLY([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_CONNECT_DISCONNECTED_NORMALLY([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_CONNECT_REJECTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_EXECS_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGOFF_CONN_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGOFF_WIN_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_AUTH_CANNOT_COMPLETE([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_AUTH_COMPLETED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_AUTH_REJECTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_AUTH_VIRT_PASSWORD_CHANGED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_AUTH_WIN_PASSWORD_CHANGED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_CONN_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_LOGON_WIN_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_SCP_SERVER_COMMAND_STARTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_SERVICE_CONFIG_DESCRIPTION([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_SFS_TRANSFER_FILE([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_SSH_KEY_EXCHANGE_MISMATCH([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_TOTERMS_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_UPDATE_MANAGER_INSTALL_LAUNCHED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT I_UPLOAD_COMMAND_EXECUTED([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT W_SYSTEM_MONITOR_HIGH_CPU_USAGE([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT W_SYSTEM_MONITOR_HIGH_MEMORY_USAGE([out, retval] TaskTriggerEvent915* result);
	[propget] HRESULT W_SYSTEM_MONITOR_LOW_DISK_SPACE([out, retval] TaskTriggerEvent915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskTriggerEvent915* value);
	HRESULT ToName([in] TaskTriggerEvent915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskTriggerEvent915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(933C9A05-9998-C356-AF1B-AE18E6722C1D),
	dual,
	pointer_default(unique)
]
interface ITaskTriggerPeriod915 : IDispatch
{
	[propget] HRESULT daily([out, retval] TaskTriggerPeriod915* result);
	[propget] HRESULT weekly([out, retval] TaskTriggerPeriod915* result);
	[propget] HRESULT monthly([out, retval] TaskTriggerPeriod915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskTriggerPeriod915* value);
	HRESULT ToName([in] TaskTriggerPeriod915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskTriggerPeriod915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(262A420B-6292-A80D-27BD-6983150945D5),
	dual,
	pointer_default(unique)
]
interface ITaskTriggerType915 : IDispatch
{
	[propget] HRESULT time([out, retval] TaskTriggerType915* result);
	[propget] HRESULT logEvent([out, retval] TaskTriggerType915* result);
	[propget] HRESULT logEventList([out, retval] TaskTriggerType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskTriggerType915* value);
	HRESULT ToName([in] TaskTriggerType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskTriggerType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(4C7A84F5-85AC-BCCC-17A8-CF44BF93C354),
	dual,
	pointer_default(unique)
]
interface ITaskType915 : IDispatch
{
	[propget] HRESULT logMaintenance([out, retval] TaskType915* result);
	[propget] HRESULT execCommand([out, retval] TaskType915* result);
	[propget] HRESULT emailNotification([out, retval] TaskType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TaskType915* value);
	HRESULT ToName([in] TaskType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TaskType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(5D726029-AD4B-A48B-24D4-254F16C6595D),
	dual,
	pointer_default(unique)
]
interface ITerminalCodePage915 : IDispatch
{
	[propget] HRESULT utf8([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88591([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88592([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88593([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88594([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88595([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88596([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88597([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88598([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso88599([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885910([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885911([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885913([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885914([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885915([out, retval] TerminalCodePage915* result);
	[propget] HRESULT iso885916([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1250([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1251([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1252([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1253([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1254([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1255([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1256([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1257([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi1258([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi874([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi932([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi936([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi949([out, retval] TerminalCodePage915* result);
	[propget] HRESULT ansi950([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem437([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem720([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem737([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem775([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem850([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem852([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem855([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem857([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem858([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem860([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem861([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem862([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem863([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem864([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem865([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem866([out, retval] TerminalCodePage915* result);
	[propget] HRESULT oem869([out, retval] TerminalCodePage915* result);
	[propget] HRESULT koi8r([out, retval] TerminalCodePage915* result);
	[propget] HRESULT koi8u([out, retval] TerminalCodePage915* result);
	[propget] HRESULT johab([out, retval] TerminalCodePage915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TerminalCodePage915* value);
	HRESULT ToName([in] TerminalCodePage915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TerminalCodePage915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B7EE8E22-1619-5DA6-986F-40EEAB6BAC38),
	dual,
	pointer_default(unique)
]
interface ITlsAssuranceDirect915 : IDispatch
{
	[propget] HRESULT noTls([out, retval] TlsAssuranceDirect915* result);
	[propget] HRESULT tlsNoHostAuth([out, retval] TlsAssuranceDirect915* result);
	[propget] HRESULT tlsAnyServer([out, retval] TlsAssuranceDirect915* result);
	[propget] HRESULT tlsDomainMatch([out, retval] TlsAssuranceDirect915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TlsAssuranceDirect915* value);
	HRESULT ToName([in] TlsAssuranceDirect915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TlsAssuranceDirect915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(4574FB5B-ECCF-1331-9699-7D1DEEEF865A),
	dual,
	pointer_default(unique)
]
interface ITlsAssuranceRelay915 : IDispatch
{
	[propget] HRESULT noTls([out, retval] TlsAssuranceRelay915* result);
	[propget] HRESULT tlsNoHostAuth([out, retval] TlsAssuranceRelay915* result);
	[propget] HRESULT tlsAnyServer([out, retval] TlsAssuranceRelay915* result);
	[propget] HRESULT tlsDomainMatch([out, retval] TlsAssuranceRelay915* result);
	[propget] HRESULT tlsExactMatch([out, retval] TlsAssuranceRelay915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] TlsAssuranceRelay915* value);
	HRESULT ToName([in] TlsAssuranceRelay915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] TlsAssuranceRelay915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(74496FCD-D438-C3E8-7A9F-D5AA1574FD86),
	dual,
	pointer_default(unique)
]
interface IUpdateDownloadMethod915 : IDispatch
{
	[propget] HRESULT downloadFromMaster([out, retval] UpdateDownloadMethod915* result);
	[propget] HRESULT downloadFromUrl([out, retval] UpdateDownloadMethod915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] UpdateDownloadMethod915* value);
	HRESULT ToName([in] UpdateDownloadMethod915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] UpdateDownloadMethod915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(B833E5CC-EC13-E792-37E0-442C916DCFA4),
	dual,
	pointer_default(unique)
]
interface IUserAuthType915 : IDispatch
{
	[propget] HRESULT none([out, retval] UserAuthType915* result);
	[propget] HRESULT password([out, retval] UserAuthType915* result);
	[propget] HRESULT passwordOverKbdi([out, retval] UserAuthType915* result);
	[propget] HRESULT publicKey([out, retval] UserAuthType915* result);
	[propget] HRESULT gssApiWithMic([out, retval] UserAuthType915* result);
	[propget] HRESULT gssApiKeyEx([out, retval] UserAuthType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] UserAuthType915* value);
	HRESULT ToName([in] UserAuthType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] UserAuthType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(05BAA133-8CFB-4DC8-1067-53C179192505),
	dual,
	pointer_default(unique)
]
interface IVirtAcctSecurityContext915 : IDispatch
{
	[propget] HRESULT defaultValue([out, retval] VirtAcctSecurityContext915* result);
	[propget] HRESULT autoAccount([out, retval] VirtAcctSecurityContext915* result);
	[propget] HRESULT localAccount([out, retval] VirtAcctSecurityContext915* result);
	[propget] HRESULT domainAccount([out, retval] VirtAcctSecurityContext915* result);
	[propget] HRESULT microsoftAccount([out, retval] VirtAcctSecurityContext915* result);
	[propget] HRESULT service([out, retval] VirtAcctSecurityContext915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] VirtAcctSecurityContext915* value);
	HRESULT ToName([in] VirtAcctSecurityContext915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] VirtAcctSecurityContext915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(26329C22-23C5-9A16-5B1D-814B7906856F),
	dual,
	pointer_default(unique)
]
interface IWhitelistAddressType915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] WhitelistAddressType915* result);
	[propget] HRESULT ipv6([out, retval] WhitelistAddressType915* result);
	[propget] HRESULT location([out, retval] WhitelistAddressType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] WhitelistAddressType915* value);
	HRESULT ToName([in] WhitelistAddressType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] WhitelistAddressType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(2A0C2B3A-65BD-72B3-6059-A038720C3419),
	dual,
	pointer_default(unique)
]
interface IWinAccountType915 : IDispatch
{
	[propget] HRESULT localAccount([out, retval] WinAccountType915* result);
	[propget] HRESULT domainAccount([out, retval] WinAccountType915* result);
	[propget] HRESULT microsoftAccount([out, retval] WinAccountType915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] WinAccountType915* value);
	HRESULT ToName([in] WinAccountType915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] WinAccountType915 value, [out, retval] BSTR* friendlyName);
};

[
	object,
	uuid(7A9431DC-614D-CE61-B966-A0DFE26F9ACF),
	dual,
	pointer_default(unique)
]
interface IWindowsFirewallSetting915 : IDispatch
{
	[propget] HRESULT dontChange([out, retval] WindowsFirewallSetting915* result);
	[propget] HRESULT subnetScope([out, retval] WindowsFirewallSetting915* result);
	[propget] HRESULT subnetScopeAllProfiles([out, retval] WindowsFirewallSetting915* result);
	[propget] HRESULT globalScope([out, retval] WindowsFirewallSetting915* result);
	HRESULT ToValue([in] BSTR name, [out, retval] WindowsFirewallSetting915* value);
	HRESULT ToName([in] WindowsFirewallSetting915 value, [out, retval] BSTR* name);
	HRESULT ToFriendlyName([in] WindowsFirewallSetting915 value, [out, retval] BSTR* friendlyName);
};


[
	object,
	uuid(7200D8A5-A59A-5A19-27F4-D77E47FFABD0),
	dual,
	pointer_default(unique)
]
interface IImportCsvResult915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT success([out, retval] BOOL* result);
	[propget] HRESULT failure([out, retval] BOOL* result);
	[propget] HRESULT added([out, retval] ULONG* result);
	[propget] HRESULT processed([out, retval] ULONG* result);
	[propget] HRESULT ignored([out, retval] ULONG* result);
	HRESULT Describe([out, retval] BSTR* result);
};

[
	object,
	uuid(C746E07D-3AEC-46B6-B90E-1B3A56109BCC),
	dual,
	pointer_default(unique)
]
interface ILoadResult915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT success([out, retval] BOOL* result);
	[propget] HRESULT failure([out, retval] BOOL* result);
	[propget] HRESULT loadResult([out, retval] BOOL* result);
	[propget] HRESULT loadError([out, retval] BSTR* result);
	[propget] HRESULT validationResult([out, retval] BOOL* result);
	[propget] HRESULT validationError([out, retval] BSTR* result);
	[propget] HRESULT secretFailures([out, retval] ULONG* result);
	[propget] HRESULT secretSuccess([out, retval] ULONG* result);
	HRESULT Describe([out, retval] BSTR* result);
};

[
	object,
	uuid(9BE04EFF-0602-BFF5-D91F-C8A408E11E57),
	dual,
	pointer_default(unique)
]
interface IBssCfg915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT helpExpr([out, retval] BSTR* result);

	HRESULT SetInstance([in] BSTR instanceName);
	HRESULT CleanUpOnProcessExit([in] ULONG pid);
	HRESULT SignalServerCfgChanged();

	HRESULT LoadText([in] BSTR fileName, [out, retval] BSTR* text);
	HRESULT LoadTextUnicode([in] BSTR fileName, [out, retval] BSTR* text);
	HRESULT LoadTextCP([in] BSTR fileName, [in] UINT codePage, [out, retval] BSTR* text);
	HRESULT SaveText([in] BSTR text, [in] BSTR fileName);
	HRESULT SaveTextUnicode([in] BSTR text, [in] BSTR fileName);
	HRESULT SaveTextCP([in] BSTR text, [in] BSTR fileName, [in] UINT codePage);

	[propget] HRESULT version([out, retval] IVersion915** version);
	[propget] HRESULT actState([out, retval] IActState915** actState);
	[propget] HRESULT instances([out, retval] IInstances915** instances);
	[propget] HRESULT pwdCache([out, retval] IPasswordCache915** pwdCache);
	[propget] HRESULT popupAndTray([out, retval] IPopupAndTray915** popupAndTray);
	[propget] HRESULT certificates([out, retval] ICertificates915** certificates);
	[propget] HRESULT keypairs([out, retval] IHostKeypairs915** keypairs);
	[propget] HRESULT settings([out, retval] ISettings915** result);
	[propget] HRESULT instanceSettings([out, retval] IInstanceTypeSettings915** result);
	[propget] HRESULT enums([out, retval] IEnumerations915** enums);
};

[
	object,
	uuid(9F2F867B-813D-67E0-C28E-96CA404B580A),
	dual,
	pointer_default(unique)
]
interface IVersion915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT buildVersion([out, retval] BSTR* result);
	[propget] HRESULT buildDesc([out, retval] BSTR* result);
	[propget] HRESULT cfgFormatVersion([out, retval] BSTR* result);
	[propget] HRESULT interfaceVersion([out, retval] BSTR* result);
}

[
	object,
	uuid(452DE95F-B151-8E00-04AE-0F431074637C),
	dual,
	pointer_default(unique)
]
interface IActState915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT isEvaluation([out, retval] BOOL* result);
	[propget] HRESULT isExpired([out, retval] BOOL* result);
	[propget] HRESULT daysRemaining([out, retval] ULONG* result);
	[propget] HRESULT licensedTo([out, retval] BSTR* result);
	[propget] HRESULT licenseType([out, retval] LicenseType915* result);
	[propget] HRESULT upgradeExpiry([out, retval] BSTR* result);
	[propget] HRESULT seller([out, retval] BSTR* result);
	[propget] HRESULT orderNr([out, retval] ULONG* result);

	HRESULT Remove();
	HRESULT Reload();
	HRESULT SetActCode([in] BSTR actCodeHex);
}

[
	object,
	uuid(22D4C2EB-CF76-A7C1-4D28-A7E8FD1C7908),
	dual,
	pointer_default(unique)
]
interface IInstance915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT name([out, retval] BSTR* result);
	[propget] HRESULT serviceName([out, retval] BSTR* result);
	[propget] HRESULT managedAccountName([out, retval] BSTR* result);
	[propget] HRESULT installDir([out, retval] BSTR* result);
	[propget] HRESULT version([out, retval] BSTR* result);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propget] HRESULT canManage([out, retval] BOOL* result);
	[propget] HRESULT cfgObjName([out, retval] BSTR* result);
	[propget] HRESULT cfgObjVersion([out, retval] BSTR* result);
	[propget] HRESULT cfgFormatVersion([out, retval] BSTR* result);
}

[
	object,
	uuid(5A0AEF73-CBF2-FD3A-D562-6009838C7DB5),
	dual,
	pointer_default(unique)
]
interface IInstances915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* instances);
	[propget] HRESULT current([out, retval] IInstance915** instance);
	[propget] HRESULT count([out, retval] ULONG* count);
	HRESULT GetItem([in] ULONG index, [out, retval] IInstance915** instance);
}

[
	object,
	uuid(A91F740F-CE48-59E2-0C91-1466042C1BCA),
	dual,
	pointer_default(unique)
]
interface ICertificate915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT employed([out, retval] BOOL* employed);
	[propget] HRESULT index([out, retval] ULONG* index);
	[propget] HRESULT type([out, retval] CertificateType915* type);
	[propget] HRESULT keyBits([out, retval] ULONG* keyBits);
	[propget] HRESULT alg([out, retval] BSTR* alg);
	[propget] HRESULT algId([out, retval] CertAlgId915* algId);
	[propget] HRESULT insertTime([out, retval] BSTR* insertTime);
	[propget] HRESULT comment([out, retval] BSTR* comment);
	[propput] HRESULT comment([in] BSTR comment);
	[propget] HRESULT validFrom([out, retval] BSTR* validFrom);
	[propget] HRESULT validTo([out, retval] BSTR* validTo);
	[propget] HRESULT issuedTo([out, retval] BSTR* issuedTo);
	[propget] HRESULT subjectAltNames([out, retval] BSTR* subjectAltNames);
	[propget] HRESULT issuedBy([out, retval] BSTR* issuedBy);
	[propget] HRESULT serial([out, retval] BSTR* serial);
	[propget] HRESULT sha1([out, retval] BSTR* sha1);
	[propget] HRESULT sha256([out, retval] BSTR* sha256);
	HRESULT ExportPublicKeyToBase64String([in] CertificateFormat915 format, [out, retval] BSTR* pVal);
	HRESULT ExportPublicKeyToFile([in] BSTR fileName, [in] CertificateFormat915 format);
	HRESULT ExportToBase64String([in] CertificateFormat915 format, [in] BSTR pass, [out, retval] BSTR* pVal);
	HRESULT ExportToFile([in] BSTR fileName, [in] CertificateFormat915 format, [in] BSTR pass);
}

[
	object,
	uuid(073DD392-FA61-8C5C-EC57-83359952D5CE),
	dual,
	pointer_default(unique)
]
interface ICertificates915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* certificates);
	[propget] HRESULT count([out, retval] ULONG* count);
	HRESULT GetItem([in] ULONG index, [out, retval] ICertificate915** certificate);
	[propget] HRESULT employed([out, retval] ICertificate915** certificate);
	[propget] HRESULT employedIndex([out, retval] ULONG* index);
	[propget] HRESULT existsEmployed([out, retval] BOOL* exists);
	HRESULT Employ([in] ULONG index);
	HRESULT Dismiss();
	HRESULT Erase([in] ULONG index);
	HRESULT Clear();

	HRESULT Lock();
	HRESULT Unlock();
	[propget] HRESULT locked([out, retval] BOOL* locked);
	HRESULT Load();
	HRESULT Save([in] BOOL autoBackup);
	HRESULT Backup();

	HRESULT GenerateNewRequest([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [out, retval] BSTR* certRequest);
	HRESULT GenerateNewRequestEx([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [out] BSTR* certRequest, [out, retval] ICertificate915** certificate);
	HRESULT GenerateNewRequestWithSize([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] ULONG keySize, [out, retval] BSTR* certRequest);
	HRESULT GenerateNewRequestWithSizeEx([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] ULONG keySize, [out] BSTR* certRequest, [out, retval] ICertificate915** certificate);
	HRESULT GenerateNewSelfSignedCertificate([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] BOOL autoEmploy);
	HRESULT GenerateNewSelfSignedCertificateEx([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] BOOL autoEmploy, [out, retval] ICertificate915** certificate);
	HRESULT GenerateNewSelfSignedCertificateWithSize([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] ULONG keySize, [in] BOOL autoEmploy);
	HRESULT GenerateNewSelfSignedCertificateWithSizeEx([in] BSTR commonName, [in] BSTR subjectAltNames, [in] BSTR countryCode, [in] BSTR state, [in] BSTR locality, [in] BSTR organization, [in] BSTR organizationUnit, [in] ULONG keySize, [in] BOOL autoEmploy, [out, retval] ICertificate915** certificate);

	HRESULT ImportFromFile([in] BSTR fileName, [in] BSTR pass);
	HRESULT ImportFromFileEx([in] BSTR fileName, [in] BSTR pass, [out, retval] SAFEARRAY(VARIANT)* certificates);
	HRESULT ImportFromBase64String([in] BSTR val, [in] BSTR pass);
	HRESULT ImportFromBase64StringEx([in] BSTR val, [in] BSTR pass, [out, retval] SAFEARRAY(VARIANT)* certificates);
	HRESULT ExportToFile([in] BSTR fileName, [in] BSTR pass);
	HRESULT ExportToBase64String([in] BSTR pass, [out, retval] BSTR* pVal);
}

[
	object,
	uuid(75771216-F0D1-9FAC-80DF-83C67DDD17A5),
	dual,
	pointer_default(unique)
]
interface IHostKeypair915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT employed([out, retval] BOOL* employed);
	[propget] HRESULT index([out, retval] ULONG* index);
	[propget] HRESULT keyBits([out, retval] ULONG* keyBits);
	[propget] HRESULT alg([out, retval] BSTR* alg);
	[propget] HRESULT algId([out, retval] KeypairAlgId915* algId);
	[propget] HRESULT insertTime([out, retval] BSTR* insertTime);
	[propget] HRESULT comment([out, retval] BSTR* comment);
	[propput] HRESULT comment([in] BSTR comment);
	[propget] HRESULT md5([out, retval] BSTR* md5);
	[propget] HRESULT sha1([out, retval] BSTR* sha1);
	[propget] HRESULT bubbleBabble([out, retval] BSTR* bubbleBabble);
	[propget] HRESULT sha256([out, retval] BSTR* sha256);

	HRESULT ExportPublicKeyToBase64String([in] PublicKeyFormat915 format, [out, retval] BSTR* pVal);
	HRESULT ExportPublicKeyToFile([in] BSTR fileName, [in] PublicKeyFormat915 format);
	HRESULT ExportToBase64String([in] KeypairFormat915 format, [in] BSTR pass, [out, retval] BSTR* pVal);
	HRESULT ExportToFile([in] BSTR fileName, [in] KeypairFormat915 format, [in] BSTR pass);
}

[
	object,
	uuid(A754DB0F-85BA-949B-905D-9F95A7E743A5),
	dual,
	pointer_default(unique)
]
interface IHostKeypairs915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* keypairs);
	[propget] HRESULT count([out, retval] ULONG* count);
	HRESULT GetItem([in] ULONG index, [out, retval] IHostKeypair915** keypair);
	HRESULT GetEmployed([in] KeypairAlgId915 algId, [out, retval] IHostKeypair915** keypair);
	HRESULT GetEmployedIndex([in] KeypairAlgId915 algId, [out, retval] ULONG* index);
	HRESULT ExistsEmployed([in] KeypairAlgId915 algId, [out, retval] BOOL* exists);
	HRESULT Employ([in] ULONG index);
	HRESULT Dismiss([in] KeypairAlgId915 algId);
	HRESULT Erase([in] ULONG index);
	HRESULT Clear();

	HRESULT Lock();
	HRESULT Unlock();
	[propget] HRESULT locked([out, retval] BOOL* locked);
	HRESULT Load();
	HRESULT Save([in] BOOL autoBackup);
	HRESULT Backup();

	HRESULT GenerateNewKeypair([in] KeypairAlgId915 algId, [in] BOOL autoEmploy);
	HRESULT GenerateNewKeypairEx([in] KeypairAlgId915 algId, [in] BOOL autoEmploy, [out, retval] IHostKeypair915** keypair);
	HRESULT GenerateNewKeypairWithSize([in] KeypairAlgId915 algId, [in] ULONG keySize, [in] BOOL autoEmploy);
	HRESULT GenerateNewKeypairWithSizeEx([in] KeypairAlgId915 algId, [in] ULONG keySize, [in] BOOL autoEmploy, [out, retval] IHostKeypair915** keypair);

	HRESULT ImportFromFile([in] BSTR fileName, [in] BSTR pass);
	HRESULT ImportFromFileEx([in] BSTR fileName, [in] BSTR pass, [out, retval] SAFEARRAY(VARIANT)* keypairs);
	HRESULT ImportFromBase64String([in] BSTR val, [in] BSTR pass);
	HRESULT ImportFromBase64StringEx([in] BSTR val, [in] BSTR pass, [out, retval] SAFEARRAY(VARIANT)* keypairs);
	HRESULT ExportToFile([in] BSTR fileName, [in] BSTR pass);
	HRESULT ExportToBase64String([in] BSTR pass, [out, retval] BSTR* pVal);
}

[
	object,
	uuid(ADD3E191-6485-DD85-92CD-DDFF3B00CC4B),
	dual,
	pointer_default(unique)
]
interface IPasswordCache915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT count([out, retval] ULONG* count);
	HRESULT GetItem([in] ULONG index, [out, retval] BSTR* userName);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT hiddenEntries([out, retval] ULONG* nrHidden);
	HRESULT Erase([in] ULONG index);
	HRESULT EraseByName([in] BSTR userName);
	HRESULT Clear();
	HRESULT Set([in] BSTR userName, [in] BSTR pass, [in] BOOL hideUsername);
	HRESULT Hide([in] BSTR userName);
	HRESULT HideAll();
}

[
	object,
	uuid(172535F1-4627-7D43-5C09-9EAB9B8A7586),
	dual,
	pointer_default(unique)
]
interface IPopupAndTray915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT persistentTrayIcon([out, retval] BOOL* enabled);
	[propput] HRESULT persistentTrayIcon([in] BOOL enabled);
	[propget] HRESULT persistentTrayIconDefault([out, retval] BOOL* enabled);
	[propput] HRESULT persistentTrayIconDefault([in] BOOL enabled);
	[propget] HRESULT popupMode([out, retval] PopupMode915* mode);
	[propput] HRESULT popupMode([in] PopupMode915 mode);
	[propget] HRESULT popupModeDefault([out, retval] PopupMode915* mode);
	[propput] HRESULT popupModeDefault([in] PopupMode915 mode);
	[propget] HRESULT popupEvents([out, retval] BSTR* eventList);
	[propput] HRESULT popupEvents([in] BSTR eventList);
	[propget] HRESULT popupEventsDefault([out, retval] BSTR* eventList);
	[propput] HRESULT popupEventsDefault([in] BSTR eventList);
	[propget] HRESULT popupTimeout([out, retval] UINT* timeout);
	[propput] HRESULT popupTimeout([in] UINT timeout);
	[propget] HRESULT popupTimeoutDefault([out, retval] UINT* timeout);
	[propput] HRESULT popupTimeoutDefault([in] UINT timeout);
	[propget] HRESULT updatePopupMode([out, retval] PopupMode915* mode);
	[propput] HRESULT updatePopupMode([in] PopupMode915 mode);
	[propget] HRESULT updatePopupModeDefault([out, retval] PopupMode915* mode);
	[propput] HRESULT updatePopupModeDefault([in] PopupMode915 mode);
}

[
	object,
	uuid(031D645C-0F18-C3C8-CB76-927AA41CC107),
	dual,
	pointer_default(unique)
]
interface IHostKey915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);

	[propget] HRESULT type([out, retval] HostKeyType915* result);
	[propget] HRESULT keyBits([out, retval] ULONG* keyBits);
	[propget] HRESULT alg([out, retval] BSTR* alg);
	[propget] HRESULT algId([out, retval] KeypairAlgId915* algId);
	[propget] HRESULT host([out, retval] BSTR* host);
	[propget] HRESULT port([out, retval] ULONG* port);
	[propget] HRESULT insertTime([out, retval] BSTR* insertTime);
	[propget] HRESULT comment([out, retval] BSTR* comment);
	[propput] HRESULT comment([in] BSTR comment);
	[propget] HRESULT md5([out, retval] BSTR* md5);
	[propget] HRESULT bubbleBabble([out, retval] BSTR* bubbleBabble);
	[propget] HRESULT sha256([out, retval] BSTR* sha256);
	[propget] HRESULT hex([out, retval] BSTR* hex);
	[propget] HRESULT info([out, retval] BSTR* info);

	HRESULT ExportToFile([in] BSTR fileName, [in] PublicKeyFormat915 format);
	HRESULT ExportToBase64String([in] PublicKeyFormat915 format, [out, retval] BSTR* pVal);

	HRESULT Matches([in] BSTR criterion, [out, retval] BOOL* matches);
}

[
	object,
	uuid(19F77EC4-A24B-C8D4-F839-545229AFA16E),
	dual,
	pointer_default(unique)
]
interface IHostKeys915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* hostKeys);
	[propget] HRESULT count([out, retval] ULONG* result);
	HRESULT GetItem([in] ULONG index, [out, retval] IHostKey915** hostKey);
	HRESULT Erase([in] ULONG index);
	HRESULT FindAndErase([in] BSTR searchString, [out, retval] ULONG* nrErased);
	HRESULT Clear();
	HRESULT Add([in] BSTR hexKey);
	HRESULT AddFingerprint([in] BSTR fingerprint);
	HRESULT ImportFromFile([in] BSTR fileName);
	HRESULT ImportFromBase64String([in] BSTR val);
}

[
	object,
	uuid(2A3DF8F6-5620-1FC4-40A8-41A38F1DB2B4),
	dual,
	pointer_default(unique)
]
interface IClientKey915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);

	[propget] HRESULT supported([out, retval] BOOL* supported);
	[propget] HRESULT keyBits([out, retval] ULONG* keyBits);
	[propget] HRESULT alg([out, retval] BSTR* alg);
	[propget] HRESULT algId([out, retval] KeypairAlgId915* algId);
	[propget] HRESULT insertTime([out, retval] BSTR* insertTime);
	[propget] HRESULT comment([out, retval] BSTR* comment);
	[propput] HRESULT comment([in] BSTR comment);
	[propget] HRESULT md5([out, retval] BSTR* md5);
	[propget] HRESULT bubbleBabble([out, retval] BSTR* bubbleBabble);
	[propget] HRESULT sha256([out, retval] BSTR* sha256);
	[propget] HRESULT hex([out, retval] BSTR* hex);
	[propget] HRESULT info([out, retval] BSTR* info);

	HRESULT ExportToFile([in] BSTR fileName, [in] PublicKeyFormat915 format);
	HRESULT ExportToBase64String([in] PublicKeyFormat915 format, [out, retval] BSTR* pVal);

	HRESULT Matches([in] BSTR criterion, [out, retval] BOOL* matches);
}

[
	object,
	uuid(A1F11579-1F4B-3796-6FF5-E7C81FB17F20),
	dual,
	pointer_default(unique)
]
interface IClientKeys915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* clientKeys);
	[propget] HRESULT count([out, retval] ULONG* result);
	HRESULT GetItem([in] ULONG index, [out, retval] IClientKey915** clientKey);
	HRESULT Erase([in] ULONG index);
	HRESULT FindAndErase([in] BSTR searchString, [out, retval] ULONG* nrErased);
	HRESULT Clear();
	HRESULT Add([in] BSTR hexKey);
	HRESULT ImportFromFile([in] BSTR fileName);
	HRESULT ImportFromBase64String([in] BSTR data);
}

[
	object,
	uuid(DB1B21E4-7A55-E987-D9AE-4F43260A1961),
	dual,
	pointer_default(unique)
]
interface IEvent915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);

	[propget] HRESULT type([out, retval] EventType915* type);
	[propget] HRESULT name([out, retval] BSTR* name);
	[propget] HRESULT description([out, retval] BSTR* description);
	[propget] HRESULT number([out, retval] UINT* number);
	[propget] HRESULT value([out, retval] BOOL* value);
	[propput] HRESULT value([in] BOOL value);
}

[
	object,
	uuid(DBB86DC0-CE80-FB1B-7DF8-FD332E3C5E52),
	dual,
	pointer_default(unique)
]
interface IEventList915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* events);
	[propget] HRESULT count([out, retval] UINT* result);
	HRESULT GetItem([in] UINT index, [out, retval] IEvent915** event);
	HRESULT GetItemByName([in] BSTR eventName, [out, retval] IEvent915** event);

	[propget] HRESULT list([out, retval] BSTR* result);
	[propput] HRESULT list([in] BSTR value);
	[propput] HRESULT logLevel([in] LogLevel_EWITD915 value);
	HRESULT GetEvents([in] EventType915 type, [out, retval] SAFEARRAY(VARIANT)* events);
	HRESULT SetAll([in] EventType915 type, [in] BOOL value);
}

[
	object,
	uuid(CAE0A33D-134E-4000-40D1-A020D7E122A4),
	dual,
	pointer_default(unique)
]
interface IPassword915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	[propget] HRESULT crypt([out, retval] BSTR* hexResult);
	[propput] HRESULT crypt([in] BSTR hexValue);
	HRESULT Set([in] BSTR plainText);
	[propget] HRESULT isSet([out, retval] BOOL* isSet);
	[propget] HRESULT pwdSetTime([out, retval] LONG64* pwdSetTime);
}

[
	object,
	uuid(C57B30D9-A358-FB10-1AB0-91B681BA949A),
	dual,
	pointer_default(unique)
]
interface ISecretKey915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	[propget] HRESULT crypt([out, retval] BSTR* hexResult);
	[propput] HRESULT crypt([in] BSTR hexValue);
	[propget] HRESULT base32([out, retval] BSTR* base32Result);
	[propput] HRESULT base32([in] BSTR base32Value);
	[propget] HRESULT isSet([out, retval] BOOL* isSet);
	[propget] HRESULT issuer([out, retval] BSTR* issuer);
	[propput] HRESULT issuer([in] BSTR issuer);
	[propget] HRESULT issuedTo([out, retval] BSTR* issuedTo);
	[propput] HRESULT issuedTo([in] BSTR issuedTo);
	HRESULT GenerateKey();
	HRESULT Export2dCode([in] BSTR fileName, [in] ImageFileFormat915 format);
}

[
	object,
	uuid(F3D5007D-399A-354B-A9C8-8D2ED2498AE8),
	dual,
	pointer_default(unique)
]
interface IDkimKeypair915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT isSet([out, retval] BOOL* isSet);
	[propget] HRESULT privKey([out, retval] BSTR* result);
	[propput] HRESULT privKey([in] BSTR privKeyHex);
	[propget] HRESULT pubKeyText([out, retval] BSTR* result);
	HRESULT GenerateKeypair();
}

[
	object,
	uuid(E562FA16-BDCA-E1AC-D715-F2C602E0106F),
	dual,
	pointer_default(unique)
]
interface IPriorityNameList915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT list([out, retval] BSTR* result);
	[propput] HRESULT list([in] BSTR list);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
}

[
	object,
	uuid(678CF9A5-0906-7172-9F4A-E18AF9B873C2),
	dual,
	pointer_default(unique)
]
interface IClientAuthKeypair915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT isSet([out, retval] BOOL* result);
	[propget] HRESULT supported([out, retval] BOOL* result);
	[propget] HRESULT keyBits([out, retval] ULONG* result);
	[propget] HRESULT effectiveSecurity([out, retval] ULONG* result);
	[propget] HRESULT alg([out, retval] BSTR* result);
	[propget] HRESULT algId([out, retval] KeypairAlgId915* algId);
	[propget] HRESULT comment([out, retval] BSTR* result);
	[propput] HRESULT comment([in] BSTR comment);
	[propget] HRESULT md5([out, retval] BSTR* result);
	[propget] HRESULT bubbleBabble([out, retval] BSTR* result);
	[propget] HRESULT sha256([out, retval] BSTR* result);
	[propget] HRESULT crypt([out, retval] BSTR* result);
	[propput] HRESULT crypt([in] BSTR keypairHex);
	[propget] HRESULT info([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
	HRESULT GenerateNewKeypair([in] KeypairAlgId915 algId);
	HRESULT GenerateNewKeypairWithSize([in] KeypairAlgId915 algId, [in] ULONG keySize);
	HRESULT ExportPublicKeyToBase64String([in] PublicKeyFormat915 format, [out, retval] BSTR* pVal);
	HRESULT ExportPublicKeyToFile([in] BSTR fileName, [in] PublicKeyFormat915 format);
	HRESULT ExportToBase64String([in] KeypairFormat915 format, [in] BSTR pass, [out, retval] BSTR* pVal);
	HRESULT ExportToFile([in] BSTR fileName, [in] KeypairFormat915 format, [in] BSTR pass);
	HRESULT ImportFromFile([in] BSTR fileName, [in] BSTR pass);
	HRESULT ImportFromBase64String([in] BSTR val, [in] BSTR pass);	
}

[
	object,
	uuid(0D45B45E-6ADC-854A-C0CB-901B844D0EEE),
	dual,
	pointer_default(unique)
]
interface ISfsEncryptedProviderSettings915 : IDispatch
{
	[propput] HRESULT volumeName([in] BSTR value);
	HRESULT SetDefaults();
}



[
	object,
	uuid(7DF9D4AE-F9C2-57D2-C03B-46E35F9E6F70),
	dual,
	pointer_default(unique)
]
interface IAcceptInstructions915 : IDispatch
{
	[propget] HRESULT allowConnect([out, retval] BOOL* result);
	[propput] HRESULT allowConnect([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(7D8C2661-91D0-A909-5A49-DB72D8E13AF8),
	dual,
	pointer_default(unique)
]
interface IAccessControl915 : IDispatch
{
	[propget] HRESULT passwordMethod([out, retval] GlobalAuthMethod915* result);
	[propput] HRESULT passwordMethod([in] GlobalAuthMethod915 value);
	[propget] HRESULT kbdiPasswordMethod([out, retval] GlobalAuthMethod915* result);
	[propput] HRESULT kbdiPasswordMethod([in] GlobalAuthMethod915 value);
	[propget] HRESULT totp([out, retval] IGlobalKbdiTotp915** result);
	[propget] HRESULT pwCacheAutoSave([out, retval] PwCacheAutoSave915* result);
	[propput] HRESULT pwCacheAutoSave([in] PwCacheAutoSave915 value);
	[propget] HRESULT hidePwCacheUserNames([out, retval] BOOL* result);
	[propput] HRESULT hidePwCacheUserNames([in] BOOL value);
	[propget] HRESULT clearPwFromCacheOnFailure([out, retval] BOOL* result);
	[propput] HRESULT clearPwFromCacheOnFailure([in] BOOL value);
	[propget] HRESULT kerberos5Auth([out, retval] GlobalGssApiAuth915* result);
	[propput] HRESULT kerberos5Auth([in] GlobalGssApiAuth915 value);
	[propget] HRESULT ntlmAuth([out, retval] GlobalGssApiAuth915* result);
	[propput] HRESULT ntlmAuth([in] GlobalGssApiAuth915 value);
	[propget] HRESULT authKeysSync([out, retval] BOOL* result);
	[propput] HRESULT authKeysSync([in] BOOL value);
	[propget] HRESULT maxAuthKeys([out, retval] ULONG* result);
	[propput] HRESULT maxAuthKeys([in] ULONG value);
	[propget] HRESULT allowWinAccountPasswordChange([out, retval] BOOL* result);
	[propput] HRESULT allowWinAccountPasswordChange([in] BOOL value);
	[propget] HRESULT allowVirtAccountPasswordChange([out, retval] BOOL* result);
	[propput] HRESULT allowVirtAccountPasswordChange([in] BOOL value);
	[propget] HRESULT virtAccountsPwdPolicy([out, retval] IVirtAccountsPwdPolicy915** result);
	[propget] HRESULT elevateByDef([out, retval] BOOL* result);
	[propput] HRESULT elevateByDef([in] BOOL value);
	[propget] HRESULT defMaxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT defMaxCachedLookupAge([in] ULONG value);
	[propget] HRESULT winGroups([out, retval] IWinGroups915** result);
	[propget] HRESULT winAccounts([out, retval] IWinAccounts915** result);
	[propget] HRESULT virtGroups([out, retval] IVirtGroups915** result);
	[propget] HRESULT virtAccounts([out, retval] IVirtAccounts915** result);
	[propget] HRESULT clientVersions([out, retval] IClientVersionRules915** result);
	[propget] HRESULT clientAddresses([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT limitDelegatedAdminMountPoints([out, retval] BOOL* result);
	[propput] HRESULT limitDelegatedAdminMountPoints([in] BOOL value);
	[propget] HRESULT mountPointRootPathWhitelist([out, retval] IMountPointRootPathWhitelist915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(8807C181-221E-773D-DE6E-0BE03FB24B52),
	dual,
	pointer_default(unique)
]
interface IAccount915 : IDispatch
{
	[propget] HRESULT winAccountType([out, retval] WinAccountType915* result);
	[propput] HRESULT winAccountType([in] WinAccountType915 value);
	[propget] HRESULT winDomain([out, retval] BSTR* result);
	[propput] HRESULT winDomain([in] BSTR value);
	[propget] HRESULT winAccount([out, retval] BSTR* result);
	[propput] HRESULT winAccount([in] BSTR value);
	[propget] HRESULT comment([out, retval] BSTR* result);
	[propput] HRESULT comment([in] BSTR value);
	[propget] HRESULT specifyGroup([out, retval] BOOL* result);
	[propput] HRESULT specifyGroup([in] BOOL value);
	[propget] HRESULT groupType([out, retval] GroupType915* result);
	[propput] HRESULT groupType([in] GroupType915 value);
	[propget] HRESULT group([out, retval] BSTR* result);
	[propput] HRESULT group([in] BSTR value);
	[propget] HRESULT loginAllowed([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT loginAllowed([in] DefaultGroupYesNo915 value);
	[propget] HRESULT limits([out, retval] IAccountLimitsAndQuotas915** result);
	[propget] HRESULT clientAddresses([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT auth([out, retval] IAccountAuthentication915** result);
	[propget] HRESULT remoteAdminAccess([out, retval] IRemoteAdminAccess915** result);
	[propget] HRESULT connection([out, retval] IAccountConnectionSetup915** result);
	[propget] HRESULT session([out, retval] IAccountSessionSetup915** result);
	[propget] HRESULT term([out, retval] IAccountTerminalAndExec915** result);
	[propget] HRESULT xfer([out, retval] IAccountFileTransfer915** result);
	[propget] HRESULT fwding([out, retval] IAccountForwarding915** result);
	[propget] HRESULT creationTime([out, retval] BSTR* result);
	[propput] HRESULT creationTime([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(7FB1F15D-D7A9-FAFB-3619-A0EBAC8FCC63),
	dual,
	pointer_default(unique)
]
interface IAccountAuthentication915 : IDispatch
{
	[propget] HRESULT passwordAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT passwordAuth([in] AuthDisp915 value);
	[propget] HRESULT allowPasswordChange([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowPasswordChange([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT publicKeyAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT publicKeyAuth([in] AuthDisp915 value);
	[propget] HRESULT allowKeyManagement([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowKeyManagement([in] DefaultGroupYesNo915 value);
	[propget] HRESULT keys([out, retval] IClientKeys915** result);
	[propget] HRESULT totp([out, retval] IAccountKbdiTotp915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(B17E2028-5D3C-D7D7-B63D-162A28241A1B),
	dual,
	pointer_default(unique)
]
interface IAccountConnectionSetup915 : IDispatch
{
	[propget] HRESULT startReexchange([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT startReexchange([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useGroupKeepAlive([out, retval] BOOL* result);
	[propput] HRESULT useGroupKeepAlive([in] BOOL value);
	[propget] HRESULT keepAliveTimeout([out, retval] ULONG* result);
	[propput] HRESULT keepAliveTimeout([in] ULONG value);
	[propget] HRESULT useGroupConnTimeout([out, retval] BOOL* result);
	[propput] HRESULT useGroupConnTimeout([in] BOOL value);
	[propget] HRESULT connectionTimeout([out, retval] ULONG* result);
	[propput] HRESULT connectionTimeout([in] ULONG value);
	[propget] HRESULT onLogonCmd([out, retval] IConnOnLogonCommandWithDefault915** result);
	[propget] HRESULT onLogoffCmd([out, retval] IConnOnLogoffCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(80836F5D-01B8-4E2D-8ED5-8F41B15E27BA),
	dual,
	pointer_default(unique)
]
interface IAccountFileTransfer915 : IDispatch
{
	[propget] HRESULT permitScp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitScp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitSftp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitSftp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitFtps([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitFtps([in] DefaultGroupYesNo915 value);
	[propget] HRESULT loadProfileForFileXfer([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT loadProfileForFileXfer([in] DefaultGroupYesNo915 value);
	[propget] HRESULT omitRelative([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT omitRelative([in] DefaultGroupYesNo915 value);
	[propget] HRESULT limitToSftp3([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT limitToSftp3([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useDefaultPosixPerm([out, retval] BOOL* result);
	[propput] HRESULT useDefaultPosixPerm([in] BOOL value);
	[propget] HRESULT posixPermDir([out, retval] BSTR* result);
	[propput] HRESULT posixPermDir([in] BSTR value);
	[propget] HRESULT posixPermFile([out, retval] BSTR* result);
	[propput] HRESULT posixPermFile([in] BSTR value);
	[propget] HRESULT useBvShellWithWinScp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT useBvShellWithWinScp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT displayTime([out, retval] DisplayTimeType915* result);
	[propput] HRESULT displayTime([in] DisplayTimeType915 value);
	[propget] HRESULT useDefaultMaxPathLength([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxPathLength([in] BOOL value);
	[propget] HRESULT maxPathLength([out, retval] ULONG* result);
	[propput] HRESULT maxPathLength([in] ULONG value);
	[propget] HRESULT allowAltStreams([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowAltStreams([in] DefaultGroupYesNo915 value);
	[propget] HRESULT allowUnsafeNames([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowUnsafeNames([in] DefaultGroupYesNo915 value);
	[propget] HRESULT inheritMountPoints([out, retval] BOOL* result);
	[propput] HRESULT inheritMountPoints([in] BOOL value);
	[propget] HRESULT inheritAllMountPoints([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT inheritAllMountPoints([in] DefaultGroupYesNo915 value);
	[propget] HRESULT undefMountPoints([out, retval] ISfsUndefMountPoints915** result);
	[propget] HRESULT mountPoints([out, retval] ISfsMountPoints915** result);
	[propget] HRESULT useDefaultSfsHomeDir([out, retval] BOOL* result);
	[propput] HRESULT useDefaultSfsHomeDir([in] BOOL value);
	[propget] HRESULT sfsHomeDir([out, retval] BSTR* result);
	[propput] HRESULT sfsHomeDir([in] BSTR value);
	[propget] HRESULT createSfsHomeDir([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT createSfsHomeDir([in] DefaultGroupYesNo915 value);
	[propget] HRESULT delIncompleteUploads([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT delIncompleteUploads([in] DefaultGroupYesNo915 value);
	[propget] HRESULT moveCompletedUploads([out, retval] IMoveCompletedUploadsWithDefault915** result);
	[propget] HRESULT onUploadCmd([out, retval] IConnOnUploadCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(5EA1E4EC-235F-C30A-4B6F-D71A3C1E9A55),
	dual,
	pointer_default(unique)
]
interface IAccountForwarding915 : IDispatch
{
	[propget] HRESULT permitC2S([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitC2S([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitS2C([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitS2C([in] DefaultGroupYesNo915 value);
	[propget] HRESULT connectRules([out, retval] IConnectRulesWithProfileInfo915** result);
	[propget] HRESULT listenRules([out, retval] IListeningRules915** result);
	[propget] HRESULT srvSideC2S([out, retval] ISrvSideC2SRules915** result);
	[propget] HRESULT srvSideS2C([out, retval] ISrvSideS2CRules915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(54A48B62-0D72-C86E-3240-8D12660D423D),
	dual,
	pointer_default(unique)
]
interface IAccountKbdiTotp915 : IDispatch
{
	[propget] HRESULT totpAuth([out, retval] KbdiTotpAuth915* result);
	[propput] HRESULT totpAuth([in] KbdiTotpAuth915 value);
	[propget] HRESULT showAdvancedTotp([out, retval] BOOL* result);
	[propput] HRESULT showAdvancedTotp([in] BOOL value);
	[propget] HRESULT alg([out, retval] KbdiTotpAlg915* result);
	[propput] HRESULT alg([in] KbdiTotpAlg915 value);
	[propget] HRESULT numDigits([out, retval] KbdiTotpNumDigits915* result);
	[propput] HRESULT numDigits([in] KbdiTotpNumDigits915 value);
	[propget] HRESULT useDefaultTimeStepSize([out, retval] BOOL* result);
	[propput] HRESULT useDefaultTimeStepSize([in] BOOL value);
	[propget] HRESULT timeStepSizeInSecs([out, retval] ULONG* result);
	[propput] HRESULT timeStepSizeInSecs([in] ULONG value);
	[propget] HRESULT useDefaultMaxTimeStepsFwd([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxTimeStepsFwd([in] BOOL value);
	[propget] HRESULT maxTimeStepsFwd([out, retval] ULONG* result);
	[propput] HRESULT maxTimeStepsFwd([in] ULONG value);
	[propget] HRESULT useDefaultMaxTimeStepsBwd([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxTimeStepsBwd([in] BOOL value);
	[propget] HRESULT maxTimeStepsBwd([out, retval] ULONG* result);
	[propput] HRESULT maxTimeStepsBwd([in] ULONG value);
	[propget] HRESULT secretKey([out, retval] ISecretKey915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(DA1ED128-A8D4-A23A-3313-E708CF8597F3),
	dual,
	pointer_default(unique)
]
interface IAccountLimitsAndQuotas915 : IDispatch
{
	[propget] HRESULT useGroupConnLimits([out, retval] BOOL* result);
	[propput] HRESULT useGroupConnLimits([in] BOOL value);
	[propget] HRESULT maxConnections([out, retval] ULONG* result);
	[propput] HRESULT maxConnections([in] ULONG value);
	[propget] HRESULT maxConnWithProcesses([out, retval] ULONG* result);
	[propput] HRESULT maxConnWithProcesses([in] ULONG value);
	[propget] HRESULT bandwidthType([out, retval] BandwidthType915* result);
	[propput] HRESULT bandwidthType([in] BandwidthType915 value);
	[propget] HRESULT permanentBandwidths([out, retval] IPermanentBandwidths915** result);
	[propget] HRESULT monthlyQuotas([out, retval] IStatsQuotas915** result);
	[propget] HRESULT dailyQuotas([out, retval] IStatsQuotas915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(E9CB8F95-FB0D-5DD7-FA86-C2D41F5F2FED),
	dual,
	pointer_default(unique)
]
interface IAccountSessionSetup915 : IDispatch
{
	[propget] HRESULT logonType([out, retval] LogonType915* result);
	[propput] HRESULT logonType([in] LogonType915 value);
	[propget] HRESULT onAccountInfoFailure([out, retval] OnAccountInfoFailure915* result);
	[propput] HRESULT onAccountInfoFailure([in] OnAccountInfoFailure915 value);
	[propget] HRESULT ifTemporaryProfileLoaded([out, retval] IfTemporaryProfileLoaded915* result);
	[propput] HRESULT ifTemporaryProfileLoaded([in] IfTemporaryProfileLoaded915 value);
	[propget] HRESULT useGroupWinSessionStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupWinSessionStgs([in] BOOL value);
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareAccountSettings915** result);
	[propget] HRESULT shares([out, retval] IFileShares915** result);
	[propget] HRESULT windowsOnLogonCmd([out, retval] IWinOnLogonCommandWithDefault915** result);
	[propget] HRESULT windowsOnLogoffCmd([out, retval] IWinOnLogoffCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3D9D225D-9A16-FF56-5399-BCD609DEC3D8),
	dual,
	pointer_default(unique)
]
interface IAccountTerminalAndExec915 : IDispatch
{
	[propget] HRESULT shellAccessType([out, retval] ShellAccess915* result);
	[propput] HRESULT shellAccessType([in] ShellAccess915 value);
	[propget] HRESULT shellCustom([out, retval] IAccountTerminalShellSettings915** result);
	[propget] HRESULT bashExePath([out, retval] BSTR* result);
	[propput] HRESULT bashExePath([in] BSTR value);
	[propget] HRESULT addBashDirToPath([out, retval] BOOL* result);
	[propput] HRESULT addBashDirToPath([in] BOOL value);
	[propget] HRESULT gitType([out, retval] GitType915* result);
	[propput] HRESULT gitType([in] GitType915 value);
	[propget] HRESULT gitBinDir([out, retval] BSTR* result);
	[propput] HRESULT gitBinDir([in] BSTR value);
	[propget] HRESULT gitRepoDir([out, retval] BSTR* result);
	[propput] HRESULT gitRepoDir([in] BSTR value);
	[propget] HRESULT telnetAddr([out, retval] BSTR* result);
	[propput] HRESULT telnetAddr([in] BSTR value);
	[propget] HRESULT telnetPort([out, retval] ULONG* result);
	[propput] HRESULT telnetPort([in] ULONG value);
	[propget] HRESULT initData([out, retval] BSTR* result);
	[propput] HRESULT initData([in] BSTR value);
	[propget] HRESULT loadProfileForBvShell([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT loadProfileForBvShell([in] DefaultGroupYesNo915 value);
	[propget] HRESULT allowJobBreakaway([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowJobBreakaway([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useDefaultTerminalCodePage([out, retval] BOOL* result);
	[propput] HRESULT useDefaultTerminalCodePage([in] BOOL value);
	[propget] HRESULT terminalCodePage([out, retval] TerminalCodePage915* result);
	[propput] HRESULT terminalCodePage([in] TerminalCodePage915 value);
	[propget] HRESULT useDefaultInitDir([out, retval] BOOL* result);
	[propput] HRESULT useDefaultInitDir([in] BOOL value);
	[propget] HRESULT initDir([out, retval] BSTR* result);
	[propput] HRESULT initDir([in] BSTR value);
	[propget] HRESULT permitInitDirFallback([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitInitDirFallback([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitEnvVar([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitEnvVar([in] DefaultGroupYesNo915 value);
	[propget] HRESULT allowAgentFwdCygwin([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowAgentFwdCygwin([in] DefaultGroupYesNo915 value);
	[propget] HRESULT allowAgentFwdPutty([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowAgentFwdPutty([in] DefaultGroupYesNo915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(16C23337-4E7B-1979-1A4E-F25C21C0C26E),
	dual,
	pointer_default(unique)
]
interface IAccountTerminalShellSettings915 : IDispatch
{
	[propget] HRESULT permitTerminalShell([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitTerminalShell([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useDefaultTerminalShell([out, retval] BOOL* result);
	[propput] HRESULT useDefaultTerminalShell([in] BOOL value);
	[propget] HRESULT terminalShell([out, retval] BSTR* result);
	[propput] HRESULT terminalShell([in] BSTR value);
	[propget] HRESULT permitExecRequests([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitExecRequests([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useDefaultExecReqPrefix([out, retval] BOOL* result);
	[propput] HRESULT useDefaultExecReqPrefix([in] BOOL value);
	[propget] HRESULT execReqPrefix([out, retval] BSTR* result);
	[propput] HRESULT execReqPrefix([in] BSTR value);
	[propget] HRESULT spaceAfterPrefix([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT spaceAfterPrefix([in] DefaultGroupYesNo915 value);
	[propget] HRESULT convertGitParams([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT convertGitParams([in] DefaultGroupYesNo915 value);
	[propget] HRESULT base64EncodeCmd([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT base64EncodeCmd([in] DefaultGroupYesNo915 value);
	[propget] HRESULT doubleQuoteCmd([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT doubleQuoteCmd([in] DefaultGroupYesNo915 value);
	[propget] HRESULT forceDumbPty([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT forceDumbPty([in] DefaultGroupYesNo915 value);
	[propget] HRESULT customSubsysAccess([out, retval] CustomSubsysAccess915* result);
	[propput] HRESULT customSubsysAccess([in] CustomSubsysAccess915 value);
	[propget] HRESULT allowSubsystems([out, retval] BSTR* result);
	[propput] HRESULT allowSubsystems([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(65DC844D-8749-7BC7-4AB4-635307FC52A3),
	dual,
	pointer_default(unique)
]
interface IAdditionalDomains915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IAdditionalDomainsEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IAdditionalDomainsEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(D08ECD21-08B8-2F21-0D5E-C0F7E01A617D),
	dual,
	pointer_default(unique)
]
interface IAdditionalDomainsEntry915 : IDispatch
{
	[propget] HRESULT domain([out, retval] BSTR* result);
	[propput] HRESULT domain([in] BSTR value);
	[propget] HRESULT additionalDomains([out, retval] BSTR* result);
	[propput] HRESULT additionalDomains([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(CF021871-6C4B-75DB-941C-BA166A6D7DFE),
	dual,
	pointer_default(unique)
]
interface IAddressAcceptRule915 : IDispatch
{
	[propget] HRESULT addressRule([out, retval] IAddressRuleIPv6_915** result);
	[propget] HRESULT onDnsError([out, retval] OnDnsResolvingError915* result);
	[propput] HRESULT onDnsError([in] OnDnsResolvingError915 value);
	[propget] HRESULT useDefMaxCachedLookupAge([out, retval] BOOL* result);
	[propput] HRESULT useDefMaxCachedLookupAge([in] BOOL value);
	[propget] HRESULT maxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT maxCachedLookupAge([in] ULONG value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IAcceptInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(463773AA-1FF2-E052-231C-E42613692188),
	dual,
	pointer_default(unique)
]
interface IAddressAcceptRuleForIPv4_915 : IDispatch
{
	[propget] HRESULT addressRule([out, retval] IAddressRule915** result);
	[propget] HRESULT onDnsError([out, retval] OnDnsResolvingError915* result);
	[propput] HRESULT onDnsError([in] OnDnsResolvingError915 value);
	[propget] HRESULT useDefMaxCachedLookupAge([out, retval] BOOL* result);
	[propput] HRESULT useDefMaxCachedLookupAge([in] BOOL value);
	[propget] HRESULT maxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT maxCachedLookupAge([in] ULONG value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IAcceptInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C22193DE-8C02-415B-D9CE-07F6C2C676FE),
	dual,
	pointer_default(unique)
]
interface IAddressAcceptRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IAddressAcceptRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IAddressAcceptRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type);
	HRESULT TryImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IAddressAcceptRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IAddressAcceptRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(C0A98BCD-8A50-BB8C-C1D2-ECE695E5F097),
	dual,
	pointer_default(unique)
]
interface IAddressAcceptRulesForIPv4_915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type);
	HRESULT TryImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IAddressAcceptRuleForIPv4_915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(5F755CFA-9FEB-61F9-CDAB-C1620C347D51),
	dual,
	pointer_default(unique)
]
interface IAddressRule915 : IDispatch
{
	[propget] HRESULT addressType([out, retval] AddressVer4Type915* result);
	[propput] HRESULT addressType([in] AddressVer4Type915 value);
	[propget] HRESULT ipv4range([out, retval] BOOL* result);
	[propput] HRESULT ipv4range([in] BOOL value);
	[propget] HRESULT ipv4([out, retval] BSTR* result);
	[propput] HRESULT ipv4([in] BSTR value);
	[propget] HRESULT ipv4start([out, retval] BSTR* result);
	[propput] HRESULT ipv4start([in] BSTR value);
	[propget] HRESULT ipv4end([out, retval] BSTR* result);
	[propput] HRESULT ipv4end([in] BSTR value);
	[propget] HRESULT locationType([out, retval] LocationType915* result);
	[propput] HRESULT locationType([in] LocationType915 value);
	[propget] HRESULT countryName([out, retval] BSTR* result);
	[propput] HRESULT countryName([in] BSTR value);
	[propget] HRESULT continentName([out, retval] BSTR* result);
	[propput] HRESULT continentName([in] BSTR value);
	[propget] HRESULT dnsNameAddress([out, retval] BSTR* result);
	[propput] HRESULT dnsNameAddress([in] BSTR value);
	[propget] HRESULT lookupDirection([out, retval] LookupDirection915* result);
	[propput] HRESULT lookupDirection([in] LookupDirection915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(1B00772F-D403-68B9-A01D-2EA2C99D47E9),
	dual,
	pointer_default(unique)
]
interface IAddressRuleIPv6_915 : IDispatch
{
	[propget] HRESULT addressType([out, retval] AddressVer6Type915* result);
	[propput] HRESULT addressType([in] AddressVer6Type915 value);
	[propget] HRESULT ipv4range([out, retval] BOOL* result);
	[propput] HRESULT ipv4range([in] BOOL value);
	[propget] HRESULT ipv4([out, retval] BSTR* result);
	[propput] HRESULT ipv4([in] BSTR value);
	[propget] HRESULT ipv4start([out, retval] BSTR* result);
	[propput] HRESULT ipv4start([in] BSTR value);
	[propget] HRESULT ipv4end([out, retval] BSTR* result);
	[propput] HRESULT ipv4end([in] BSTR value);
	[propget] HRESULT ipv6range([out, retval] BOOL* result);
	[propput] HRESULT ipv6range([in] BOOL value);
	[propget] HRESULT ipv6([out, retval] BSTR* result);
	[propput] HRESULT ipv6([in] BSTR value);
	[propget] HRESULT ipv6start([out, retval] BSTR* result);
	[propput] HRESULT ipv6start([in] BSTR value);
	[propget] HRESULT ipv6end([out, retval] BSTR* result);
	[propput] HRESULT ipv6end([in] BSTR value);
	[propget] HRESULT locationType([out, retval] LocationType915* result);
	[propput] HRESULT locationType([in] LocationType915 value);
	[propget] HRESULT countryName([out, retval] BSTR* result);
	[propput] HRESULT countryName([in] BSTR value);
	[propget] HRESULT continentName([out, retval] BSTR* result);
	[propput] HRESULT continentName([in] BSTR value);
	[propget] HRESULT dnsNameAddress([out, retval] BSTR* result);
	[propput] HRESULT dnsNameAddress([in] BSTR value);
	[propget] HRESULT lookupDirection([out, retval] LookupDirection915* result);
	[propput] HRESULT lookupDirection([in] LookupDirection915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(D84022C2-9524-487C-219B-9783E3F61921),
	dual,
	pointer_default(unique)
]
interface IAllowAcceptInstructions915 : IDispatch
{
	[propget] HRESULT allowAccess([out, retval] BOOL* result);
	[propput] HRESULT allowAccess([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(30E11E63-01FC-3745-F702-A8260D500974),
	dual,
	pointer_default(unique)
]
interface IAllowAddressAcceptRule915 : IDispatch
{
	[propget] HRESULT addressRule([out, retval] IAddressRuleIPv6_915** result);
	[propget] HRESULT onDnsError([out, retval] OnDnsResolvingError915* result);
	[propput] HRESULT onDnsError([in] OnDnsResolvingError915 value);
	[propget] HRESULT useDefMaxCachedLookupAge([out, retval] BOOL* result);
	[propput] HRESULT useDefMaxCachedLookupAge([in] BOOL value);
	[propget] HRESULT maxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT maxCachedLookupAge([in] ULONG value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IAllowAcceptInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2E1D19D7-5F03-E346-5382-8721C704F837),
	dual,
	pointer_default(unique)
]
interface IBindingIpv4_915 : IDispatch
{
	[propget] HRESULT serviceType([out, retval] ServiceType915* result);
	[propput] HRESULT serviceType([in] ServiceType915 value);
	[propget] HRESULT listenInterface([out, retval] BSTR* result);
	[propput] HRESULT listenInterface([in] BSTR value);
	[propget] HRESULT port([out, retval] ULONG* result);
	[propput] HRESULT port([in] ULONG value);
	[propget] HRESULT proxyProtocol([out, retval] ProxyProtocol915* result);
	[propput] HRESULT proxyProtocol([in] ProxyProtocol915 value);
	[propget] HRESULT gatewayForward([out, retval] BOOL* result);
	[propput] HRESULT gatewayForward([in] BOOL value);
	[propget] HRESULT externalPort([out, retval] ULONG* result);
	[propput] HRESULT externalPort([in] ULONG value);
	[propget] HRESULT obfuscation([out, retval] BOOL* result);
	[propput] HRESULT obfuscation([in] BOOL value);
	[propget] HRESULT obfsKeyword([out, retval] IPassword915** result);
	[propget] HRESULT pasvPort([out, retval] ULONG* result);
	[propput] HRESULT pasvPort([in] ULONG value);
	[propget] HRESULT overridePasvAddr([out, retval] BOOL* result);
	[propput] HRESULT overridePasvAddr([in] BOOL value);
	[propget] HRESULT pasvAddress([out, retval] BSTR* result);
	[propput] HRESULT pasvAddress([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(87BB7251-0C33-844E-8787-8DEB031DFBFB),
	dual,
	pointer_default(unique)
]
interface IBindingIpv6_915 : IDispatch
{
	[propget] HRESULT serviceType([out, retval] ServiceType915* result);
	[propput] HRESULT serviceType([in] ServiceType915 value);
	[propget] HRESULT listenInterface([out, retval] BSTR* result);
	[propput] HRESULT listenInterface([in] BSTR value);
	[propget] HRESULT port([out, retval] ULONG* result);
	[propput] HRESULT port([in] ULONG value);
	[propget] HRESULT proxyProtocol([out, retval] ProxyProtocol915* result);
	[propput] HRESULT proxyProtocol([in] ProxyProtocol915 value);
	[propget] HRESULT gatewayForward([out, retval] BOOL* result);
	[propput] HRESULT gatewayForward([in] BOOL value);
	[propget] HRESULT externalPort([out, retval] ULONG* result);
	[propput] HRESULT externalPort([in] ULONG value);
	[propget] HRESULT obfuscation([out, retval] BOOL* result);
	[propput] HRESULT obfuscation([in] BOOL value);
	[propget] HRESULT obfsKeyword([out, retval] IPassword915** result);
	[propget] HRESULT pasvPort([out, retval] ULONG* result);
	[propput] HRESULT pasvPort([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(FF1BED52-66FF-9151-81A0-319481C25150),
	dual,
	pointer_default(unique)
]
interface IBindings915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] IBindingsIpv4_915** result);
	[propget] HRESULT ipv6([out, retval] IBindingsIpv6_915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(02759E56-E243-CE89-F3F3-BF6A7A3B1979),
	dual,
	pointer_default(unique)
]
interface IBindingsIpv4_915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IBindingIpv4_915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IBindingIpv4_915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IBindingIpv4_915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IBindingIpv4_915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(837465B2-A23F-8BFA-C1CC-F7C05C3E341B),
	dual,
	pointer_default(unique)
]
interface IBindingsIpv6_915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IBindingIpv6_915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IBindingIpv6_915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IBindingIpv6_915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IBindingIpv6_915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(A693523C-2F32-117F-4030-6D253CAF9781),
	dual,
	pointer_default(unique)
]
interface IClientVersionRule915 : IDispatch
{
	[propget] HRESULT matchAll([out, retval] BOOL* result);
	[propput] HRESULT matchAll([in] BOOL value);
	[propget] HRESULT caseSensitive([out, retval] BOOL* result);
	[propput] HRESULT caseSensitive([in] BOOL value);
	[propget] HRESULT pattern([out, retval] BSTR* result);
	[propput] HRESULT pattern([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT accept([out, retval] BOOL* result);
	[propput] HRESULT accept([in] BOOL value);
	[propget] HRESULT allowPasswordAuth([out, retval] BOOL* result);
	[propput] HRESULT allowPasswordAuth([in] BOOL value);
	[propget] HRESULT allowPwKbdiAuth([out, retval] BOOL* result);
	[propput] HRESULT allowPwKbdiAuth([in] BOOL value);
	[propget] HRESULT allowGssApiAuth([out, retval] BOOL* result);
	[propput] HRESULT allowGssApiAuth([in] BOOL value);
	[propget] HRESULT sshUserMustMatchGssApi([out, retval] BOOL* result);
	[propput] HRESULT sshUserMustMatchGssApi([in] BOOL value);
	[propget] HRESULT startReexchange([out, retval] BOOL* result);
	[propput] HRESULT startReexchange([in] BOOL value);
	[propget] HRESULT globalRequestCapable([out, retval] GlobalRequestCapable915* result);
	[propput] HRESULT globalRequestCapable([in] GlobalRequestCapable915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(105021EE-E64A-52B7-F13C-F88C8AFDC2C9),
	dual,
	pointer_default(unique)
]
interface IClientVersionRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IClientVersionRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IClientVersionRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IClientVersionRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IClientVersionRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(0F26F994-47CB-A45C-892B-B66D8A2A700F),
	dual,
	pointer_default(unique)
]
interface ICompression915 : IDispatch
{
	[propget] HRESULT zlib([out, retval] BOOL* result);
	[propput] HRESULT zlib([in] BOOL value);
	[propget] HRESULT none([out, retval] BOOL* result);
	[propput] HRESULT none([in] BOOL value);
	[propget] HRESULT delayCompression([out, retval] BOOL* result);
	[propput] HRESULT delayCompression([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2DC23234-9B81-B6EE-3564-13EA273BEBD6),
	dual,
	pointer_default(unique)
]
interface IConnOnLogoffCommand915 : IDispatch
{
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3578D0D7-382C-BA2F-C77C-80DD347B193B),
	dual,
	pointer_default(unique)
]
interface IConnOnLogoffCommandWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(BB681A30-D44E-FDAC-F58B-671C229287F3),
	dual,
	pointer_default(unique)
]
interface IConnOnLogonCommand915 : IDispatch
{
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(9FD9B332-2E9F-9337-CAC8-6E1A926EAF64),
	dual,
	pointer_default(unique)
]
interface IConnOnLogonCommandWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(4DACDF97-FF48-4E0C-33A6-D6CDACAD7DFA),
	dual,
	pointer_default(unique)
]
interface IConnOnUploadCommand915 : IDispatch
{
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT execForIncomplete([out, retval] BOOL* result);
	[propput] HRESULT execForIncomplete([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(ECD6F8E0-92E8-4E2C-516C-73A4DFF453B3),
	dual,
	pointer_default(unique)
]
interface IConnOnUploadCommandWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT execForIncomplete([out, retval] BOOL* result);
	[propput] HRESULT execForIncomplete([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(90052DA3-C02E-FF61-193C-5F3CF064A60F),
	dual,
	pointer_default(unique)
]
interface IConnectInstructions915 : IDispatch
{
	[propget] HRESULT allowConnect([out, retval] BOOL* result);
	[propput] HRESULT allowConnect([in] BOOL value);
	[propget] HRESULT targetHost([out, retval] BSTR* result);
	[propput] HRESULT targetHost([in] BSTR value);
	[propget] HRESULT targetPort([out, retval] ULONG* result);
	[propput] HRESULT targetPort([in] ULONG value);
	[propget] HRESULT connectProfile([out, retval] BSTR* result);
	[propput] HRESULT connectProfile([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(4DBEAA30-CEED-CE6F-B58F-9060314BA104),
	dual,
	pointer_default(unique)
]
interface IConnectProfile915 : IDispatch
{
	[propget] HRESULT profileName([out, retval] BSTR* result);
	[propput] HRESULT profileName([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT connectIntf([out, retval] BSTR* result);
	[propput] HRESULT connectIntf([in] BSTR value);
	[propget] HRESULT proxyType([out, retval] ProxyType915* result);
	[propput] HRESULT proxyType([in] ProxyType915 value);
	[propget] HRESULT proxyHost([out, retval] BSTR* result);
	[propput] HRESULT proxyHost([in] BSTR value);
	[propget] HRESULT proxyPort([out, retval] ULONG* result);
	[propput] HRESULT proxyPort([in] ULONG value);
	[propget] HRESULT resolveLocally([out, retval] BOOL* result);
	[propput] HRESULT resolveLocally([in] BOOL value);
	[propget] HRESULT proxyUsername([out, retval] BSTR* result);
	[propput] HRESULT proxyUsername([in] BSTR value);
	[propget] HRESULT proxyPassword([out, retval] IPassword915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(02918C8D-9D5A-9FB1-2AA6-D22D27C5179A),
	dual,
	pointer_default(unique)
]
interface IConnectProfiles915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IConnectProfile915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IConnectProfile915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IConnectProfile915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IConnectProfile915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(2D8B3AFF-F1F9-6B78-A1FB-BA1FFCAC0049),
	dual,
	pointer_default(unique)
]
interface IConnectRuleWithDefault915 : IDispatch
{
	[propget] HRESULT addressRule([out, retval] IAddressRuleIPv6_915** result);
	[propget] HRESULT portRangeRule([out, retval] IPortRangeRule915** result);
	[propget] HRESULT onDnsError([out, retval] OnDnsResolvingError915* result);
	[propput] HRESULT onDnsError([in] OnDnsResolvingError915 value);
	[propget] HRESULT useDefMaxCachedLookupAge([out, retval] BOOL* result);
	[propput] HRESULT useDefMaxCachedLookupAge([in] BOOL value);
	[propget] HRESULT maxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT maxCachedLookupAge([in] ULONG value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IConnectInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(299C10B0-5577-85EE-A989-DC5A100E46FB),
	dual,
	pointer_default(unique)
]
interface IConnectRuleWithProfileInfo915 : IDispatch
{
	[propget] HRESULT addressRule([out, retval] IAddressRuleIPv6_915** result);
	[propget] HRESULT portRangeRule([out, retval] IPortRangeRule915** result);
	[propget] HRESULT onDnsError([out, retval] OnDnsResolvingError915* result);
	[propput] HRESULT onDnsError([in] OnDnsResolvingError915 value);
	[propget] HRESULT useDefMaxCachedLookupAge([out, retval] BOOL* result);
	[propput] HRESULT useDefMaxCachedLookupAge([in] BOOL value);
	[propget] HRESULT maxCachedLookupAge([out, retval] ULONG* result);
	[propput] HRESULT maxCachedLookupAge([in] ULONG value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IConnectInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(D27A464A-37E9-4B16-82A2-78EE19563A58),
	dual,
	pointer_default(unique)
]
interface IConnectRulesWithDefault915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IConnectRuleWithDefault915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IConnectRuleWithDefault915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(D205164A-5AB4-ACCF-EDB3-E5022D38F784),
	dual,
	pointer_default(unique)
]
interface IConnectRulesWithProfileInfo915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IConnectRuleWithProfileInfo915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(AFF6BA10-8464-67FF-C477-0BE7C1657444),
	dual,
	pointer_default(unique)
]
interface IConnections915 : IDispatch
{
	[propget] HRESULT omitVersion([out, retval] BOOL* result);
	[propput] HRESULT omitVersion([in] BOOL value);
	[propget] HRESULT sendBannerMessage([out, retval] SendBannerMessage915* result);
	[propput] HRESULT sendBannerMessage([in] SendBannerMessage915 value);
	[propget] HRESULT bannerMessage([out, retval] BSTR* result);
	[propput] HRESULT bannerMessage([in] BSTR value);
	[propget] HRESULT bannerFile([out, retval] BSTR* result);
	[propput] HRESULT bannerFile([in] BSTR value);
	[propget] HRESULT loginTimeout([out, retval] ULONG* result);
	[propput] HRESULT loginTimeout([in] ULONG value);
	[propget] HRESULT maxPenaltyLoginAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxPenaltyLoginAttempts([in] ULONG value);
	[propget] HRESULT penaltyLoginAttemptDelay([out, retval] ULONG* result);
	[propput] HRESULT penaltyLoginAttemptDelay([in] ULONG value);
	[propget] HRESULT delayedLoginExpiration([out, retval] ULONG* result);
	[propput] HRESULT delayedLoginExpiration([in] ULONG value);
	[propget] HRESULT noDelayPublicKey([out, retval] BOOL* result);
	[propput] HRESULT noDelayPublicKey([in] BOOL value);
	[propget] HRESULT noDelayGssApi([out, retval] BOOL* result);
	[propput] HRESULT noDelayGssApi([in] BOOL value);
	[propget] HRESULT maxTotalConnections([out, retval] ULONG* result);
	[propput] HRESULT maxTotalConnections([in] ULONG value);
	[propget] HRESULT maxTotalConnFromUsers([out, retval] ULONG* result);
	[propput] HRESULT maxTotalConnFromUsers([in] ULONG value);
	[propget] HRESULT maxTotalConnWithProcesses([out, retval] ULONG* result);
	[propput] HRESULT maxTotalConnWithProcesses([in] ULONG value);
	[propget] HRESULT ignoreConnLimitsForAdmins([out, retval] BOOL* result);
	[propput] HRESULT ignoreConnLimitsForAdmins([in] BOOL value);
	[propget] HRESULT startReexchange([out, retval] BOOL* result);
	[propput] HRESULT startReexchange([in] BOOL value);
	[propget] HRESULT keepAliveTimeout([out, retval] ULONG* result);
	[propput] HRESULT keepAliveTimeout([in] ULONG value);
	[propget] HRESULT connectionTimeout([out, retval] ULONG* result);
	[propput] HRESULT connectionTimeout([in] ULONG value);
	[propget] HRESULT sendFwdingRuleDescs([out, retval] BOOL* result);
	[propput] HRESULT sendFwdingRuleDescs([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(980B7392-1E63-519A-DAAC-52F84AFDA758),
	dual,
	pointer_default(unique)
]
interface ICustomSubsystem915 : IDispatch
{
	[propget] HRESULT name([out, retval] BSTR* result);
	[propput] HRESULT name([in] BSTR value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(0B82AAB6-1EB5-A1B8-6089-08E0B37D60D4),
	dual,
	pointer_default(unique)
]
interface ICustomSubsystems915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ICustomSubsystem915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ICustomSubsystem915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ICustomSubsystem915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ICustomSubsystem915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(A87EA791-88BE-503C-9AA2-F7875D7D2CA0),
	dual,
	pointer_default(unique)
]
interface IDayOccurrenceGroup915 : IDispatch
{
	[propget] HRESULT first([out, retval] BOOL* result);
	[propput] HRESULT first([in] BOOL value);
	[propget] HRESULT second([out, retval] BOOL* result);
	[propput] HRESULT second([in] BOOL value);
	[propget] HRESULT third([out, retval] BOOL* result);
	[propput] HRESULT third([in] BOOL value);
	[propget] HRESULT fourth([out, retval] BOOL* result);
	[propput] HRESULT fourth([in] BOOL value);
	[propget] HRESULT last([out, retval] BOOL* result);
	[propput] HRESULT last([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(282A709C-1E86-12C0-C2FA-1FDAFAE2AD09),
	dual,
	pointer_default(unique)
]
interface IDayOfWeekGroup915 : IDispatch
{
	[propget] HRESULT sun([out, retval] BOOL* result);
	[propput] HRESULT sun([in] BOOL value);
	[propget] HRESULT mon([out, retval] BOOL* result);
	[propput] HRESULT mon([in] BOOL value);
	[propget] HRESULT tue([out, retval] BOOL* result);
	[propput] HRESULT tue([in] BOOL value);
	[propget] HRESULT wed([out, retval] BOOL* result);
	[propput] HRESULT wed([in] BOOL value);
	[propget] HRESULT thu([out, retval] BOOL* result);
	[propput] HRESULT thu([in] BOOL value);
	[propget] HRESULT fri([out, retval] BOOL* result);
	[propput] HRESULT fri([in] BOOL value);
	[propget] HRESULT sat([out, retval] BOOL* result);
	[propput] HRESULT sat([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(96DEAD58-0F21-E166-6541-71F148CBC0AB),
	dual,
	pointer_default(unique)
]
interface IDebugging915 : IDispatch
{
	[propget] HRESULT enableInWindowDebugMode([out, retval] BOOL* result);
	[propput] HRESULT enableInWindowDebugMode([in] BOOL value);
	[propget] HRESULT adjustInWindowImmediately([out, retval] BOOL* result);
	[propput] HRESULT adjustInWindowImmediately([in] BOOL value);
	[propget] HRESULT adjustInWindowIndividually([out, retval] BOOL* result);
	[propput] HRESULT adjustInWindowIndividually([in] BOOL value);
	[propget] HRESULT useStaticMaxInWindowSize([out, retval] BOOL* result);
	[propput] HRESULT useStaticMaxInWindowSize([in] BOOL value);
	[propget] HRESULT staticMaxInWindowSize([out, retval] ULONG* result);
	[propput] HRESULT staticMaxInWindowSize([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C6457FEE-E877-49B2-53CB-05156D0B0738),
	dual,
	pointer_default(unique)
]
interface IDenialOfServiceProtection915 : IDispatch
{
	[propget] HRESULT acceptDelayMs([out, retval] ULONG* result);
	[propput] HRESULT acceptDelayMs([in] ULONG value);
	[propget] HRESULT acceptDelayThreshold([out, retval] ULONG* result);
	[propput] HRESULT acceptDelayThreshold([in] ULONG value);
	[propget] HRESULT acceptDelayWindowSecs([out, retval] ULONG* result);
	[propput] HRESULT acceptDelayWindowSecs([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(38F85DC7-291D-5BD8-22FD-F18EF293A648),
	dual,
	pointer_default(unique)
]
interface IDomainOrder915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IDomainOrderEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IDomainOrderEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IDomainOrderEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IDomainOrderEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(9AC5CFCE-90DC-DF81-0F86-98AE8D840F58),
	dual,
	pointer_default(unique)
]
interface IDomainOrderEntry915 : IDispatch
{
	[propget] HRESULT domain([out, retval] BSTR* result);
	[propput] HRESULT domain([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(951137C6-7BCA-7B5E-DD28-096E138939A5),
	dual,
	pointer_default(unique)
]
interface IEncryptedVolume915 : IDispatch
{
	[propget] HRESULT volumeName([out, retval] BSTR* result);
	[propput] HRESULT volumeName([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT dataFile([out, retval] BSTR* result);
	[propput] HRESULT dataFile([in] BSTR value);
	[propget] HRESULT password([out, retval] IPassword915** result);
	[propget] HRESULT limitSize([out, retval] BOOL* result);
	[propput] HRESULT limitSize([in] BOOL value);
	[propget] HRESULT maxSizeMb([out, retval] ULONG* result);
	[propput] HRESULT maxSizeMb([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2DCB2EE6-AD40-5F58-C111-446FEC40883E),
	dual,
	pointer_default(unique)
]
interface IEncryptedVolumes915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IEncryptedVolume915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IEncryptedVolume915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IEncryptedVolume915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IEncryptedVolume915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(C8034939-BE7F-A786-2B29-042A3750D3DC),
	dual,
	pointer_default(unique)
]
interface IEncryption915 : IDispatch
{
	[propget] HRESULT chacha20_poly1305([out, retval] BOOL* result);
	[propput] HRESULT chacha20_poly1305([in] BOOL value);
	[propget] HRESULT aes256_gcm([out, retval] BOOL* result);
	[propput] HRESULT aes256_gcm([in] BOOL value);
	[propget] HRESULT aes128_gcm([out, retval] BOOL* result);
	[propput] HRESULT aes128_gcm([in] BOOL value);
	[propget] HRESULT aes256_ctr([out, retval] BOOL* result);
	[propput] HRESULT aes256_ctr([in] BOOL value);
	[propget] HRESULT aes192_ctr([out, retval] BOOL* result);
	[propput] HRESULT aes192_ctr([in] BOOL value);
	[propget] HRESULT aes128_ctr([out, retval] BOOL* result);
	[propput] HRESULT aes128_ctr([in] BOOL value);
	[propget] HRESULT alg_3des_ctr([out, retval] BOOL* result);
	[propput] HRESULT alg_3des_ctr([in] BOOL value);
	[propget] HRESULT aes256_cbc([out, retval] BOOL* result);
	[propput] HRESULT aes256_cbc([in] BOOL value);
	[propget] HRESULT aes192_cbc([out, retval] BOOL* result);
	[propput] HRESULT aes192_cbc([in] BOOL value);
	[propget] HRESULT aes128_cbc([out, retval] BOOL* result);
	[propput] HRESULT aes128_cbc([in] BOOL value);
	[propget] HRESULT alg_3des_cbc([out, retval] BOOL* result);
	[propput] HRESULT alg_3des_cbc([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(91DDACEE-DB45-D5AF-8093-BB4472338564),
	dual,
	pointer_default(unique)
]
interface IEnumerations915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	[propget] HRESULT AddressVer4Type([out, retval] IAddressVer4Type915** result);
	[propget] HRESULT AddressVer6Type([out, retval] IAddressVer6Type915** result);
	[propget] HRESULT AdsiEncryption([out, retval] IAdsiEncryption915** result);
	[propget] HRESULT AuthDisp([out, retval] IAuthDisp915** result);
	[propget] HRESULT AutoManageHostKeys([out, retval] IAutoManageHostKeys915** result);
	[propget] HRESULT AutomaticIpBlocking([out, retval] IAutomaticIpBlocking915** result);
	[propget] HRESULT AutomaticUpdatesType([out, retval] IAutomaticUpdatesType915** result);
	[propget] HRESULT BandwidthLimit([out, retval] IBandwidthLimit915** result);
	[propget] HRESULT BandwidthType([out, retval] IBandwidthType915** result);
	[propget] HRESULT CertAlgId([out, retval] ICertAlgId915** result);
	[propget] HRESULT CertificateFormat([out, retval] ICertificateFormat915** result);
	[propget] HRESULT CertificateType([out, retval] ICertificateType915** result);
	[propget] HRESULT ConsoleVersion([out, retval] IConsoleVersion915** result);
	[propget] HRESULT CsvColumnNames([out, retval] ICsvColumnNames915** result);
	[propget] HRESULT CustomSubsysAccess([out, retval] ICustomSubsysAccess915** result);
	[propget] HRESULT DayChoice([out, retval] IDayChoice915** result);
	[propget] HRESULT DefaultGlobalYesNo([out, retval] IDefaultGlobalYesNo915** result);
	[propget] HRESULT DefaultGroupYesNo([out, retval] IDefaultGroupYesNo915** result);
	[propget] HRESULT DefaultYesNo([out, retval] IDefaultYesNo915** result);
	[propget] HRESULT DirHandleMisuse([out, retval] IDirHandleMisuse915** result);
	[propget] HRESULT DisplayTimeType([out, retval] IDisplayTimeType915** result);
	[propget] HRESULT DuplicateTaskPolicy([out, retval] IDuplicateTaskPolicy915** result);
	[propget] HRESULT EmailSending([out, retval] IEmailSending915** result);
	[propget] HRESULT EmulateCheckFile([out, retval] IEmulateCheckFile915** result);
	[propget] HRESULT EmulateTextMode([out, retval] IEmulateTextMode915** result);
	[propget] HRESULT EmulateTextNewline([out, retval] IEmulateTextNewline915** result);
	[propget] HRESULT EventType([out, retval] IEventType915** result);
	[propget] HRESULT FileSharing([out, retval] IFileSharing915** result);
	[propget] HRESULT FileSharingBeh([out, retval] IFileSharingBeh915** result);
	[propget] HRESULT GitType([out, retval] IGitType915** result);
	[propget] HRESULT GlobalAuthMethod([out, retval] IGlobalAuthMethod915** result);
	[propget] HRESULT GlobalGssApiAuth([out, retval] IGlobalGssApiAuth915** result);
	[propget] HRESULT GlobalRequestCapable([out, retval] IGlobalRequestCapable915** result);
	[propget] HRESULT GroupType([out, retval] IGroupType915** result);
	[propget] HRESULT GssKex([out, retval] IGssKex915** result);
	[propget] HRESULT HostKeyType([out, retval] IHostKeyType915** result);
	[propget] HRESULT IfTemporaryProfileLoaded([out, retval] IIfTemporaryProfileLoaded915** result);
	[propget] HRESULT ImageFileFormat([out, retval] IImageFileFormat915** result);
	[propget] HRESULT InstanceType([out, retval] IInstanceType915** result);
	[propget] HRESULT InterfaceType([out, retval] IInterfaceType915** result);
	[propget] HRESULT IpListType([out, retval] IIpListType915** result);
	[propget] HRESULT IpVersionType([out, retval] IIpVersionType915** result);
	[propget] HRESULT IpVersionWN([out, retval] IIpVersionWN915** result);
	[propget] HRESULT JobObject([out, retval] IJobObject915** result);
	[propget] HRESULT KbdiTotpAlg([out, retval] IKbdiTotpAlg915** result);
	[propget] HRESULT KbdiTotpAuth([out, retval] IKbdiTotpAuth915** result);
	[propget] HRESULT KbdiTotpNumDigits([out, retval] IKbdiTotpNumDigits915** result);
	[propget] HRESULT KeypairAlgId([out, retval] IKeypairAlgId915** result);
	[propget] HRESULT KeypairFormat([out, retval] IKeypairFormat915** result);
	[propget] HRESULT LicenseType([out, retval] ILicenseType915** result);
	[propget] HRESULT LocationType([out, retval] ILocationType915** result);
	[propget] HRESULT LogArchivalPathType([out, retval] ILogArchivalPathType915** result);
	[propget] HRESULT LogFileWriteCloseTag([out, retval] ILogFileWriteCloseTag915** result);
	[propget] HRESULT LogLevel_EW([out, retval] ILogLevel_EW915** result);
	[propget] HRESULT LogLevel_EWI([out, retval] ILogLevel_EWI915** result);
	[propget] HRESULT LogLevel_EWIT([out, retval] ILogLevel_EWIT915** result);
	[propget] HRESULT LogLevel_EWITD([out, retval] ILogLevel_EWITD915** result);
	[propget] HRESULT LogonType([out, retval] ILogonType915** result);
	[propget] HRESULT LookupDirection([out, retval] ILookupDirection915** result);
	[propget] HRESULT NoFlowControl([out, retval] INoFlowControl915** result);
	[propget] HRESULT OmitDefaults([out, retval] IOmitDefaults915** result);
	[propget] HRESULT OnAccountInfoFailure([out, retval] IOnAccountInfoFailure915** result);
	[propget] HRESULT OnDestinationExist([out, retval] IOnDestinationExist915** result);
	[propget] HRESULT OnDnsResolvingError([out, retval] IOnDnsResolvingError915** result);
	[propget] HRESULT OnLogFileError([out, retval] IOnLogFileError915** result);
	[propget] HRESULT OnMoveCompletedUploadFailure([out, retval] IOnMoveCompletedUploadFailure915** result);
	[propget] HRESULT OnRememberedSharesListFailure([out, retval] IOnRememberedSharesListFailure915** result);
	[propget] HRESULT OnShareConnectFailure([out, retval] IOnShareConnectFailure915** result);
	[propget] HRESULT OnStatsQuotaReached([out, retval] IOnStatsQuotaReached915** result);
	[propget] HRESULT OverrideListeningInterface([out, retval] IOverrideListeningInterface915** result);
	[propget] HRESULT PermitMoveExist([out, retval] IPermitMoveExist915** result);
	[propget] HRESULT PopupMode([out, retval] IPopupMode915** result);
	[propget] HRESULT PriorityClass([out, retval] IPriorityClass915** result);
	[propget] HRESULT ProxyProtocol([out, retval] IProxyProtocol915** result);
	[propget] HRESULT ProxyType([out, retval] IProxyType915** result);
	[propget] HRESULT PublicKeyFormat([out, retval] IPublicKeyFormat915** result);
	[propget] HRESULT PwCacheAutoSave([out, retval] IPwCacheAutoSave915** result);
	[propget] HRESULT RemoteAdminAccessType([out, retval] IRemoteAdminAccessType915** result);
	[propget] HRESULT SendBannerMessage([out, retval] ISendBannerMessage915** result);
	[propget] HRESULT ServiceType([out, retval] IServiceType915** result);
	[propget] HRESULT SfsMountType([out, retval] ISfsMountType915** result);
	[propget] HRESULT SfsProviderAcl([out, retval] ISfsProviderAcl915** result);
	[propget] HRESULT SfsProviderOwnerGroup([out, retval] ISfsProviderOwnerGroup915** result);
	[propget] HRESULT ShellAccess([out, retval] IShellAccess915** result);
	[propget] HRESULT ShowDefaults([out, retval] IShowDefaults915** result);
	[propget] HRESULT SmtpAuthType([out, retval] ISmtpAuthType915** result);
	[propget] HRESULT TaskElevation([out, retval] ITaskElevation915** result);
	[propget] HRESULT TaskOutputCodePage([out, retval] ITaskOutputCodePage915** result);
	[propget] HRESULT TaskSecurityContext([out, retval] ITaskSecurityContext915** result);
	[propget] HRESULT TaskShutdownPolicy([out, retval] ITaskShutdownPolicy915** result);
	[propget] HRESULT TaskTriggerEvent([out, retval] ITaskTriggerEvent915** result);
	[propget] HRESULT TaskTriggerPeriod([out, retval] ITaskTriggerPeriod915** result);
	[propget] HRESULT TaskTriggerType([out, retval] ITaskTriggerType915** result);
	[propget] HRESULT TaskType([out, retval] ITaskType915** result);
	[propget] HRESULT TerminalCodePage([out, retval] ITerminalCodePage915** result);
	[propget] HRESULT TlsAssuranceDirect([out, retval] ITlsAssuranceDirect915** result);
	[propget] HRESULT TlsAssuranceRelay([out, retval] ITlsAssuranceRelay915** result);
	[propget] HRESULT UpdateDownloadMethod([out, retval] IUpdateDownloadMethod915** result);
	[propget] HRESULT UserAuthType([out, retval] IUserAuthType915** result);
	[propget] HRESULT VirtAcctSecurityContext([out, retval] IVirtAcctSecurityContext915** result);
	[propget] HRESULT WhitelistAddressType([out, retval] IWhitelistAddressType915** result);
	[propget] HRESULT WinAccountType([out, retval] IWinAccountType915** result);
	[propget] HRESULT WindowsFirewallSetting([out, retval] IWindowsFirewallSetting915** result);
};

[
	object,
	uuid(ABA4A057-6595-006C-E25F-2897933233A3),
	dual,
	pointer_default(unique)
]
interface IFileShare915 : IDispatch
{
	[propget] HRESULT remoteDir([out, retval] BSTR* result);
	[propput] HRESULT remoteDir([in] BSTR value);
	[propget] HRESULT specifyCredentials([out, retval] BOOL* result);
	[propput] HRESULT specifyCredentials([in] BOOL value);
	[propget] HRESULT userName([out, retval] BSTR* result);
	[propput] HRESULT userName([in] BSTR value);
	[propget] HRESULT password([out, retval] IPassword915** result);
	[propget] HRESULT mapToLocalDrive([out, retval] BOOL* result);
	[propput] HRESULT mapToLocalDrive([in] BOOL value);
	[propget] HRESULT localDrive([out, retval] BSTR* result);
	[propput] HRESULT localDrive([in] BSTR value);
	[propget] HRESULT mustUseThisDrive([out, retval] BOOL* result);
	[propput] HRESULT mustUseThisDrive([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(4AFD2AFA-506F-84CF-3A29-003EED9DB66F),
	dual,
	pointer_default(unique)
]
interface IFileShares915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IFileShare915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IFileShare915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IFileShare915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IFileShare915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IFileShare915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IFileShare915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IFileShare915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IFileShare915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IFileShare915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IFileShare915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IFileShare915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IFileShare915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(F8627A4D-5B3C-CF33-9982-2A1C97F3E35E),
	dual,
	pointer_default(unique)
]
interface IFileTransferSettings915 : IDispatch
{
	[propget] HRESULT omitRelative([out, retval] BOOL* result);
	[propput] HRESULT omitRelative([in] BOOL value);
	[propget] HRESULT limitToSftp3([out, retval] BOOL* result);
	[propput] HRESULT limitToSftp3([in] BOOL value);
	[propget] HRESULT posixPermDir([out, retval] BSTR* result);
	[propput] HRESULT posixPermDir([in] BSTR value);
	[propget] HRESULT posixPermFile([out, retval] BSTR* result);
	[propput] HRESULT posixPermFile([in] BSTR value);
	[propget] HRESULT useBvShellWithWinScp([out, retval] BOOL* result);
	[propput] HRESULT useBvShellWithWinScp([in] BOOL value);
	[propget] HRESULT fileSharingBeh([out, retval] FileSharingBeh915* result);
	[propput] HRESULT fileSharingBeh([in] FileSharingBeh915 value);
	[propget] HRESULT fileSharingUl([out, retval] FileSharing915* result);
	[propput] HRESULT fileSharingUl([in] FileSharing915 value);
	[propget] HRESULT fileSharingDl([out, retval] FileSharing915* result);
	[propput] HRESULT fileSharingDl([in] FileSharing915 value);
	[propget] HRESULT maxPathLength([out, retval] ULONG* result);
	[propput] HRESULT maxPathLength([in] ULONG value);
	[propget] HRESULT allowAltStreams([out, retval] BOOL* result);
	[propput] HRESULT allowAltStreams([in] BOOL value);
	[propget] HRESULT allowUnsafeNames([out, retval] BOOL* result);
	[propput] HRESULT allowUnsafeNames([in] BOOL value);
	[propget] HRESULT allowUnsafeOnUploadCmd([out, retval] BOOL* result);
	[propput] HRESULT allowUnsafeOnUploadCmd([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(59F20971-BC32-EFA7-FB77-BCDD29E3AD99),
	dual,
	pointer_default(unique)
]
interface IFollowerSettings915 : IDispatch
{
	[propget] HRESULT hostkeys([out, retval] IHostKeys915** result);
	[propget] HRESULT host([out, retval] BSTR* result);
	[propput] HRESULT host([in] BSTR value);
	[propget] HRESULT port([out, retval] ULONG* result);
	[propput] HRESULT port([in] ULONG value);
	[propget] HRESULT connectIntf([out, retval] BSTR* result);
	[propput] HRESULT connectIntf([in] BSTR value);
	[propget] HRESULT allowSshRsa([out, retval] BOOL* result);
	[propput] HRESULT allowSshRsa([in] BOOL value);
	[propget] HRESULT passwordFollower([out, retval] IPassword915** result);
	[propget] HRESULT enableObfsc([out, retval] BOOL* result);
	[propput] HRESULT enableObfsc([in] BOOL value);
	[propget] HRESULT obfsc([out, retval] IPassword915** result);
	[propget] HRESULT syncHostKeys([out, retval] BOOL* result);
	[propput] HRESULT syncHostKeys([in] BOOL value);
	[propget] HRESULT syncCertificates([out, retval] BOOL* result);
	[propput] HRESULT syncCertificates([in] BOOL value);
	[propget] HRESULT syncSettings([out, retval] BOOL* result);
	[propput] HRESULT syncSettings([in] BOOL value);
	[propget] HRESULT syncPwdCache([out, retval] BOOL* result);
	[propput] HRESULT syncPwdCache([in] BOOL value);
	[propget] HRESULT syncActCode([out, retval] BOOL* result);
	[propput] HRESULT syncActCode([in] BOOL value);
	[propget] HRESULT keepLocalBindings([out, retval] BOOL* result);
	[propput] HRESULT keepLocalBindings([in] BOOL value);
	[propget] HRESULT keepLocalFirewallStgs([out, retval] BOOL* result);
	[propput] HRESULT keepLocalFirewallStgs([in] BOOL value);
	[propget] HRESULT keepLocalLoggingStgs([out, retval] BOOL* result);
	[propput] HRESULT keepLocalLoggingStgs([in] BOOL value);
	[propget] HRESULT autoManageHostKeys([out, retval] AutoManageHostKeys915* result);
	[propput] HRESULT autoManageHostKeys([in] AutoManageHostKeys915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(8A94C32B-22B3-2B2A-C378-F6BDDB7E52F2),
	dual,
	pointer_default(unique)
]
interface IGlobalKbdiTotp915 : IDispatch
{
	[propget] HRESULT totpMethod([out, retval] GlobalAuthMethod915* result);
	[propput] HRESULT totpMethod([in] GlobalAuthMethod915 value);
	[propget] HRESULT alg([out, retval] KbdiTotpAlg915* result);
	[propput] HRESULT alg([in] KbdiTotpAlg915 value);
	[propget] HRESULT numDigits([out, retval] KbdiTotpNumDigits915* result);
	[propput] HRESULT numDigits([in] KbdiTotpNumDigits915 value);
	[propget] HRESULT timeStepSizeInSecs([out, retval] ULONG* result);
	[propput] HRESULT timeStepSizeInSecs([in] ULONG value);
	[propget] HRESULT twoDCodeIssuer([out, retval] BSTR* result);
	[propput] HRESULT twoDCodeIssuer([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(F8AAA43D-E226-7C24-AE46-0CAE63704C4C),
	dual,
	pointer_default(unique)
]
interface IGroup915 : IDispatch
{
	[propget] HRESULT groupType([out, retval] GroupType915* result);
	[propput] HRESULT groupType([in] GroupType915 value);
	[propget] HRESULT winDomain([out, retval] BSTR* result);
	[propput] HRESULT winDomain([in] BSTR value);
	[propget] HRESULT group([out, retval] BSTR* result);
	[propput] HRESULT group([in] BSTR value);
	[propget] HRESULT comment([out, retval] BSTR* result);
	[propput] HRESULT comment([in] BSTR value);
	[propget] HRESULT loginAllowed([out, retval] BOOL* result);
	[propput] HRESULT loginAllowed([in] BOOL value);
	[propget] HRESULT limits([out, retval] IGroupLimitsAndQuotas915** result);
	[propget] HRESULT clientAddresses([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT auth([out, retval] IGroupAuthentication915** result);
	[propget] HRESULT remoteAdminAccess([out, retval] IRemoteAdminAccess915** result);
	[propget] HRESULT connection([out, retval] IGroupConnectionSetup915** result);
	[propget] HRESULT session([out, retval] IGroupSessionSetup915** result);
	[propget] HRESULT term([out, retval] IGroupTerminalAndExec915** result);
	[propget] HRESULT xfer([out, retval] IGroupFileTransfer915** result);
	[propget] HRESULT fwding([out, retval] IGroupForwarding915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2113957E-3D87-E4D0-206C-279339625DBA),
	dual,
	pointer_default(unique)
]
interface IGroupAuthentication915 : IDispatch
{
	[propget] HRESULT passwordAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT passwordAuth([in] AuthDisp915 value);
	[propget] HRESULT publicKeyAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT publicKeyAuth([in] AuthDisp915 value);
	[propget] HRESULT allowKeyManagement([out, retval] BOOL* result);
	[propput] HRESULT allowKeyManagement([in] BOOL value);
	[propget] HRESULT keys([out, retval] IClientKeys915** result);
	[propget] HRESULT totp([out, retval] IGroupKbdiTotp915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(52C1D0B8-7629-2FAD-08B2-1E781A58049B),
	dual,
	pointer_default(unique)
]
interface IGroupConnectionSetup915 : IDispatch
{
	[propget] HRESULT startReexchange([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT startReexchange([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT useGlobalKeepAlive([out, retval] BOOL* result);
	[propput] HRESULT useGlobalKeepAlive([in] BOOL value);
	[propget] HRESULT keepAliveTimeout([out, retval] ULONG* result);
	[propput] HRESULT keepAliveTimeout([in] ULONG value);
	[propget] HRESULT useGlobalConnTimeout([out, retval] BOOL* result);
	[propput] HRESULT useGlobalConnTimeout([in] BOOL value);
	[propget] HRESULT connectionTimeout([out, retval] ULONG* result);
	[propput] HRESULT connectionTimeout([in] ULONG value);
	[propget] HRESULT onLogonCmd([out, retval] IConnOnLogonCommand915** result);
	[propget] HRESULT onLogoffCmd([out, retval] IConnOnLogoffCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(177AEEBE-E612-4725-49D1-C2090C376C9A),
	dual,
	pointer_default(unique)
]
interface IGroupFileTransfer915 : IDispatch
{
	[propget] HRESULT permitScp([out, retval] BOOL* result);
	[propput] HRESULT permitScp([in] BOOL value);
	[propget] HRESULT permitSftp([out, retval] BOOL* result);
	[propput] HRESULT permitSftp([in] BOOL value);
	[propget] HRESULT permitFtps([out, retval] BOOL* result);
	[propput] HRESULT permitFtps([in] BOOL value);
	[propget] HRESULT loadProfileForFileXfer([out, retval] BOOL* result);
	[propput] HRESULT loadProfileForFileXfer([in] BOOL value);
	[propget] HRESULT omitRelative([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT omitRelative([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT limitToSftp3([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT limitToSftp3([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT useDefaultPosixPerm([out, retval] BOOL* result);
	[propput] HRESULT useDefaultPosixPerm([in] BOOL value);
	[propget] HRESULT posixPermDir([out, retval] BSTR* result);
	[propput] HRESULT posixPermDir([in] BSTR value);
	[propget] HRESULT posixPermFile([out, retval] BSTR* result);
	[propput] HRESULT posixPermFile([in] BSTR value);
	[propget] HRESULT useBvShellWithWinScp([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT useBvShellWithWinScp([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT displayTime([out, retval] DisplayTimeType915* result);
	[propput] HRESULT displayTime([in] DisplayTimeType915 value);
	[propget] HRESULT useDefaultMaxPathLength([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxPathLength([in] BOOL value);
	[propget] HRESULT maxPathLength([out, retval] ULONG* result);
	[propput] HRESULT maxPathLength([in] ULONG value);
	[propget] HRESULT allowAltStreams([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowAltStreams([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT allowUnsafeNames([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowUnsafeNames([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT inheritAllMountPoints([out, retval] BOOL* result);
	[propput] HRESULT inheritAllMountPoints([in] BOOL value);
	[propget] HRESULT mountPoints([out, retval] ISfsMountPoints915** result);
	[propget] HRESULT sfsHomeDir([out, retval] BSTR* result);
	[propput] HRESULT sfsHomeDir([in] BSTR value);
	[propget] HRESULT createSfsHomeDir([out, retval] BOOL* result);
	[propput] HRESULT createSfsHomeDir([in] BOOL value);
	[propget] HRESULT delIncompleteUploads([out, retval] BOOL* result);
	[propput] HRESULT delIncompleteUploads([in] BOOL value);
	[propget] HRESULT moveCompletedUploads([out, retval] IMoveCompletedUploads915** result);
	[propget] HRESULT onUploadCmd([out, retval] IConnOnUploadCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(E639CCAE-E843-541E-7E8B-BA789E37C113),
	dual,
	pointer_default(unique)
]
interface IGroupForwarding915 : IDispatch
{
	[propget] HRESULT permitC2S([out, retval] BOOL* result);
	[propput] HRESULT permitC2S([in] BOOL value);
	[propget] HRESULT permitS2C([out, retval] BOOL* result);
	[propput] HRESULT permitS2C([in] BOOL value);
	[propget] HRESULT connectRules([out, retval] IConnectRulesWithDefault915** result);
	[propget] HRESULT listenRules([out, retval] IListeningRules915** result);
	[propget] HRESULT srvSideC2S([out, retval] ISrvSideC2SRules915** result);
	[propget] HRESULT srvSideS2C([out, retval] ISrvSideS2CRules915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(B1702C6C-1887-96DB-1F81-06C4613D1957),
	dual,
	pointer_default(unique)
]
interface IGroupKbdiTotp915 : IDispatch
{
	[propget] HRESULT totpAuth([out, retval] KbdiTotpAuth915* result);
	[propput] HRESULT totpAuth([in] KbdiTotpAuth915 value);
	[propget] HRESULT showAdvancedTotp([out, retval] BOOL* result);
	[propput] HRESULT showAdvancedTotp([in] BOOL value);
	[propget] HRESULT alg([out, retval] KbdiTotpAlg915* result);
	[propput] HRESULT alg([in] KbdiTotpAlg915 value);
	[propget] HRESULT numDigits([out, retval] KbdiTotpNumDigits915* result);
	[propput] HRESULT numDigits([in] KbdiTotpNumDigits915 value);
	[propget] HRESULT useDefaultTimeStepSize([out, retval] BOOL* result);
	[propput] HRESULT useDefaultTimeStepSize([in] BOOL value);
	[propget] HRESULT timeStepSizeInSecs([out, retval] ULONG* result);
	[propput] HRESULT timeStepSizeInSecs([in] ULONG value);
	[propget] HRESULT maxTimeStepsFwd([out, retval] ULONG* result);
	[propput] HRESULT maxTimeStepsFwd([in] ULONG value);
	[propget] HRESULT maxTimeStepsBwd([out, retval] ULONG* result);
	[propput] HRESULT maxTimeStepsBwd([in] ULONG value);
	[propget] HRESULT secretKey([out, retval] ISecretKey915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2D47CF95-8FFE-8F9B-88F5-F7753646A0DF),
	dual,
	pointer_default(unique)
]
interface IGroupLimitsAndQuotas915 : IDispatch
{
	[propget] HRESULT maxConnections([out, retval] ULONG* result);
	[propput] HRESULT maxConnections([in] ULONG value);
	[propget] HRESULT maxConnWithProcesses([out, retval] ULONG* result);
	[propput] HRESULT maxConnWithProcesses([in] ULONG value);
	[propget] HRESULT bandwidthType([out, retval] BandwidthType915* result);
	[propput] HRESULT bandwidthType([in] BandwidthType915 value);
	[propget] HRESULT permanentBandwidths([out, retval] IPermanentBandwidths915** result);
	[propget] HRESULT monthlyQuotas([out, retval] IStatsQuotas915** result);
	[propget] HRESULT dailyQuotas([out, retval] IStatsQuotas915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(BC167735-205F-D81F-0C47-64C01200BA23),
	dual,
	pointer_default(unique)
]
interface IGroupSessionSetup915 : IDispatch
{
	[propget] HRESULT logonType([out, retval] LogonType915* result);
	[propput] HRESULT logonType([in] LogonType915 value);
	[propget] HRESULT onAccountInfoFailure([out, retval] OnAccountInfoFailure915* result);
	[propput] HRESULT onAccountInfoFailure([in] OnAccountInfoFailure915 value);
	[propget] HRESULT ifTemporaryProfileLoaded([out, retval] IfTemporaryProfileLoaded915* result);
	[propput] HRESULT ifTemporaryProfileLoaded([in] IfTemporaryProfileLoaded915 value);
	[propget] HRESULT useGlobalWinSessionStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalWinSessionStgs([in] BOOL value);
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareGroupSettings915** result);
	[propget] HRESULT shares([out, retval] IFileShares915** result);
	[propget] HRESULT windowsOnLogonCmd([out, retval] IWinOnLogonCommand915** result);
	[propget] HRESULT windowsOnLogoffCmd([out, retval] IWinOnLogoffCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(5F2D71A6-7AFF-D1F8-B7D9-253AD1BFEBF7),
	dual,
	pointer_default(unique)
]
interface IGroupTerminalAndExec915 : IDispatch
{
	[propget] HRESULT shellAccessType([out, retval] ShellAccess915* result);
	[propput] HRESULT shellAccessType([in] ShellAccess915 value);
	[propget] HRESULT shellCustom([out, retval] IGroupTerminalShellSettings915** result);
	[propget] HRESULT bashExePath([out, retval] BSTR* result);
	[propput] HRESULT bashExePath([in] BSTR value);
	[propget] HRESULT addBashDirToPath([out, retval] BOOL* result);
	[propput] HRESULT addBashDirToPath([in] BOOL value);
	[propget] HRESULT gitType([out, retval] GitType915* result);
	[propput] HRESULT gitType([in] GitType915 value);
	[propget] HRESULT gitBinDir([out, retval] BSTR* result);
	[propput] HRESULT gitBinDir([in] BSTR value);
	[propget] HRESULT gitRepoDir([out, retval] BSTR* result);
	[propput] HRESULT gitRepoDir([in] BSTR value);
	[propget] HRESULT telnetAddr([out, retval] BSTR* result);
	[propput] HRESULT telnetAddr([in] BSTR value);
	[propget] HRESULT telnetPort([out, retval] ULONG* result);
	[propput] HRESULT telnetPort([in] ULONG value);
	[propget] HRESULT initData([out, retval] BSTR* result);
	[propput] HRESULT initData([in] BSTR value);
	[propget] HRESULT loadProfileForBvShell([out, retval] BOOL* result);
	[propput] HRESULT loadProfileForBvShell([in] BOOL value);
	[propget] HRESULT allowJobBreakaway([out, retval] BOOL* result);
	[propput] HRESULT allowJobBreakaway([in] BOOL value);
	[propget] HRESULT terminalCodePage([out, retval] TerminalCodePage915* result);
	[propput] HRESULT terminalCodePage([in] TerminalCodePage915 value);
	[propget] HRESULT initDir([out, retval] BSTR* result);
	[propput] HRESULT initDir([in] BSTR value);
	[propget] HRESULT permitInitDirFallback([out, retval] BOOL* result);
	[propput] HRESULT permitInitDirFallback([in] BOOL value);
	[propget] HRESULT permitEnvVar([out, retval] BOOL* result);
	[propput] HRESULT permitEnvVar([in] BOOL value);
	[propget] HRESULT allowAgentFwdCygwin([out, retval] BOOL* result);
	[propput] HRESULT allowAgentFwdCygwin([in] BOOL value);
	[propget] HRESULT allowAgentFwdPutty([out, retval] BOOL* result);
	[propput] HRESULT allowAgentFwdPutty([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(826A4480-970F-89AA-ED80-9AEE5EA9DC7D),
	dual,
	pointer_default(unique)
]
interface IGroupTerminalShellSettings915 : IDispatch
{
	[propget] HRESULT permitTerminalShell([out, retval] BOOL* result);
	[propput] HRESULT permitTerminalShell([in] BOOL value);
	[propget] HRESULT terminalShell([out, retval] BSTR* result);
	[propput] HRESULT terminalShell([in] BSTR value);
	[propget] HRESULT permitExecRequests([out, retval] BOOL* result);
	[propput] HRESULT permitExecRequests([in] BOOL value);
	[propget] HRESULT execReqPrefix([out, retval] BSTR* result);
	[propput] HRESULT execReqPrefix([in] BSTR value);
	[propget] HRESULT spaceAfterPrefix([out, retval] BOOL* result);
	[propput] HRESULT spaceAfterPrefix([in] BOOL value);
	[propget] HRESULT convertGitParams([out, retval] BOOL* result);
	[propput] HRESULT convertGitParams([in] BOOL value);
	[propget] HRESULT base64EncodeCmd([out, retval] BOOL* result);
	[propput] HRESULT base64EncodeCmd([in] BOOL value);
	[propget] HRESULT doubleQuoteCmd([out, retval] BOOL* result);
	[propput] HRESULT doubleQuoteCmd([in] BOOL value);
	[propget] HRESULT forceDumbPty([out, retval] BOOL* result);
	[propput] HRESULT forceDumbPty([in] BOOL value);
	[propget] HRESULT customSubsysAccess([out, retval] CustomSubsysAccess915* result);
	[propput] HRESULT customSubsysAccess([in] CustomSubsysAccess915 value);
	[propget] HRESULT allowSubsystems([out, retval] BSTR* result);
	[propput] HRESULT allowSubsystems([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(E63F8B05-FDA3-437E-98B5-C4752E4B903D),
	dual,
	pointer_default(unique)
]
interface IHealthMonitoring915 : IDispatch
{
	[propget] HRESULT monitorCpu([out, retval] BOOL* result);
	[propput] HRESULT monitorCpu([in] BOOL value);
	[propget] HRESULT cpuThreshold([out, retval] ULONG* result);
	[propput] HRESULT cpuThreshold([in] ULONG value);
	[propget] HRESULT monitorMemory([out, retval] BOOL* result);
	[propput] HRESULT monitorMemory([in] BOOL value);
	[propget] HRESULT memoryThreshold([out, retval] ULONG* result);
	[propput] HRESULT memoryThreshold([in] ULONG value);
	[propget] HRESULT monitorVolumes([out, retval] BOOL* result);
	[propput] HRESULT monitorVolumes([in] BOOL value);
	[propget] HRESULT instVolThresholdMb([out, retval] ULONG* result);
	[propput] HRESULT instVolThresholdMb([in] ULONG value);
	[propget] HRESULT volumes([out, retval] IMonitoredVolumes915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(A0517953-E54F-8F4C-2877-1EC203989C2D),
	dual,
	pointer_default(unique)
]
interface IInstanceTypeSettings915 : IDispatch
{
	[propget] HRESULT instanceType([out, retval] InstanceType915* result);
	[propput] HRESULT instanceType([in] InstanceType915 value);
	[propget] HRESULT rank([out, retval] ULONG* result);
	[propput] HRESULT rank([in] ULONG value);
	[propget] HRESULT pwdInstance([out, retval] IPassword915** result);
	[propget] HRESULT master([out, retval] IMasterSettings915** result);
	[propget] HRESULT follower([out, retval] IFollowerSettings915** result);
	[propget] HRESULT update([out, retval] IUpdateSettings915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Load();
	HRESULT TryLoad([out, retval] ILoadResult915 * * result);
	HRESULT LoadFromFile([in] BSTR fileName);
	HRESULT TryLoadFromFile([in] BSTR fileName, [out, retval] ILoadResult915 * * result);
	HRESULT Save();
	HRESULT SaveEx([in] BSTR pass);
	HRESULT SaveToFile([in] BSTR fileName);
	HRESULT Backup();
	HRESULT Lock();
	HRESULT Unlock();

	HRESULT Import([in] BSTR settings);

};

[
	object,
	uuid(AFE8E494-F106-DA02-70AB-0DE89536E429),
	dual,
	pointer_default(unique)
]
interface IInterfaceRule915 : IDispatch
{
	[propget] HRESULT intfType([out, retval] InterfaceType915* result);
	[propput] HRESULT intfType([in] InterfaceType915 value);
	[propget] HRESULT ipv4range([out, retval] BOOL* result);
	[propput] HRESULT ipv4range([in] BOOL value);
	[propget] HRESULT ipv4([out, retval] BSTR* result);
	[propput] HRESULT ipv4([in] BSTR value);
	[propget] HRESULT ipv4start([out, retval] BSTR* result);
	[propput] HRESULT ipv4start([in] BSTR value);
	[propget] HRESULT ipv4end([out, retval] BSTR* result);
	[propput] HRESULT ipv4end([in] BSTR value);
	[propget] HRESULT ipv6range([out, retval] BOOL* result);
	[propput] HRESULT ipv6range([in] BOOL value);
	[propget] HRESULT ipv6([out, retval] BSTR* result);
	[propput] HRESULT ipv6([in] BSTR value);
	[propget] HRESULT ipv6start([out, retval] BSTR* result);
	[propput] HRESULT ipv6start([in] BSTR value);
	[propget] HRESULT ipv6end([out, retval] BSTR* result);
	[propput] HRESULT ipv6end([in] BSTR value);
	[propget] HRESULT freeForm([out, retval] BSTR* result);
	[propput] HRESULT freeForm([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C801E4DF-9AFD-0C7F-D234-B7B46A367300),
	dual,
	pointer_default(unique)
]
interface IIpBlocking915 : IDispatch
{
	[propget] HRESULT type([out, retval] AutomaticIpBlocking915* result);
	[propput] HRESULT type([in] AutomaticIpBlocking915 value);
	[propget] HRESULT windowSecs([out, retval] ULONG* result);
	[propput] HRESULT windowSecs([in] ULONG value);
	[propget] HRESULT penaltyThreshold([out, retval] ULONG* result);
	[propput] HRESULT penaltyThreshold([in] ULONG value);
	[propget] HRESULT totalThreshold([out, retval] ULONG* result);
	[propput] HRESULT totalThreshold([in] ULONG value);
	[propget] HRESULT lockoutMins([out, retval] ULONG* result);
	[propput] HRESULT lockoutMins([in] ULONG value);
	[propget] HRESULT subnetBitsIPv4([out, retval] ULONG* result);
	[propput] HRESULT subnetBitsIPv4([in] ULONG value);
	[propget] HRESULT subnetBitsIPv6([out, retval] ULONG* result);
	[propput] HRESULT subnetBitsIPv6([in] ULONG value);
	[propget] HRESULT penalizeNoAuth([out, retval] BOOL* result);
	[propput] HRESULT penalizeNoAuth([in] BOOL value);
	[propget] HRESULT userNameBlacklist([out, retval] IUserNameBlacklist915** result);
	[propget] HRESULT enablePwAuthWhitelist([out, retval] BOOL* result);
	[propput] HRESULT enablePwAuthWhitelist([in] BOOL value);
	[propget] HRESULT pwAuthWhitelist([out, retval] IPwAuthWhitelist915** result);
	[propget] HRESULT autoWhitelistVirtAccounts([out, retval] BOOL* result);
	[propput] HRESULT autoWhitelistVirtAccounts([in] BOOL value);
	[propget] HRESULT ipWhitelist([out, retval] IWhitelistedAddresses915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(CA23DE29-2CF6-B7E1-3AE6-16BCF9D37404),
	dual,
	pointer_default(unique)
]
interface IKex915 : IDispatch
{
	[propget] HRESULT curve25519([out, retval] BOOL* result);
	[propput] HRESULT curve25519([in] BOOL value);
	[propget] HRESULT ecdhSecp256k1([out, retval] BOOL* result);
	[propput] HRESULT ecdhSecp256k1([in] BOOL value);
	[propget] HRESULT ecdhNistp256([out, retval] BOOL* result);
	[propput] HRESULT ecdhNistp256([in] BOOL value);
	[propget] HRESULT ecdhNistp384([out, retval] BOOL* result);
	[propput] HRESULT ecdhNistp384([in] BOOL value);
	[propget] HRESULT ecdhNistp521([out, retval] BOOL* result);
	[propput] HRESULT ecdhNistp521([in] BOOL value);
	[propget] HRESULT dhGexMinBits([out, retval] ULONG* result);
	[propput] HRESULT dhGexMinBits([in] ULONG value);
	[propget] HRESULT dhGexMaxBits([out, retval] ULONG* result);
	[propput] HRESULT dhGexMaxBits([in] ULONG value);
	[propget] HRESULT dhGexSha256([out, retval] BOOL* result);
	[propput] HRESULT dhGexSha256([in] BOOL value);
	[propget] HRESULT dhGexSha1([out, retval] BOOL* result);
	[propput] HRESULT dhGexSha1([in] BOOL value);
	[propget] HRESULT dhG16Sha512([out, retval] BOOL* result);
	[propput] HRESULT dhG16Sha512([in] BOOL value);
	[propget] HRESULT dhG15Sha512([out, retval] BOOL* result);
	[propput] HRESULT dhG15Sha512([in] BOOL value);
	[propget] HRESULT dhG14Sha256([out, retval] BOOL* result);
	[propput] HRESULT dhG14Sha256([in] BOOL value);
	[propget] HRESULT dhG14Sha1([out, retval] BOOL* result);
	[propput] HRESULT dhG14Sha1([in] BOOL value);
	[propget] HRESULT dhG1Sha1([out, retval] BOOL* result);
	[propput] HRESULT dhG1Sha1([in] BOOL value);
	[propget] HRESULT gssGexSha1Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssGexSha1Krb5([in] BOOL value);
	[propget] HRESULT gssG16Sha512Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssG16Sha512Krb5([in] BOOL value);
	[propget] HRESULT gssG15Sha512Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssG15Sha512Krb5([in] BOOL value);
	[propget] HRESULT gssG14Sha256Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssG14Sha256Krb5([in] BOOL value);
	[propget] HRESULT gssG14Sha1Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssG14Sha1Krb5([in] BOOL value);
	[propget] HRESULT gssG1Sha1Krb5([out, retval] BOOL* result);
	[propput] HRESULT gssG1Sha1Krb5([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(DCCF31BC-A782-19B9-2593-1E43A04B4969),
	dual,
	pointer_default(unique)
]
interface IListenInstructions915 : IDispatch
{
	[propget] HRESULT allowListen([out, retval] BOOL* result);
	[propput] HRESULT allowListen([in] BOOL value);
	[propget] HRESULT overrideListenInterface([out, retval] OverrideListeningInterface915* result);
	[propput] HRESULT overrideListenInterface([in] OverrideListeningInterface915 value);
	[propget] HRESULT listenInterface([out, retval] BSTR* result);
	[propput] HRESULT listenInterface([in] BSTR value);
	[propget] HRESULT port([out, retval] ULONG* result);
	[propput] HRESULT port([in] ULONG value);
	[propget] HRESULT acceptRules([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(11E00DD5-69DE-CEE9-92F4-0DA021027D1B),
	dual,
	pointer_default(unique)
]
interface IListenRule915 : IDispatch
{
	[propget] HRESULT intfRule([out, retval] IInterfaceRule915** result);
	[propget] HRESULT portRangeRule([out, retval] IPortRangeRule915** result);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT instr([out, retval] IListenInstructions915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(1FE3C558-17EF-ADF0-094C-EB503EC94EE3),
	dual,
	pointer_default(unique)
]
interface IListeningRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IListenRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IListenRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IListenRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IListenRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IListenRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IListenRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IListenRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IListenRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IListenRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IListenRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IListenRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IListenRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(9700B1E5-0C34-7E25-122D-88B31FBC90E4),
	dual,
	pointer_default(unique)
]
interface ILogging915 : IDispatch
{
	[propget] HRESULT monitorIpWhitelist([out, retval] IWhitelistedAddresses915** result);
	[propget] HRESULT healthMonitoring([out, retval] IHealthMonitoring915** result);
	[propget] HRESULT logToEventLog([out, retval] BOOL* result);
	[propput] HRESULT logToEventLog([in] BOOL value);
	[propget] HRESULT eventLogLevel([out, retval] LogLevel_EWI915* result);
	[propput] HRESULT eventLogLevel([in] LogLevel_EWI915 value);
	[propget] HRESULT eventLogEventList([out, retval] IEventList915** result);
	[propget] HRESULT logToFile([out, retval] BOOL* result);
	[propput] HRESULT logToFile([in] BOOL value);
	[propget] HRESULT logFileLevel([out, retval] LogLevel_EWIT915* result);
	[propput] HRESULT logFileLevel([in] LogLevel_EWIT915 value);
	[propget] HRESULT logFileEventList([out, retval] IEventList915** result);
	[propget] HRESULT logFileDir([out, retval] BSTR* result);
	[propput] HRESULT logFileDir([in] BSTR value);
	[propget] HRESULT logFileRestrictedAccess([out, retval] BOOL* result);
	[propput] HRESULT logFileRestrictedAccess([in] BOOL value);
	[propget] HRESULT logFileWriteCloseTag([out, retval] LogFileWriteCloseTag915* result);
	[propput] HRESULT logFileWriteCloseTag([in] LogFileWriteCloseTag915 value);
	[propget] HRESULT logFileRolloverBySize([out, retval] BOOL* result);
	[propput] HRESULT logFileRolloverBySize([in] BOOL value);
	[propget] HRESULT logFileRolloverMb([out, retval] ULONG* result);
	[propput] HRESULT logFileRolloverMb([in] ULONG value);
	[propget] HRESULT logFileRolloverByTime([out, retval] BOOL* result);
	[propput] HRESULT logFileRolloverByTime([in] BOOL value);
	[propget] HRESULT logFileRolloverBaseHr([out, retval] BYTE* result);
	[propput] HRESULT logFileRolloverBaseHr([in] BYTE value);
	[propget] HRESULT logFileRolloverRepeatHr([out, retval] BYTE* result);
	[propput] HRESULT logFileRolloverRepeatHr([in] BYTE value);
	[propget] HRESULT onLogFileError([out, retval] OnLogFileError915* result);
	[propput] HRESULT onLogFileError([in] OnLogFileError915 value);
	[propget] HRESULT severitySuppression([out, retval] ULONG* result);
	[propput] HRESULT severitySuppression([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(633CA29A-D11C-F61F-3D39-305F79AA20EB),
	dual,
	pointer_default(unique)
]
interface IMac915 : IDispatch
{
	[propget] HRESULT hmac_sha2_256_etm([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha2_256_etm([in] BOOL value);
	[propget] HRESULT hmac_sha2_512_etm([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha2_512_etm([in] BOOL value);
	[propget] HRESULT hmac_sha1_etm([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha1_etm([in] BOOL value);
	[propget] HRESULT hmac_sha2_256([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha2_256([in] BOOL value);
	[propget] HRESULT hmac_sha2_512([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha2_512([in] BOOL value);
	[propget] HRESULT hmac_sha1([out, retval] BOOL* result);
	[propput] HRESULT hmac_sha1([in] BOOL value);
	[propget] HRESULT hmac_md5([out, retval] BOOL* result);
	[propput] HRESULT hmac_md5([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2ACDD6B6-652B-22D1-4A61-9A0940C4A0E3),
	dual,
	pointer_default(unique)
]
interface IMaintenancePeriod915 : IDispatch
{
	[propget] HRESULT sunday([out, retval] BOOL* result);
	[propput] HRESULT sunday([in] BOOL value);
	[propget] HRESULT monday([out, retval] BOOL* result);
	[propput] HRESULT monday([in] BOOL value);
	[propget] HRESULT tuesday([out, retval] BOOL* result);
	[propput] HRESULT tuesday([in] BOOL value);
	[propget] HRESULT wednesday([out, retval] BOOL* result);
	[propput] HRESULT wednesday([in] BOOL value);
	[propget] HRESULT thursday([out, retval] BOOL* result);
	[propput] HRESULT thursday([in] BOOL value);
	[propget] HRESULT friday([out, retval] BOOL* result);
	[propput] HRESULT friday([in] BOOL value);
	[propget] HRESULT saturday([out, retval] BOOL* result);
	[propput] HRESULT saturday([in] BOOL value);
	[propget] HRESULT startTime([out, retval] BSTR* result);
	[propput] HRESULT startTime([in] BSTR value);
	[propget] HRESULT endTime([out, retval] BSTR* result);
	[propput] HRESULT endTime([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(A3B090E0-EBE7-84E8-2363-F82925153805),
	dual,
	pointer_default(unique)
]
interface IMaintenancePeriods915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IMaintenancePeriod915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IMaintenancePeriod915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IMaintenancePeriod915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IMaintenancePeriod915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(CA55FC5B-7B53-71AB-3678-7A97B3CAC2A9),
	dual,
	pointer_default(unique)
]
interface IMasterSettings915 : IDispatch
{
	[propget] HRESULT passwordMaster([out, retval] IPassword915** result);
	[propget] HRESULT allowSyncHostKeys([out, retval] BOOL* result);
	[propput] HRESULT allowSyncHostKeys([in] BOOL value);
	[propget] HRESULT allowSyncPwdCache([out, retval] BOOL* result);
	[propput] HRESULT allowSyncPwdCache([in] BOOL value);
	[propget] HRESULT allowActCodeSync([out, retval] BOOL* result);
	[propput] HRESULT allowActCodeSync([in] BOOL value);
	[propget] HRESULT followerRefreshTime([out, retval] ULONG* result);
	[propput] HRESULT followerRefreshTime([in] ULONG value);
	[propget] HRESULT limitBandwidth([out, retval] BandwidthLimit915* result);
	[propput] HRESULT limitBandwidth([in] BandwidthLimit915 value);
	[propget] HRESULT maxBandwidth([out, retval] ULONG* result);
	[propput] HRESULT maxBandwidth([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(82AF7AA7-FA1B-1213-B21E-342725126740),
	dual,
	pointer_default(unique)
]
interface IMonitoredVolume915 : IDispatch
{
	[propget] HRESULT path([out, retval] BSTR* result);
	[propput] HRESULT path([in] BSTR value);
	[propget] HRESULT threshold([out, retval] ULONG* result);
	[propput] HRESULT threshold([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(7CA3C3BD-396E-0472-A4F4-5C494700F97F),
	dual,
	pointer_default(unique)
]
interface IMonitoredVolumes915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IMonitoredVolume915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IMonitoredVolume915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IMonitoredVolume915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IMonitoredVolume915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(BC7B84BE-CAD7-C944-C8C0-2CAC46F11528),
	dual,
	pointer_default(unique)
]
interface IMonthGroup915 : IDispatch
{
	[propget] HRESULT jan([out, retval] BOOL* result);
	[propput] HRESULT jan([in] BOOL value);
	[propget] HRESULT feb([out, retval] BOOL* result);
	[propput] HRESULT feb([in] BOOL value);
	[propget] HRESULT mar([out, retval] BOOL* result);
	[propput] HRESULT mar([in] BOOL value);
	[propget] HRESULT apr([out, retval] BOOL* result);
	[propput] HRESULT apr([in] BOOL value);
	[propget] HRESULT may([out, retval] BOOL* result);
	[propput] HRESULT may([in] BOOL value);
	[propget] HRESULT jun([out, retval] BOOL* result);
	[propput] HRESULT jun([in] BOOL value);
	[propget] HRESULT jul([out, retval] BOOL* result);
	[propput] HRESULT jul([in] BOOL value);
	[propget] HRESULT aug([out, retval] BOOL* result);
	[propput] HRESULT aug([in] BOOL value);
	[propget] HRESULT sep([out, retval] BOOL* result);
	[propput] HRESULT sep([in] BOOL value);
	[propget] HRESULT oct([out, retval] BOOL* result);
	[propput] HRESULT oct([in] BOOL value);
	[propget] HRESULT nov([out, retval] BOOL* result);
	[propput] HRESULT nov([in] BOOL value);
	[propget] HRESULT dec([out, retval] BOOL* result);
	[propput] HRESULT dec([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2C556890-AE4E-05BE-5745-9E3779C900A8),
	dual,
	pointer_default(unique)
]
interface IMountPointAddressAcceptRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IAllowAddressAcceptRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type);
	HRESULT TryImportCsvEx([in] BSTR separator, [in] BSTR csvData, [in] IpListType915 type, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IAllowAddressAcceptRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(F182290D-2FFC-A367-DEB4-CFEC660D70BA),
	dual,
	pointer_default(unique)
]
interface IMountPointRootPathWhitelist915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IMountPointRootPathWhitelistEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(454AE763-D4BC-87ED-62E0-492005BAACA2),
	dual,
	pointer_default(unique)
]
interface IMountPointRootPathWhitelistEntry915 : IDispatch
{
	[propget] HRESULT mountPointRootPath([out, retval] BSTR* result);
	[propput] HRESULT mountPointRootPath([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C5A0444C-779A-953F-51DE-C737E7CD606D),
	dual,
	pointer_default(unique)
]
interface IMoveCompletedUploads915 : IDispatch
{
	[propget] HRESULT enabled([out, retval] BOOL* result);
	[propput] HRESULT enabled([in] BOOL value);
	[propget] HRESULT destinationDir([out, retval] BSTR* result);
	[propput] HRESULT destinationDir([in] BSTR value);
	[propget] HRESULT onExist([out, retval] OnDestinationExist915* result);
	[propput] HRESULT onExist([in] OnDestinationExist915 value);
	[propget] HRESULT onFailure([out, retval] OnMoveCompletedUploadFailure915* result);
	[propput] HRESULT onFailure([in] OnMoveCompletedUploadFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(69B059B8-6D50-A467-A4A7-35B7095BD748),
	dual,
	pointer_default(unique)
]
interface IMoveCompletedUploadsWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT enabled([out, retval] BOOL* result);
	[propput] HRESULT enabled([in] BOOL value);
	[propget] HRESULT destinationDir([out, retval] BSTR* result);
	[propput] HRESULT destinationDir([in] BSTR value);
	[propget] HRESULT onExist([out, retval] OnDestinationExist915* result);
	[propput] HRESULT onExist([in] OnDestinationExist915 value);
	[propget] HRESULT onFailure([out, retval] OnMoveCompletedUploadFailure915* result);
	[propput] HRESULT onFailure([in] OnMoveCompletedUploadFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C3DB9F1B-6D57-990E-B4F1-874D2CD2C175),
	dual,
	pointer_default(unique)
]
interface INetworkShareAccountSettings915 : IDispatch
{
	[propget] HRESULT mapRemoteHomeDir([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT mapRemoteHomeDir([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useGroupHomeDirConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupHomeDirConnStgs([in] BOOL value);
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT onMapHomeDirFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onMapHomeDirFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT mapRememberedShares([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT mapRememberedShares([in] DefaultGroupYesNo915 value);
	[propget] HRESULT onRememberedSharesListFailure([out, retval] OnRememberedSharesListFailure915* result);
	[propput] HRESULT onRememberedSharesListFailure([in] OnRememberedSharesListFailure915 value);
	[propget] HRESULT inheritShares([out, retval] BOOL* result);
	[propput] HRESULT inheritShares([in] BOOL value);
	[propget] HRESULT inheritAllShares([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT inheritAllShares([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useGroupShareConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupShareConnStgs([in] BOOL value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT onShareConnectFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onShareConnectFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(24FE8845-F767-9A6E-25F9-C48D74006747),
	dual,
	pointer_default(unique)
]
interface INetworkShareGroupSettings915 : IDispatch
{
	[propget] HRESULT mapRemoteHomeDir([out, retval] BOOL* result);
	[propput] HRESULT mapRemoteHomeDir([in] BOOL value);
	[propget] HRESULT useGlobalHomeDirConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalHomeDirConnStgs([in] BOOL value);
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT onMapHomeDirFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onMapHomeDirFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT mapRememberedShares([out, retval] BOOL* result);
	[propput] HRESULT mapRememberedShares([in] BOOL value);
	[propget] HRESULT onRememberedSharesListFailure([out, retval] OnRememberedSharesListFailure915* result);
	[propput] HRESULT onRememberedSharesListFailure([in] OnRememberedSharesListFailure915 value);
	[propget] HRESULT inheritAllShares([out, retval] BOOL* result);
	[propput] HRESULT inheritAllShares([in] BOOL value);
	[propget] HRESULT useGlobalShareConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalShareConnStgs([in] BOOL value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT onShareConnectFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onShareConnectFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(08603C39-54F9-9A63-8526-6AAB60B8F1E8),
	dual,
	pointer_default(unique)
]
interface INetworkShareSettings915 : IDispatch
{
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT onMapHomeDirFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onMapHomeDirFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT onShareConnectFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onShareConnectFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(75DD3ADD-D26F-4AEB-F9CE-ECBA632E36F2),
	dual,
	pointer_default(unique)
]
interface INetworkShareTaskProfileSettings915 : IDispatch
{
	[propget] HRESULT mapRemoteHomeDir([out, retval] BOOL* result);
	[propput] HRESULT mapRemoteHomeDir([in] BOOL value);
	[propget] HRESULT useGlobalHomeDirConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalHomeDirConnStgs([in] BOOL value);
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT mapRememberedShares([out, retval] BOOL* result);
	[propput] HRESULT mapRememberedShares([in] BOOL value);
	[propget] HRESULT useGlobalShareConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalShareConnStgs([in] BOOL value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C31F64BD-3EBF-C35E-52FA-F786E7E68D69),
	dual,
	pointer_default(unique)
]
interface INetworkShareVirtAccountSettings915 : IDispatch
{
	[propget] HRESULT mapRemoteHomeDir([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT mapRemoteHomeDir([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useGroupHomeDirConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupHomeDirConnStgs([in] BOOL value);
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT onMapHomeDirFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onMapHomeDirFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT mapRememberedShares([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT mapRememberedShares([in] DefaultGroupYesNo915 value);
	[propget] HRESULT onRememberedSharesListFailure([out, retval] OnRememberedSharesListFailure915* result);
	[propput] HRESULT onRememberedSharesListFailure([in] OnRememberedSharesListFailure915 value);
	[propget] HRESULT inheritShares([out, retval] BOOL* result);
	[propput] HRESULT inheritShares([in] BOOL value);
	[propget] HRESULT useGroupShareConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupShareConnStgs([in] BOOL value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT onShareConnectFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onShareConnectFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(EA6C35D8-4A06-B843-CE6E-6041B620C335),
	dual,
	pointer_default(unique)
]
interface INetworkShareVirtGroupSettings915 : IDispatch
{
	[propget] HRESULT mapRemoteHomeDir([out, retval] BOOL* result);
	[propput] HRESULT mapRemoteHomeDir([in] BOOL value);
	[propget] HRESULT useGlobalHomeDirConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalHomeDirConnStgs([in] BOOL value);
	[propget] HRESULT maxMapHomeDirWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxMapHomeDirWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxHomeDirAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxHomeDirAttempts([in] ULONG value);
	[propget] HRESULT homeDirRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT homeDirRetryDelay([in] ULONG value);
	[propget] HRESULT onMapHomeDirFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onMapHomeDirFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT mapRememberedShares([out, retval] BOOL* result);
	[propput] HRESULT mapRememberedShares([in] BOOL value);
	[propget] HRESULT onRememberedSharesListFailure([out, retval] OnRememberedSharesListFailure915* result);
	[propput] HRESULT onRememberedSharesListFailure([in] OnRememberedSharesListFailure915 value);
	[propget] HRESULT useGlobalShareConnStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalShareConnStgs([in] BOOL value);
	[propget] HRESULT mapNextShareDelay([out, retval] ULONG* result);
	[propput] HRESULT mapNextShareDelay([in] ULONG value);
	[propget] HRESULT maxTotalShareWaitTimeSec([out, retval] ULONG* result);
	[propput] HRESULT maxTotalShareWaitTimeSec([in] ULONG value);
	[propget] HRESULT maxShareConnectAttempts([out, retval] ULONG* result);
	[propput] HRESULT maxShareConnectAttempts([in] ULONG value);
	[propget] HRESULT shareConnectRetryDelay([out, retval] ULONG* result);
	[propput] HRESULT shareConnectRetryDelay([in] ULONG value);
	[propget] HRESULT onShareConnectFailure([out, retval] OnShareConnectFailure915* result);
	[propput] HRESULT onShareConnectFailure([in] OnShareConnectFailure915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(AEC4E809-44AD-4D70-5703-1655941D5BBE),
	dual,
	pointer_default(unique)
]
interface IPermanentBandwidths915 : IDispatch
{
	[propget] HRESULT limitDownloadBandwidth([out, retval] BandwidthLimit915* result);
	[propput] HRESULT limitDownloadBandwidth([in] BandwidthLimit915 value);
	[propget] HRESULT maxDownloadBandwidth([out, retval] ULONG* result);
	[propput] HRESULT maxDownloadBandwidth([in] ULONG value);
	[propget] HRESULT limitUploadBandwidth([out, retval] BandwidthLimit915* result);
	[propput] HRESULT limitUploadBandwidth([in] BandwidthLimit915 value);
	[propget] HRESULT maxUploadBandwidth([out, retval] ULONG* result);
	[propput] HRESULT maxUploadBandwidth([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(E3BB6416-3FAE-7C2D-4361-FE41C3BD7A94),
	dual,
	pointer_default(unique)
]
interface IPortRangeRule915 : IDispatch
{
	[propget] HRESULT portFrom([out, retval] ULONG* result);
	[propput] HRESULT portFrom([in] ULONG value);
	[propget] HRESULT portTo([out, retval] ULONG* result);
	[propput] HRESULT portTo([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(498C607A-DA61-E76D-538F-6409D2815EBA),
	dual,
	pointer_default(unique)
]
interface IPwAuthWhitelist915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IPwAuthWhitelistEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(A7156F13-B263-5D48-916F-078AC9477E3B),
	dual,
	pointer_default(unique)
]
interface IPwAuthWhitelistEntry915 : IDispatch
{
	[propget] HRESULT userName([out, retval] BSTR* result);
	[propput] HRESULT userName([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(8B098C45-154E-F19F-7C4E-FE0F61DFAE59),
	dual,
	pointer_default(unique)
]
interface IRemoteAdminAccess915 : IDispatch
{
	[propget] HRESULT accessType([out, retval] RemoteAdminAccessType915* result);
	[propput] HRESULT accessType([in] RemoteAdminAccessType915 value);
	[propget] HRESULT connectionInfo([out, retval] BOOL* result);
	[propput] HRESULT connectionInfo([in] BOOL value);
	[propget] HRESULT accessControl([out, retval] BOOL* result);
	[propput] HRESULT accessControl([in] BOOL value);
	[propget] HRESULT emailManagement([out, retval] BOOL* result);
	[propput] HRESULT emailManagement([in] BOOL value);
	[propget] HRESULT manageKeysAndCerts([out, retval] BOOL* result);
	[propput] HRESULT manageKeysAndCerts([in] BOOL value);
	[propget] HRESULT limitToGroups([out, retval] BOOL* result);
	[propput] HRESULT limitToGroups([in] BOOL value);
	[propget] HRESULT virtualGroupWhitelist([out, retval] IVirtualGroupWhitelist915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(9AF8879E-F291-D70A-F035-C8DDA595324D),
	dual,
	pointer_default(unique)
]
interface IServer915 : IDispatch
{
	[propget] HRESULT preferredIpVersion([out, retval] IpVersionType915* result);
	[propput] HRESULT preferredIpVersion([in] IpVersionType915 value);
	[propget] HRESULT trustedLspOnly([out, retval] BOOL* result);
	[propput] HRESULT trustedLspOnly([in] BOOL value);
	[propget] HRESULT secureSubsys([out, retval] BOOL* result);
	[propput] HRESULT secureSubsys([in] BOOL value);
	[propget] HRESULT adsiEncryption([out, retval] AdsiEncryption915* result);
	[propput] HRESULT adsiEncryption([in] AdsiEncryption915 value);
	[propget] HRESULT priorityClass([out, retval] PriorityClass915* result);
	[propput] HRESULT priorityClass([in] PriorityClass915 value);
	[propget] HRESULT autoBackupSettings([out, retval] BOOL* result);
	[propput] HRESULT autoBackupSettings([in] BOOL value);
	[propget] HRESULT minorBackupCooldown([out, retval] ULONG* result);
	[propput] HRESULT minorBackupCooldown([in] ULONG value);
	[propget] HRESULT debugging([out, retval] IDebugging915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(C82718FE-231C-09FA-343F-FA0C59C257D0),
	dual,
	pointer_default(unique)
]
interface ISessions915 : IDispatch
{
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareSettings915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3FB76ADA-037C-8A83-319B-89EE82C62F0A),
	dual,
	pointer_default(unique)
]
interface ISettings915 : IDispatch
{
	[propget] HRESULT bindings([out, retval] IBindings915** result);
	[propget] HRESULT windowsFirewall([out, retval] IWindowsFirewall915** result);
	[propget] HRESULT denialOfService([out, retval] IDenialOfServiceProtection915** result);
	[propget] HRESULT logging([out, retval] ILogging915** result);
	[propget] HRESULT xfer([out, retval] IFileTransferSettings915** result);
	[propget] HRESULT term([out, retval] ITerminalConsoleSettings915** result);
	[propget] HRESULT tasks([out, retval] ITaskSettings915** result);
	[propget] HRESULT server([out, retval] IServer915** result);
	[propget] HRESULT stats([out, retval] IStats915** result);
	[propget] HRESULT smtp([out, retval] ISmtpSending915** result);
	[propget] HRESULT algs([out, retval] ISshAlgorithms915** result);
	[propget] HRESULT tlsAlgs([out, retval] ITlsAlgorithms915** result);
	[propget] HRESULT connections([out, retval] IConnections915** result);
	[propget] HRESULT sessions([out, retval] ISessions915** result);
	[propget] HRESULT ipBlock([out, retval] IIpBlocking915** result);
	[propget] HRESULT domainOrder([out, retval] IDomainOrder915** result);
	[propget] HRESULT connectProfiles([out, retval] IConnectProfiles915** result);
	[propget] HRESULT sshProfiles([out, retval] ISshProfiles915** result);
	[propget] HRESULT customSubsystems([out, retval] ICustomSubsystems915** result);
	[propget] HRESULT encryptedVolumes([out, retval] IEncryptedVolumes915** result);
	[propget] HRESULT access([out, retval] IAccessControl915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Load();
	HRESULT TryLoad([out, retval] ILoadResult915 * * result);
	HRESULT LoadFromFile([in] BSTR fileName);
	HRESULT TryLoadFromFile([in] BSTR fileName, [out, retval] ILoadResult915 * * result);
	HRESULT LoadFromFileWithPassword([in] BSTR fileName, [in] BSTR pass);
	HRESULT TryLoadFromFileWithPassword([in] BSTR fileName, [in] BSTR pass, [out, retval] ILoadResult915 * * result);
	HRESULT Save();
	HRESULT SaveToFile([in] BSTR fileName);
	HRESULT SaveToFileWithPassword([in] BSTR fileName, [in] BSTR pass);
	HRESULT Backup();
	HRESULT Lock();
	HRESULT Unlock();

	HRESULT Import([in] BSTR settings);

};

[
	object,
	uuid(3864AD22-7A6B-16B8-69BD-984C62A9D2AF),
	dual,
	pointer_default(unique)
]
interface ISfsMountPoint915 : IDispatch
{
	[propget] HRESULT sfsMountPath([out, retval] BSTR* result);
	[propput] HRESULT sfsMountPath([in] BSTR value);
	[propget] HRESULT mountType([out, retval] SfsMountType915* result);
	[propput] HRESULT mountType([in] SfsMountType915 value);
	[propget] HRESULT realRootPath([out, retval] BSTR* result);
	[propput] HRESULT realRootPath([in] BSTR value);
	[propget] HRESULT encryptedVolumeName([out, retval] BSTR* result);
	[propput] HRESULT encryptedVolumeName([in] BSTR value);
	[propget] HRESULT encryptedRootPath([out, retval] BSTR* result);
	[propput] HRESULT encryptedRootPath([in] BSTR value);
	[propget] HRESULT sshProfileName([out, retval] BSTR* result);
	[propput] HRESULT sshProfileName([in] BSTR value);
	[propget] HRESULT sftpRootPath([out, retval] BSTR* result);
	[propput] HRESULT sftpRootPath([in] BSTR value);
	[propget] HRESULT customProviderDll([out, retval] BSTR* result);
	[propput] HRESULT customProviderDll([in] BSTR value);
	[propget] HRESULT customRootPath([out, retval] BSTR* result);
	[propput] HRESULT customRootPath([in] BSTR value);
	[propget] HRESULT createRootPath([out, retval] BOOL* result);
	[propput] HRESULT createRootPath([in] BOOL value);
	[propget] HRESULT delayInit([out, retval] BOOL* result);
	[propput] HRESULT delayInit([in] BOOL value);
	[propget] HRESULT clientAddresses([out, retval] IMountPointAddressAcceptRules915** result);
	[propget] HRESULT listAccess([out, retval] BOOL* result);
	[propput] HRESULT listAccess([in] BOOL value);
	[propget] HRESULT readExistAccess([out, retval] BOOL* result);
	[propput] HRESULT readExistAccess([in] BOOL value);
	[propget] HRESULT writeExistAccess([out, retval] BOOL* result);
	[propput] HRESULT writeExistAccess([in] BOOL value);
	[propget] HRESULT deleteExistAccess([out, retval] BOOL* result);
	[propput] HRESULT deleteExistAccess([in] BOOL value);
	[propget] HRESULT readWriteDeleteNewAccess([out, retval] BOOL* result);
	[propput] HRESULT readWriteDeleteNewAccess([in] BOOL value);
	[propget] HRESULT createDirAccess([out, retval] BOOL* result);
	[propput] HRESULT createDirAccess([in] BOOL value);
	[propget] HRESULT createLinkAccess([out, retval] BOOL* result);
	[propput] HRESULT createLinkAccess([in] BOOL value);
	[propget] HRESULT permitMoveExist([out, retval] PermitMoveExist915* result);
	[propput] HRESULT permitMoveExist([in] PermitMoveExist915 value);
	[propget] HRESULT showEmptyDirIfNoAccess([out, retval] BOOL* result);
	[propput] HRESULT showEmptyDirIfNoAccess([in] BOOL value);
	[propget] HRESULT fileSharingBeh([out, retval] FileSharingBeh915* result);
	[propput] HRESULT fileSharingBeh([in] FileSharingBeh915 value);
	[propget] HRESULT fileSharingUl([out, retval] FileSharing915* result);
	[propput] HRESULT fileSharingUl([in] FileSharing915 value);
	[propget] HRESULT fileSharingDl([out, retval] FileSharing915* result);
	[propput] HRESULT fileSharingDl([in] FileSharing915 value);
	[propget] HRESULT fileWhitelist([out, retval] BSTR* result);
	[propput] HRESULT fileWhitelist([in] BSTR value);
	[propget] HRESULT fileBlacklist([out, retval] BSTR* result);
	[propput] HRESULT fileBlacklist([in] BSTR value);
	[propget] HRESULT dirWhitelist([out, retval] BSTR* result);
	[propput] HRESULT dirWhitelist([in] BSTR value);
	[propget] HRESULT dirBlacklist([out, retval] BSTR* result);
	[propput] HRESULT dirBlacklist([in] BSTR value);
	[propget] HRESULT winProv([out, retval] ISfsWinProviderSettings915** result);
	[propget] HRESULT sftpProv([out, retval] ISfsSftpProviderSettings915** result);
	[propget] HRESULT prov([out, retval] ISfsSettingsPairs915** result);
	[propget] HRESULT allowUnlimitedAccess([out, retval] BOOL* result);
	[propput] HRESULT allowUnlimitedAccess([in] BOOL value);
	[propget] HRESULT encryptedProviderSettings([out, retval] ISfsEncryptedProviderSettings915** result);
	[propget] HRESULT volumeName([out, retval] BSTR* result);
	[propput] HRESULT volumeName([in] BSTR value);
	[propget] HRESULT providerDll([out, retval] BSTR* result);
	[propput] HRESULT providerDll([in] BSTR value);
	[propget] HRESULT createRealRootPath([out, retval] BOOL* result);
	[propput] HRESULT createRealRootPath([in] BOOL value);
	[propget] HRESULT flowSfsWinSettings([out, retval] ISfsWinProviderSettings915** result);
	[propget] HRESULT winProviderSettings([out, retval] ISfsWinProviderSettings915** result);
	[propget] HRESULT sftpProviderSettings([out, retval] ISfsSftpProviderSettings915** result);
	[propget] HRESULT providerSettings([out, retval] ISfsSettingsPairs915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(0690EE18-DEBF-F1E6-07B9-9F192F29418E),
	dual,
	pointer_default(unique)
]
interface ISfsMountPoints915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISfsMountPoint915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISfsMountPoint915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISfsMountPoint915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISfsMountPoint915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(89318867-A37E-451A-4975-B43979B9A34F),
	dual,
	pointer_default(unique)
]
interface ISfsSettingsPair915 : IDispatch
{
	[propget] HRESULT name([out, retval] BSTR* result);
	[propput] HRESULT name([in] BSTR value);
	[propget] HRESULT value([out, retval] BSTR* result);
	[propput] HRESULT value([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(CF041D86-27BD-116E-DA4F-BF98230365D9),
	dual,
	pointer_default(unique)
]
interface ISfsSettingsPairs915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISfsSettingsPair915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISfsSettingsPair915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISfsSettingsPair915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISfsSettingsPair915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(3BF1B2A8-15F9-C623-633A-8EA1524AA686),
	dual,
	pointer_default(unique)
]
interface ISfsSftpProviderSettings915 : IDispatch
{
	[propget] HRESULT logInOnInit([out, retval] BOOL* result);
	[propput] HRESULT logInOnInit([in] BOOL value);
	[propget] HRESULT emulateCheckFile([out, retval] EmulateCheckFile915* result);
	[propput] HRESULT emulateCheckFile([in] EmulateCheckFile915 value);
	[propget] HRESULT emulateTextMode([out, retval] EmulateTextMode915* result);
	[propput] HRESULT emulateTextMode([in] EmulateTextMode915 value);
	[propget] HRESULT emulateTextNewline([out, retval] EmulateTextNewline915* result);
	[propput] HRESULT emulateTextNewline([in] EmulateTextNewline915 value);
	[propget] HRESULT emulateTextSeek([out, retval] BOOL* result);
	[propput] HRESULT emulateTextSeek([in] BOOL value);
	[propget] HRESULT nativeTextSeek([out, retval] BOOL* result);
	[propput] HRESULT nativeTextSeek([in] BOOL value);
	[propget] HRESULT dirHandleMisuse([out, retval] DirHandleMisuse915* result);
	[propput] HRESULT dirHandleMisuse([in] DirHandleMisuse915 value);
	[propget] HRESULT listPipelineLevel([out, retval] ULONG* result);
	[propput] HRESULT listPipelineLevel([in] ULONG value);
	[propget] HRESULT readPipelineLevel([out, retval] ULONG* result);
	[propput] HRESULT readPipelineLevel([in] ULONG value);
	[propput] HRESULT sshProfileName([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3C050EFE-8522-F88F-9F91-94A5D90C7793),
	dual,
	pointer_default(unique)
]
interface ISfsUndefMountPoint915 : IDispatch
{
	[propget] HRESULT sfsMountPath([out, retval] BSTR* result);
	[propput] HRESULT sfsMountPath([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(225D1DEE-D881-0CDC-A04B-561D63FD58AE),
	dual,
	pointer_default(unique)
]
interface ISfsUndefMountPoints915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISfsUndefMountPoint915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISfsUndefMountPoint915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(2104F4DC-779C-01C4-66A2-063794C3113D),
	dual,
	pointer_default(unique)
]
interface ISfsWinProviderSettings915 : IDispatch
{
	[propget] HRESULT ownerAndGroup([out, retval] SfsProviderOwnerGroup915* result);
	[propput] HRESULT ownerAndGroup([in] SfsProviderOwnerGroup915 value);
	[propget] HRESULT acl([out, retval] SfsProviderAcl915* result);
	[propput] HRESULT acl([in] SfsProviderAcl915 value);
	[propget] HRESULT showHidden([out, retval] BOOL* result);
	[propput] HRESULT showHidden([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(9E26A8D4-D3E9-BD36-A013-D1228290AECA),
	dual,
	pointer_default(unique)
]
interface ISignatureAlgs915 : IDispatch
{
	[propget] HRESULT ed25519([out, retval] BOOL* result);
	[propput] HRESULT ed25519([in] BOOL value);
	[propget] HRESULT ecdsaSecp256k1([out, retval] BOOL* result);
	[propput] HRESULT ecdsaSecp256k1([in] BOOL value);
	[propget] HRESULT ecdsaNistp256([out, retval] BOOL* result);
	[propput] HRESULT ecdsaNistp256([in] BOOL value);
	[propget] HRESULT ecdhNistp384([out, retval] BOOL* result);
	[propput] HRESULT ecdhNistp384([in] BOOL value);
	[propget] HRESULT ecdsaNistp521([out, retval] BOOL* result);
	[propput] HRESULT ecdsaNistp521([in] BOOL value);
	[propget] HRESULT rsaSha2_512([out, retval] BOOL* result);
	[propput] HRESULT rsaSha2_512([in] BOOL value);
	[propget] HRESULT rsaSha2_256([out, retval] BOOL* result);
	[propput] HRESULT rsaSha2_256([in] BOOL value);
	[propget] HRESULT sshRsa([out, retval] BOOL* result);
	[propput] HRESULT sshRsa([in] BOOL value);
	[propget] HRESULT minRsaKeyBits([out, retval] ULONG* result);
	[propput] HRESULT minRsaKeyBits([in] ULONG value);
	[propget] HRESULT sshDss([out, retval] BOOL* result);
	[propput] HRESULT sshDss([in] BOOL value);
	[propget] HRESULT minDsaKeyBits([out, retval] ULONG* result);
	[propput] HRESULT minDsaKeyBits([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(772F1061-0535-C138-E1F9-046155843BF2),
	dual,
	pointer_default(unique)
]
interface ISmtpSending915 : IDispatch
{
	[propget] HRESULT emailSending([out, retval] EmailSending915* result);
	[propput] HRESULT emailSending([in] EmailSending915 value);
	[propget] HRESULT fromAddress([out, retval] BSTR* result);
	[propput] HRESULT fromAddress([in] BSTR value);
	[propget] HRESULT senderComputerName([out, retval] BSTR* result);
	[propput] HRESULT senderComputerName([in] BSTR value);
	[propget] HRESULT ipVerPref([out, retval] IpVersionWN915* result);
	[propput] HRESULT ipVerPref([in] IpVersionWN915 value);
	[propget] HRESULT relayHost([out, retval] BSTR* result);
	[propput] HRESULT relayHost([in] BSTR value);
	[propget] HRESULT relayPort([out, retval] ULONG* result);
	[propput] HRESULT relayPort([in] ULONG value);
	[propget] HRESULT relayImplicitTls([out, retval] BOOL* result);
	[propput] HRESULT relayImplicitTls([in] BOOL value);
	[propget] HRESULT relayTlsRequirement([out, retval] TlsAssuranceRelay915* result);
	[propput] HRESULT relayTlsRequirement([in] TlsAssuranceRelay915 value);
	[propget] HRESULT relayAuthType([out, retval] SmtpAuthType915* result);
	[propput] HRESULT relayAuthType([in] SmtpAuthType915 value);
	[propget] HRESULT relayUsername([out, retval] BSTR* result);
	[propput] HRESULT relayUsername([in] BSTR value);
	[propget] HRESULT relayPassword([out, retval] IPassword915** result);
	[propget] HRESULT tlsRequirement([out, retval] TlsAssuranceDirect915* result);
	[propput] HRESULT tlsRequirement([in] TlsAssuranceDirect915 value);
	[propget] HRESULT additionalDomains([out, retval] IAdditionalDomains915** result);
	[propget] HRESULT retrySchedule([out, retval] BSTR* result);
	[propput] HRESULT retrySchedule([in] BSTR value);
	[propget] HRESULT useDkim([out, retval] BOOL* result);
	[propput] HRESULT useDkim([in] BOOL value);
	[propget] HRESULT dkimSdid([out, retval] BSTR* result);
	[propput] HRESULT dkimSdid([in] BSTR value);
	[propget] HRESULT dkimSelector([out, retval] BSTR* result);
	[propput] HRESULT dkimSelector([in] BSTR value);
	[propget] HRESULT dkimKeypair([out, retval] IDkimKeypair915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(A267995C-C830-4B93-1698-568DDA95CB7C),
	dual,
	pointer_default(unique)
]
interface ISrvSideC2SRules915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] ISrvSideIPv4C2SRules915** result);
	[propget] HRESULT ipv6([out, retval] ISrvSideIPv6C2SRules915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(07C4BB81-BF8A-4CB5-A22B-67DB18421A95),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv4C2SRule915 : IDispatch
{
	[propget] HRESULT listenIntf([out, retval] BSTR* result);
	[propput] HRESULT listenIntf([in] BSTR value);
	[propget] HRESULT listenPort([out, retval] ULONG* result);
	[propput] HRESULT listenPort([in] ULONG value);
	[propget] HRESULT targetHost([out, retval] BSTR* result);
	[propput] HRESULT targetHost([in] BSTR value);
	[propget] HRESULT targetPort([out, retval] ULONG* result);
	[propput] HRESULT targetPort([in] ULONG value);
	[propget] HRESULT connectProfile([out, retval] BSTR* result);
	[propput] HRESULT connectProfile([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(54E0AAED-760F-C1D0-67F3-3BBCC3E06A0C),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv4C2SRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISrvSideIPv4C2SRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(88D9DB16-D893-FBAD-F279-290C5ECDC01B),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv4S2CRule915 : IDispatch
{
	[propget] HRESULT listenIntf([out, retval] BSTR* result);
	[propput] HRESULT listenIntf([in] BSTR value);
	[propget] HRESULT listenPort([out, retval] ULONG* result);
	[propput] HRESULT listenPort([in] ULONG value);
	[propget] HRESULT targetHost([out, retval] BSTR* result);
	[propput] HRESULT targetHost([in] BSTR value);
	[propget] HRESULT targetPort([out, retval] ULONG* result);
	[propput] HRESULT targetPort([in] ULONG value);
	[propget] HRESULT acceptRules([out, retval] IAddressAcceptRulesForIPv4_915** result);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(692B34AE-F7AD-2DC7-BE8F-748B266C3E4E),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv4S2CRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISrvSideIPv4S2CRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(628E2613-B55F-F3C5-D1B1-386AEF463576),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv6C2SRule915 : IDispatch
{
	[propget] HRESULT listenIntf([out, retval] BSTR* result);
	[propput] HRESULT listenIntf([in] BSTR value);
	[propget] HRESULT listenPort([out, retval] ULONG* result);
	[propput] HRESULT listenPort([in] ULONG value);
	[propget] HRESULT targetHost([out, retval] BSTR* result);
	[propput] HRESULT targetHost([in] BSTR value);
	[propget] HRESULT targetPort([out, retval] ULONG* result);
	[propput] HRESULT targetPort([in] ULONG value);
	[propget] HRESULT connectProfile([out, retval] BSTR* result);
	[propput] HRESULT connectProfile([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(324F46E5-D0F1-9B36-A8A1-9EFE3C98210D),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv6C2SRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISrvSideIPv6C2SRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(3AA8C4EA-11B9-4304-3625-88B81FD25C11),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv6S2CRule915 : IDispatch
{
	[propget] HRESULT listenIntf([out, retval] BSTR* result);
	[propput] HRESULT listenIntf([in] BSTR value);
	[propget] HRESULT listenPort([out, retval] ULONG* result);
	[propput] HRESULT listenPort([in] ULONG value);
	[propget] HRESULT targetHost([out, retval] BSTR* result);
	[propput] HRESULT targetHost([in] BSTR value);
	[propget] HRESULT targetPort([out, retval] ULONG* result);
	[propput] HRESULT targetPort([in] ULONG value);
	[propget] HRESULT acceptRules([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(93EECB56-73E4-3631-5C4F-E2351D266CC8),
	dual,
	pointer_default(unique)
]
interface ISrvSideIPv6S2CRules915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISrvSideIPv6S2CRule915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(688F7865-A464-9927-FD80-2D6A9D0918A2),
	dual,
	pointer_default(unique)
]
interface ISrvSideS2CRules915 : IDispatch
{
	[propget] HRESULT ipv4([out, retval] ISrvSideIPv4S2CRules915** result);
	[propget] HRESULT ipv6([out, retval] ISrvSideIPv6S2CRules915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(B66FB474-06C2-C7CF-BEED-1011B6A0D4D5),
	dual,
	pointer_default(unique)
]
interface ISshAlgorithms915 : IDispatch
{
	[propget] HRESULT kex([out, retval] IKex915** result);
	[propget] HRESULT sig([out, retval] ISignatureAlgs915** result);
	[propget] HRESULT encr([out, retval] IEncryption915** result);
	[propget] HRESULT mac([out, retval] IMac915** result);
	[propget] HRESULT cmpr([out, retval] ICompression915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(0F3F2DE1-F966-D983-827D-6A400B1DE2E8),
	dual,
	pointer_default(unique)
]
interface ISshProfile915 : IDispatch
{
	[propget] HRESULT profileName([out, retval] BSTR* result);
	[propput] HRESULT profileName([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT sshHost([out, retval] BSTR* result);
	[propput] HRESULT sshHost([in] BSTR value);
	[propget] HRESULT sshPort([out, retval] ULONG* result);
	[propput] HRESULT sshPort([in] ULONG value);
	[propget] HRESULT connectProfile([out, retval] BSTR* result);
	[propput] HRESULT connectProfile([in] BSTR value);
	[propget] HRESULT obfuscation([out, retval] BOOL* result);
	[propput] HRESULT obfuscation([in] BOOL value);
	[propget] HRESULT obfsKeyword([out, retval] IPassword915** result);
	[propget] HRESULT hostKeys([out, retval] IHostKeys915** result);
	[propget] HRESULT userName([out, retval] BSTR* result);
	[propput] HRESULT userName([in] BSTR value);
	[propget] HRESULT authMethods([out, retval] IUserAuthMethods915** result);
	[propget] HRESULT elevation([out, retval] DefaultYesNo915* result);
	[propput] HRESULT elevation([in] DefaultYesNo915 value);
	[propget] HRESULT spn([out, retval] BSTR* result);
	[propput] HRESULT spn([in] BSTR value);
	[propget] HRESULT gssKex([out, retval] GssKex915* result);
	[propput] HRESULT gssKex([in] GssKex915 value);
	[propget] HRESULT delegation([out, retval] BOOL* result);
	[propput] HRESULT delegation([in] BOOL value);
	[propget] HRESULT kexAlgs([out, retval] IPriorityNameList915** result);
	[propget] HRESULT hostKeyAlgs([out, retval] IPriorityNameList915** result);
	[propget] HRESULT cipherAlgs([out, retval] IPriorityNameList915** result);
	[propget] HRESULT macAlgs([out, retval] IPriorityNameList915** result);
	[propget] HRESULT comprAlgs([out, retval] IPriorityNameList915** result);
	[propget] HRESULT sendExtInfo([out, retval] DefaultYesNo915* result);
	[propput] HRESULT sendExtInfo([in] DefaultYesNo915 value);
	[propget] HRESULT noFlowControl([out, retval] NoFlowControl915* result);
	[propput] HRESULT noFlowControl([in] NoFlowControl915 value);
	[propget] HRESULT globalRequestCapable([out, retval] GlobalRequestCapable915* result);
	[propput] HRESULT globalRequestCapable([in] GlobalRequestCapable915 value);
	[propget] HRESULT startReexchange([out, retval] BOOL* result);
	[propput] HRESULT startReexchange([in] BOOL value);
	[propget] HRESULT keepAlive([out, retval] BOOL* result);
	[propput] HRESULT keepAlive([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(A4443675-4EB1-911B-3DB7-AC9F4882F7A9),
	dual,
	pointer_default(unique)
]
interface ISshProfiles915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ISshProfile915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ISshProfile915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ISshProfile915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ISshProfile915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(D87D0455-122B-E1E5-AFE9-440DF05A2D65),
	dual,
	pointer_default(unique)
]
interface IStats915 : IDispatch
{
	[propget] HRESULT collectStats([out, retval] BOOL* result);
	[propput] HRESULT collectStats([in] BOOL value);
	[propget] HRESULT maxMonthlyEntries([out, retval] ULONG* result);
	[propput] HRESULT maxMonthlyEntries([in] ULONG value);
	[propget] HRESULT maxDailyEntries([out, retval] ULONG* result);
	[propput] HRESULT maxDailyEntries([in] ULONG value);
	[propget] HRESULT fileRestrictedAccess([out, retval] BOOL* result);
	[propput] HRESULT fileRestrictedAccess([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(249D62BB-86E2-E164-9468-919A171AFD1A),
	dual,
	pointer_default(unique)
]
interface IStatsQuotas915 : IDispatch
{
	[propget] HRESULT onDownloadQuotaReached([out, retval] OnStatsQuotaReached915* result);
	[propput] HRESULT onDownloadQuotaReached([in] OnStatsQuotaReached915 value);
	[propget] HRESULT downloadQuotaMb([out, retval] ULONG* result);
	[propput] HRESULT downloadQuotaMb([in] ULONG value);
	[propget] HRESULT maxDownloadBandwidth([out, retval] ULONG* result);
	[propput] HRESULT maxDownloadBandwidth([in] ULONG value);
	[propget] HRESULT onUploadQuotaReached([out, retval] OnStatsQuotaReached915* result);
	[propput] HRESULT onUploadQuotaReached([in] OnStatsQuotaReached915 value);
	[propget] HRESULT uploadQuotaMb([out, retval] ULONG* result);
	[propput] HRESULT uploadQuotaMb([in] ULONG value);
	[propget] HRESULT maxUploadBandwidth([out, retval] ULONG* result);
	[propput] HRESULT maxUploadBandwidth([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(1D9CF4C1-B167-818F-6C35-E6238F83A11F),
	dual,
	pointer_default(unique)
]
interface ITask915 : IDispatch
{
	[propget] HRESULT type([out, retval] TaskType915* result);
	[propput] HRESULT type([in] TaskType915 value);
	[propget] HRESULT name([out, retval] BSTR* result);
	[propput] HRESULT name([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT enabled([out, retval] BOOL* result);
	[propput] HRESULT enabled([in] BOOL value);
	[propget] HRESULT minTimeBetweenRunsMins([out, retval] ULONG* result);
	[propput] HRESULT minTimeBetweenRunsMins([in] ULONG value);
	[propget] HRESULT keepLogFilesDays([out, retval] ULONG* result);
	[propput] HRESULT keepLogFilesDays([in] ULONG value);
	[propget] HRESULT archive([out, retval] BOOL* result);
	[propput] HRESULT archive([in] BOOL value);
	[propget] HRESULT archivePathType([out, retval] LogArchivalPathType915* result);
	[propput] HRESULT archivePathType([in] LogArchivalPathType915 value);
	[propget] HRESULT archivePath([out, retval] BSTR* result);
	[propput] HRESULT archivePath([in] BSTR value);
	[propget] HRESULT archiveRestrictAccess([out, retval] BOOL* result);
	[propput] HRESULT archiveRestrictAccess([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT taskProfile([out, retval] BSTR* result);
	[propput] HRESULT taskProfile([in] BSTR value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT shutdownWaitTime([out, retval] ULONG* result);
	[propput] HRESULT shutdownWaitTime([in] ULONG value);
	[propget] HRESULT onShutdownTimeout([out, retval] TaskShutdownPolicy915* result);
	[propput] HRESULT onShutdownTimeout([in] TaskShutdownPolicy915 value);
	[propget] HRESULT dupTaskPolicy([out, retval] DuplicateTaskPolicy915* result);
	[propput] HRESULT dupTaskPolicy([in] DuplicateTaskPolicy915 value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT recordOutput([out, retval] BOOL* result);
	[propput] HRESULT recordOutput([in] BOOL value);
	[propget] HRESULT outputCodePage([out, retval] TaskOutputCodePage915* result);
	[propput] HRESULT outputCodePage([in] TaskOutputCodePage915 value);
	[propget] HRESULT maxOutputKb([out, retval] ULONG* result);
	[propput] HRESULT maxOutputKb([in] ULONG value);
	[propget] HRESULT maxStdErrKb([out, retval] ULONG* result);
	[propput] HRESULT maxStdErrKb([in] ULONG value);
	[propget] HRESULT emailResult([out, retval] BOOL* result);
	[propput] HRESULT emailResult([in] BOOL value);
	[propget] HRESULT emailAddressList([out, retval] BSTR* result);
	[propput] HRESULT emailAddressList([in] BSTR value);
	[propget] HRESULT maxEmailContentKb([out, retval] ULONG* result);
	[propput] HRESULT maxEmailContentKb([in] ULONG value);
	[propget] HRESULT triggers([out, retval] ITaskTriggers915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(DBA9D708-B2B0-45D2-7965-2C65FDC35827),
	dual,
	pointer_default(unique)
]
interface ITaskList915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ITask915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ITask915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ITask915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ITask915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ITask915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ITask915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ITask915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ITask915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ITask915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ITask915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ITask915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ITask915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(F3A232C0-9C56-F0E7-4A6F-16F1916A20B5),
	dual,
	pointer_default(unique)
]
interface ITaskProfile915 : IDispatch
{
	[propget] HRESULT name([out, retval] BSTR* result);
	[propput] HRESULT name([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT securityContext([out, retval] TaskSecurityContext915* result);
	[propput] HRESULT securityContext([in] TaskSecurityContext915 value);
	[propget] HRESULT winDomain([out, retval] BSTR* result);
	[propput] HRESULT winDomain([in] BSTR value);
	[propget] HRESULT winAccount([out, retval] BSTR* result);
	[propput] HRESULT winAccount([in] BSTR value);
	[propget] HRESULT logonType([out, retval] LogonType915* result);
	[propput] HRESULT logonType([in] LogonType915 value);
	[propget] HRESULT elevation([out, retval] TaskElevation915* result);
	[propput] HRESULT elevation([in] TaskElevation915 value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsOnLogonCmd([out, retval] IWinOnLogonCommand915** result);
	[propget] HRESULT windowsOnLogoffCmd([out, retval] IWinOnLogoffCommand915** result);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareTaskProfileSettings915** result);
	[propget] HRESULT shares([out, retval] IFileShares915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(38C2342D-7DA5-AD0E-7453-401E1CB70BB3),
	dual,
	pointer_default(unique)
]
interface ITaskProfiles915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ITaskProfile915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ITaskProfile915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ITaskProfile915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ITaskProfile915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(73CA12B5-D857-2547-EB29-E3371E5229B8),
	dual,
	pointer_default(unique)
]
interface ITaskSettings915 : IDispatch
{
	[propget] HRESULT taskList([out, retval] ITaskList915** result);
	[propget] HRESULT taskProfiles([out, retval] ITaskProfiles915** result);
	[propget] HRESULT maxQueuedTasks([out, retval] ULONG* result);
	[propput] HRESULT maxQueuedTasks([in] ULONG value);
	[propget] HRESULT maxTriggerEvents([out, retval] ULONG* result);
	[propput] HRESULT maxTriggerEvents([in] ULONG value);
	[propget] HRESULT maxConcurrentTasks([out, retval] ULONG* result);
	[propput] HRESULT maxConcurrentTasks([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(1E2219BB-BDB6-2947-FEE1-DBD919FB5BD5),
	dual,
	pointer_default(unique)
]
interface ITaskTrigger915 : IDispatch
{
	[propget] HRESULT type([out, retval] TaskTriggerType915* result);
	[propput] HRESULT type([in] TaskTriggerType915 value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT logEvent([out, retval] TaskTriggerEvent915* result);
	[propput] HRESULT logEvent([in] TaskTriggerEvent915 value);
	[propget] HRESULT logLevel([out, retval] LogLevel_EW915* result);
	[propput] HRESULT logLevel([in] LogLevel_EW915 value);
	[propget] HRESULT logEventList([out, retval] IEventList915** result);
	[propget] HRESULT condition([out, retval] BSTR* result);
	[propput] HRESULT condition([in] BSTR value);
	[propget] HRESULT startTime([out, retval] BSTR* result);
	[propput] HRESULT startTime([in] BSTR value);
	[propget] HRESULT period([out, retval] TaskTriggerPeriod915* result);
	[propput] HRESULT period([in] TaskTriggerPeriod915 value);
	[propget] HRESULT months([out, retval] IMonthGroup915** result);
	[propget] HRESULT dayChoice([out, retval] DayChoice915* result);
	[propput] HRESULT dayChoice([in] DayChoice915 value);
	[propget] HRESULT dayOccurrences([out, retval] IDayOccurrenceGroup915** result);
	[propget] HRESULT daysOfWeek([out, retval] IDayOfWeekGroup915** result);
	[propget] HRESULT dayNumbers([out, retval] BSTR* result);
	[propput] HRESULT dayNumbers([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(9E0EC156-6AA5-79B4-3958-FC958E5CE3AF),
	dual,
	pointer_default(unique)
]
interface ITaskTriggers915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] ITaskTrigger915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] ITaskTrigger915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ITaskTrigger915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ITaskTrigger915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(3FBCB059-1E45-EA58-A8DE-1ABA5EC6FA1C),
	dual,
	pointer_default(unique)
]
interface ITerminalConsoleSettings915 : IDispatch
{
	[propget] HRESULT consoleVersion([out, retval] ConsoleVersion915* result);
	[propput] HRESULT consoleVersion([in] ConsoleVersion915 value);
	[propget] HRESULT consoleWin10ScrBufFix([out, retval] BOOL* result);
	[propput] HRESULT consoleWin10ScrBufFix([in] BOOL value);
	[propget] HRESULT recognizeEsc([out, retval] BOOL* result);
	[propput] HRESULT recognizeEsc([in] BOOL value);
	[propget] HRESULT escDelayMs([out, retval] ULONG* result);
	[propput] HRESULT escDelayMs([in] ULONG value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(8ED905F5-59DE-5E8D-05A1-5D1D7A41D397),
	dual,
	pointer_default(unique)
]
interface ITlsAlgorithms915 : IDispatch
{
	[propget] HRESULT minCipherStrength([out, retval] ULONG* result);
	[propput] HRESULT minCipherStrength([in] ULONG value);
	[propget] HRESULT requireStrongCrypto([out, retval] BOOL* result);
	[propput] HRESULT requireStrongCrypto([in] BOOL value);
	[propget] HRESULT tls13([out, retval] BOOL* result);
	[propput] HRESULT tls13([in] BOOL value);
	[propget] HRESULT tls12([out, retval] BOOL* result);
	[propput] HRESULT tls12([in] BOOL value);
	[propget] HRESULT tls11([out, retval] BOOL* result);
	[propput] HRESULT tls11([in] BOOL value);
	[propget] HRESULT tls10([out, retval] BOOL* result);
	[propput] HRESULT tls10([in] BOOL value);
	[propget] HRESULT kexEcdhe([out, retval] BOOL* result);
	[propput] HRESULT kexEcdhe([in] BOOL value);
	[propget] HRESULT kexRsa([out, retval] BOOL* result);
	[propput] HRESULT kexRsa([in] BOOL value);
	[propget] HRESULT kexDhe([out, retval] BOOL* result);
	[propput] HRESULT kexDhe([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(13D3AFD8-ACD6-2046-62F2-267BBFA0547A),
	dual,
	pointer_default(unique)
]
interface IUpdateSettings915 : IDispatch
{
	[propget] HRESULT updateDownloadMethod([out, retval] UpdateDownloadMethod915* result);
	[propput] HRESULT updateDownloadMethod([in] UpdateDownloadMethod915 value);
	[propget] HRESULT downloadUrlBase([out, retval] BSTR* result);
	[propput] HRESULT downloadUrlBase([in] BSTR value);
	[propget] HRESULT fallbackToAltUrl([out, retval] BOOL* result);
	[propput] HRESULT fallbackToAltUrl([in] BOOL value);
	[propget] HRESULT altDownloadUrlBase([out, retval] BSTR* result);
	[propput] HRESULT altDownloadUrlBase([in] BSTR value);
	[propget] HRESULT maxConcurrentDownloadConnections([out, retval] ULONG* result);
	[propput] HRESULT maxConcurrentDownloadConnections([in] ULONG value);
	[propget] HRESULT updateType([out, retval] AutomaticUpdatesType915* result);
	[propput] HRESULT updateType([in] AutomaticUpdatesType915 value);
	[propget] HRESULT checkForUpdateDelayHours([out, retval] ULONG* result);
	[propput] HRESULT checkForUpdateDelayHours([in] ULONG value);
	[propget] HRESULT updateStabilityDelay([out, retval] ULONG* result);
	[propput] HRESULT updateStabilityDelay([in] ULONG value);
	[propget] HRESULT maintenancePeriods([out, retval] IMaintenancePeriods915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(15433D53-19A0-8F02-0251-B40D934C2327),
	dual,
	pointer_default(unique)
]
interface IUserAuthMethod915 : IDispatch
{
	[propget] HRESULT type([out, retval] UserAuthType915* result);
	[propput] HRESULT type([in] UserAuthType915 value);
	[propget] HRESULT password([out, retval] IPassword915** result);
	[propget] HRESULT kbdiFallback([out, retval] BOOL* result);
	[propput] HRESULT kbdiFallback([in] BOOL value);
	[propget] HRESULT kerberos([out, retval] BOOL* result);
	[propput] HRESULT kerberos([in] BOOL value);
	[propget] HRESULT ntlm([out, retval] BOOL* result);
	[propput] HRESULT ntlm([in] BOOL value);
	[propget] HRESULT delegation([out, retval] BOOL* result);
	[propput] HRESULT delegation([in] BOOL value);
	[propget] HRESULT clientKey([out, retval] IClientAuthKeypair915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2FC14044-95FD-6723-29C7-C7F485244718),
	dual,
	pointer_default(unique)
]
interface IUserAuthMethods915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IUserAuthMethod915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IUserAuthMethod915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IUserAuthMethod915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IUserAuthMethod915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(68F063DC-A49F-2F48-F9E8-139C85AC5346),
	dual,
	pointer_default(unique)
]
interface IUserNameBlacklist915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IUserNameBlacklistEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IUserNameBlacklistEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(F1590003-7C69-23DA-0D26-9044B65A5AA0),
	dual,
	pointer_default(unique)
]
interface IUserNameBlacklistEntry915 : IDispatch
{
	[propget] HRESULT userName([out, retval] BSTR* result);
	[propput] HRESULT userName([in] BSTR value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2D1FDCC4-C8D6-730E-854D-44C4FA96B554),
	dual,
	pointer_default(unique)
]
interface IVirtAccount915 : IDispatch
{
	[propget] HRESULT virtAccount([out, retval] BSTR* result);
	[propput] HRESULT virtAccount([in] BSTR value);
	[propget] HRESULT comment([out, retval] BSTR* result);
	[propput] HRESULT comment([in] BSTR value);
	[propget] HRESULT virtPassword([out, retval] IPassword915** result);
	[propget] HRESULT group([out, retval] BSTR* result);
	[propput] HRESULT group([in] BSTR value);
	[propget] HRESULT securityContext([out, retval] VirtAcctSecurityContext915* result);
	[propput] HRESULT securityContext([in] VirtAcctSecurityContext915 value);
	[propget] HRESULT winDomain([out, retval] BSTR* result);
	[propput] HRESULT winDomain([in] BSTR value);
	[propget] HRESULT winAccount([out, retval] BSTR* result);
	[propput] HRESULT winAccount([in] BSTR value);
	[propget] HRESULT loginAllowed([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT loginAllowed([in] DefaultGroupYesNo915 value);
	[propget] HRESULT editableByDelegatedAdmin([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT editableByDelegatedAdmin([in] DefaultGroupYesNo915 value);
	[propget] HRESULT limits([out, retval] IAccountLimitsAndQuotas915** result);
	[propget] HRESULT clientAddresses([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT auth([out, retval] IVirtAccountAuthentication915** result);
	[propget] HRESULT remoteAdminAccess([out, retval] IRemoteAdminAccess915** result);
	[propget] HRESULT connection([out, retval] IVirtAccountConnectionSetup915** result);
	[propget] HRESULT session([out, retval] IVirtAccountSessionSetup915** result);
	[propget] HRESULT term([out, retval] IAccountTerminalAndExec915** result);
	[propget] HRESULT xfer([out, retval] IVirtAccountFileTransfer915** result);
	[propget] HRESULT fwding([out, retval] IAccountForwarding915** result);
	[propget] HRESULT creationTime([out, retval] BSTR* result);
	[propput] HRESULT creationTime([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(DED78291-518A-7C6B-E3C5-D61680A939E9),
	dual,
	pointer_default(unique)
]
interface IVirtAccountAuthentication915 : IDispatch
{
	[propget] HRESULT passwordAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT passwordAuth([in] AuthDisp915 value);
	[propget] HRESULT useDefaultPwdExpiration([out, retval] BOOL* result);
	[propput] HRESULT useDefaultPwdExpiration([in] BOOL value);
	[propget] HRESULT pwdExpirationDays([out, retval] ULONG* result);
	[propput] HRESULT pwdExpirationDays([in] ULONG value);
	[propget] HRESULT allowGroupForcePwdChange([out, retval] BOOL* result);
	[propput] HRESULT allowGroupForcePwdChange([in] BOOL value);
	[propget] HRESULT forcePwdChange([out, retval] BOOL* result);
	[propput] HRESULT forcePwdChange([in] BOOL value);
	[propget] HRESULT allowPasswordChange([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowPasswordChange([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT publicKeyAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT publicKeyAuth([in] AuthDisp915 value);
	[propget] HRESULT allowKeyManagement([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowKeyManagement([in] DefaultGroupYesNo915 value);
	[propget] HRESULT keys([out, retval] IClientKeys915** result);
	[propget] HRESULT totp([out, retval] IAccountKbdiTotp915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(5F50A808-56E7-B50C-56F1-5638040FE9D7),
	dual,
	pointer_default(unique)
]
interface IVirtAccountConnectionSetup915 : IDispatch
{
	[propget] HRESULT startReexchange([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT startReexchange([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useGroupKeepAlive([out, retval] BOOL* result);
	[propput] HRESULT useGroupKeepAlive([in] BOOL value);
	[propget] HRESULT keepAliveTimeout([out, retval] ULONG* result);
	[propput] HRESULT keepAliveTimeout([in] ULONG value);
	[propget] HRESULT useGroupConnTimeout([out, retval] BOOL* result);
	[propput] HRESULT useGroupConnTimeout([in] BOOL value);
	[propget] HRESULT connectionTimeout([out, retval] ULONG* result);
	[propput] HRESULT connectionTimeout([in] ULONG value);
	[propget] HRESULT onLogonCmd([out, retval] IConnOnLogonCommandWithDefault915** result);
	[propget] HRESULT onLogoffCmd([out, retval] IConnOnLogoffCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(F92AB906-6C6E-4245-FB45-B393D3586E57),
	dual,
	pointer_default(unique)
]
interface IVirtAccountFileTransfer915 : IDispatch
{
	[propget] HRESULT permitScp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitScp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitSftp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitSftp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT permitFtps([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT permitFtps([in] DefaultGroupYesNo915 value);
	[propget] HRESULT loadProfileForFileXfer([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT loadProfileForFileXfer([in] DefaultGroupYesNo915 value);
	[propget] HRESULT omitRelative([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT omitRelative([in] DefaultGroupYesNo915 value);
	[propget] HRESULT limitToSftp3([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT limitToSftp3([in] DefaultGroupYesNo915 value);
	[propget] HRESULT useDefaultPosixPerm([out, retval] BOOL* result);
	[propput] HRESULT useDefaultPosixPerm([in] BOOL value);
	[propget] HRESULT posixPermDir([out, retval] BSTR* result);
	[propput] HRESULT posixPermDir([in] BSTR value);
	[propget] HRESULT posixPermFile([out, retval] BSTR* result);
	[propput] HRESULT posixPermFile([in] BSTR value);
	[propget] HRESULT useBvShellWithWinScp([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT useBvShellWithWinScp([in] DefaultGroupYesNo915 value);
	[propget] HRESULT displayTime([out, retval] DisplayTimeType915* result);
	[propput] HRESULT displayTime([in] DisplayTimeType915 value);
	[propget] HRESULT useDefaultMaxPathLength([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxPathLength([in] BOOL value);
	[propget] HRESULT maxPathLength([out, retval] ULONG* result);
	[propput] HRESULT maxPathLength([in] ULONG value);
	[propget] HRESULT allowAltStreams([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowAltStreams([in] DefaultGroupYesNo915 value);
	[propget] HRESULT allowUnsafeNames([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT allowUnsafeNames([in] DefaultGroupYesNo915 value);
	[propget] HRESULT inheritMountPoints([out, retval] BOOL* result);
	[propput] HRESULT inheritMountPoints([in] BOOL value);
	[propget] HRESULT undefMountPoints([out, retval] ISfsUndefMountPoints915** result);
	[propget] HRESULT mountPoints([out, retval] ISfsMountPoints915** result);
	[propget] HRESULT useDefaultSfsHomeDir([out, retval] BOOL* result);
	[propput] HRESULT useDefaultSfsHomeDir([in] BOOL value);
	[propget] HRESULT sfsHomeDir([out, retval] BSTR* result);
	[propput] HRESULT sfsHomeDir([in] BSTR value);
	[propget] HRESULT createSfsHomeDir([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT createSfsHomeDir([in] DefaultGroupYesNo915 value);
	[propget] HRESULT delIncompleteUploads([out, retval] DefaultGroupYesNo915* result);
	[propput] HRESULT delIncompleteUploads([in] DefaultGroupYesNo915 value);
	[propget] HRESULT moveCompletedUploads([out, retval] IMoveCompletedUploadsWithDefault915** result);
	[propget] HRESULT onUploadCmd([out, retval] IConnOnUploadCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(766838E8-7C4A-4EC2-E41D-DB6D09DF0039),
	dual,
	pointer_default(unique)
]
interface IVirtAccountSessionSetup915 : IDispatch
{
	[propget] HRESULT logonType([out, retval] LogonType915* result);
	[propput] HRESULT logonType([in] LogonType915 value);
	[propget] HRESULT onAccountInfoFailure([out, retval] OnAccountInfoFailure915* result);
	[propput] HRESULT onAccountInfoFailure([in] OnAccountInfoFailure915 value);
	[propget] HRESULT ifTemporaryProfileLoaded([out, retval] IfTemporaryProfileLoaded915* result);
	[propput] HRESULT ifTemporaryProfileLoaded([in] IfTemporaryProfileLoaded915 value);
	[propget] HRESULT useGroupWinSessionStgs([out, retval] BOOL* result);
	[propput] HRESULT useGroupWinSessionStgs([in] BOOL value);
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareVirtAccountSettings915** result);
	[propget] HRESULT shares([out, retval] IFileShares915** result);
	[propget] HRESULT windowsOnLogonCmd([out, retval] IWinOnLogonCommandWithDefault915** result);
	[propget] HRESULT windowsOnLogoffCmd([out, retval] IWinOnLogoffCommandWithDefault915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(39CAB344-93B2-03CE-0362-CF5F22C50EAB),
	dual,
	pointer_default(unique)
]
interface IVirtAccounts915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IVirtAccount915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IVirtAccount915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IVirtAccount915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IVirtAccount915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(2B5A655F-2251-6BB9-A822-0E7BF10D5D35),
	dual,
	pointer_default(unique)
]
interface IVirtAccountsPwdPolicy915 : IDispatch
{
	[propget] HRESULT minPwdLen([out, retval] BYTE* result);
	[propput] HRESULT minPwdLen([in] BYTE value);
	[propget] HRESULT reqAlphaChars([out, retval] BYTE* result);
	[propput] HRESULT reqAlphaChars([in] BYTE value);
	[propget] HRESULT reqNumericChars([out, retval] BYTE* result);
	[propput] HRESULT reqNumericChars([in] BYTE value);
	[propget] HRESULT reqSpecialChars([out, retval] BYTE* result);
	[propput] HRESULT reqSpecialChars([in] BYTE value);
	[propget] HRESULT preventOldPwdReuse([out, retval] BOOL* result);
	[propput] HRESULT preventOldPwdReuse([in] BOOL value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3E64D42D-5D51-A919-2607-FA6D3DE902CE),
	dual,
	pointer_default(unique)
]
interface IVirtGroup915 : IDispatch
{
	[propget] HRESULT group([out, retval] BSTR* result);
	[propput] HRESULT group([in] BSTR value);
	[propget] HRESULT comment([out, retval] BSTR* result);
	[propput] HRESULT comment([in] BSTR value);
	[propget] HRESULT securityContext([out, retval] VirtAcctSecurityContext915* result);
	[propput] HRESULT securityContext([in] VirtAcctSecurityContext915 value);
	[propget] HRESULT winDomain([out, retval] BSTR* result);
	[propput] HRESULT winDomain([in] BSTR value);
	[propget] HRESULT winAccount([out, retval] BSTR* result);
	[propput] HRESULT winAccount([in] BSTR value);
	[propget] HRESULT loginAllowed([out, retval] BOOL* result);
	[propput] HRESULT loginAllowed([in] BOOL value);
	[propget] HRESULT editableByDelegatedAdmin([out, retval] BOOL* result);
	[propput] HRESULT editableByDelegatedAdmin([in] BOOL value);
	[propget] HRESULT limits([out, retval] IGroupLimitsAndQuotas915** result);
	[propget] HRESULT clientAddresses([out, retval] IAddressAcceptRules915** result);
	[propget] HRESULT auth([out, retval] IVirtGroupAuthentication915** result);
	[propget] HRESULT remoteAdminAccess([out, retval] IRemoteAdminAccess915** result);
	[propget] HRESULT connection([out, retval] IVirtGroupConnectionSetup915** result);
	[propget] HRESULT session([out, retval] IVirtGroupSessionSetup915** result);
	[propget] HRESULT term([out, retval] IGroupTerminalAndExec915** result);
	[propget] HRESULT xfer([out, retval] IVirtGroupFileTransfer915** result);
	[propget] HRESULT fwding([out, retval] IGroupForwarding915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(E630F1B1-2061-9AB2-C5C3-4D5F981AB736),
	dual,
	pointer_default(unique)
]
interface IVirtGroupAuthentication915 : IDispatch
{
	[propget] HRESULT passwordAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT passwordAuth([in] AuthDisp915 value);
	[propget] HRESULT pwdExpirationDays([out, retval] ULONG* result);
	[propput] HRESULT pwdExpirationDays([in] ULONG value);
	[propget] HRESULT makeAllAccountsChangePwd([out, retval] BOOL* result);
	[propput] HRESULT makeAllAccountsChangePwd([in] BOOL value);
	[propget] HRESULT publicKeyAuth([out, retval] AuthDisp915* result);
	[propput] HRESULT publicKeyAuth([in] AuthDisp915 value);
	[propget] HRESULT allowKeyManagement([out, retval] BOOL* result);
	[propput] HRESULT allowKeyManagement([in] BOOL value);
	[propget] HRESULT keys([out, retval] IClientKeys915** result);
	[propget] HRESULT totp([out, retval] IGroupKbdiTotp915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(6A9FE91B-E31D-27A1-6918-008D50B00B8A),
	dual,
	pointer_default(unique)
]
interface IVirtGroupConnectionSetup915 : IDispatch
{
	[propget] HRESULT startReexchange([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT startReexchange([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT useGlobalKeepAlive([out, retval] BOOL* result);
	[propput] HRESULT useGlobalKeepAlive([in] BOOL value);
	[propget] HRESULT keepAliveTimeout([out, retval] ULONG* result);
	[propput] HRESULT keepAliveTimeout([in] ULONG value);
	[propget] HRESULT useGlobalConnTimeout([out, retval] BOOL* result);
	[propput] HRESULT useGlobalConnTimeout([in] BOOL value);
	[propget] HRESULT connectionTimeout([out, retval] ULONG* result);
	[propput] HRESULT connectionTimeout([in] ULONG value);
	[propget] HRESULT onLogonCmd([out, retval] IConnOnLogonCommand915** result);
	[propget] HRESULT onLogoffCmd([out, retval] IConnOnLogoffCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3E84E5B2-80D0-1B8A-287C-CAB0CFB4C140),
	dual,
	pointer_default(unique)
]
interface IVirtGroupFileTransfer915 : IDispatch
{
	[propget] HRESULT permitScp([out, retval] BOOL* result);
	[propput] HRESULT permitScp([in] BOOL value);
	[propget] HRESULT permitSftp([out, retval] BOOL* result);
	[propput] HRESULT permitSftp([in] BOOL value);
	[propget] HRESULT permitFtps([out, retval] BOOL* result);
	[propput] HRESULT permitFtps([in] BOOL value);
	[propget] HRESULT loadProfileForFileXfer([out, retval] BOOL* result);
	[propput] HRESULT loadProfileForFileXfer([in] BOOL value);
	[propget] HRESULT omitRelative([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT omitRelative([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT limitToSftp3([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT limitToSftp3([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT useDefaultPosixPerm([out, retval] BOOL* result);
	[propput] HRESULT useDefaultPosixPerm([in] BOOL value);
	[propget] HRESULT posixPermDir([out, retval] BSTR* result);
	[propput] HRESULT posixPermDir([in] BSTR value);
	[propget] HRESULT posixPermFile([out, retval] BSTR* result);
	[propput] HRESULT posixPermFile([in] BSTR value);
	[propget] HRESULT useBvShellWithWinScp([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT useBvShellWithWinScp([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT displayTime([out, retval] DisplayTimeType915* result);
	[propput] HRESULT displayTime([in] DisplayTimeType915 value);
	[propget] HRESULT useDefaultMaxPathLength([out, retval] BOOL* result);
	[propput] HRESULT useDefaultMaxPathLength([in] BOOL value);
	[propget] HRESULT maxPathLength([out, retval] ULONG* result);
	[propput] HRESULT maxPathLength([in] ULONG value);
	[propget] HRESULT allowAltStreams([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowAltStreams([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT allowUnsafeNames([out, retval] DefaultGlobalYesNo915* result);
	[propput] HRESULT allowUnsafeNames([in] DefaultGlobalYesNo915 value);
	[propget] HRESULT mountPoints([out, retval] ISfsMountPoints915** result);
	[propget] HRESULT sfsHomeDir([out, retval] BSTR* result);
	[propput] HRESULT sfsHomeDir([in] BSTR value);
	[propget] HRESULT createSfsHomeDir([out, retval] BOOL* result);
	[propput] HRESULT createSfsHomeDir([in] BOOL value);
	[propget] HRESULT delIncompleteUploads([out, retval] BOOL* result);
	[propput] HRESULT delIncompleteUploads([in] BOOL value);
	[propget] HRESULT moveCompletedUploads([out, retval] IMoveCompletedUploads915** result);
	[propget] HRESULT onUploadCmd([out, retval] IConnOnUploadCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(EF0921EA-3D0A-C7AD-B8E8-41FE9291407D),
	dual,
	pointer_default(unique)
]
interface IVirtGroupSessionSetup915 : IDispatch
{
	[propget] HRESULT logonType([out, retval] LogonType915* result);
	[propput] HRESULT logonType([in] LogonType915 value);
	[propget] HRESULT onAccountInfoFailure([out, retval] OnAccountInfoFailure915* result);
	[propput] HRESULT onAccountInfoFailure([in] OnAccountInfoFailure915 value);
	[propget] HRESULT ifTemporaryProfileLoaded([out, retval] IfTemporaryProfileLoaded915* result);
	[propput] HRESULT ifTemporaryProfileLoaded([in] IfTemporaryProfileLoaded915 value);
	[propget] HRESULT useGlobalWinSessionStgs([out, retval] BOOL* result);
	[propput] HRESULT useGlobalWinSessionStgs([in] BOOL value);
	[propget] HRESULT winSessionSharing([out, retval] BOOL* result);
	[propput] HRESULT winSessionSharing([in] BOOL value);
	[propget] HRESULT winSessionKeepAliveSecs([out, retval] ULONG* result);
	[propput] HRESULT winSessionKeepAliveSecs([in] ULONG value);
	[propget] HRESULT maxWinSessionAgeHours([out, retval] ULONG* result);
	[propput] HRESULT maxWinSessionAgeHours([in] ULONG value);
	[propget] HRESULT windowsFileShareSettings([out, retval] INetworkShareVirtGroupSettings915** result);
	[propget] HRESULT shares([out, retval] IFileShares915** result);
	[propget] HRESULT windowsOnLogonCmd([out, retval] IWinOnLogonCommand915** result);
	[propget] HRESULT windowsOnLogoffCmd([out, retval] IWinOnLogoffCommand915** result);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(2634D1D1-9471-2D57-C996-6D9E637938C8),
	dual,
	pointer_default(unique)
]
interface IVirtGroups915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IVirtGroup915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IVirtGroup915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IVirtGroup915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IVirtGroup915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(CE7A498C-E2C4-D978-60BA-72B0283D2E5A),
	dual,
	pointer_default(unique)
]
interface IVirtualGroupWhitelist915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IVirtualGroupWhitelistEntry915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(A6437795-69A8-1C2F-39DA-86E4184D464F),
	dual,
	pointer_default(unique)
]
interface IVirtualGroupWhitelistEntry915 : IDispatch
{
	[propget] HRESULT group([out, retval] BSTR* result);
	[propput] HRESULT group([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(4CE0374E-E8D5-AE74-250E-E8DD6962B0DB),
	dual,
	pointer_default(unique)
]
interface IWhitelistAddress915 : IDispatch
{
	[propget] HRESULT addressType([out, retval] WhitelistAddressType915* result);
	[propput] HRESULT addressType([in] WhitelistAddressType915 value);
	[propget] HRESULT desc([out, retval] BSTR* result);
	[propput] HRESULT desc([in] BSTR value);
	[propget] HRESULT ipv4range([out, retval] BOOL* result);
	[propput] HRESULT ipv4range([in] BOOL value);
	[propget] HRESULT ipv4([out, retval] BSTR* result);
	[propput] HRESULT ipv4([in] BSTR value);
	[propget] HRESULT ipv4start([out, retval] BSTR* result);
	[propput] HRESULT ipv4start([in] BSTR value);
	[propget] HRESULT ipv4end([out, retval] BSTR* result);
	[propput] HRESULT ipv4end([in] BSTR value);
	[propget] HRESULT ipv6range([out, retval] BOOL* result);
	[propput] HRESULT ipv6range([in] BOOL value);
	[propget] HRESULT ipv6([out, retval] BSTR* result);
	[propput] HRESULT ipv6([in] BSTR value);
	[propget] HRESULT ipv6start([out, retval] BSTR* result);
	[propput] HRESULT ipv6start([in] BSTR value);
	[propget] HRESULT ipv6end([out, retval] BSTR* result);
	[propput] HRESULT ipv6end([in] BSTR value);
	[propget] HRESULT locationType([out, retval] LocationType915* result);
	[propput] HRESULT locationType([in] LocationType915 value);
	[propget] HRESULT countryName([out, retval] BSTR* result);
	[propput] HRESULT countryName([in] BSTR value);
	[propget] HRESULT continentName([out, retval] BSTR* result);
	[propput] HRESULT continentName([in] BSTR value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(5F547737-3243-F670-FA49-83018AC3BCC6),
	dual,
	pointer_default(unique)
]
interface IWhitelistedAddresses915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IWhitelistAddress915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Sort();
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IWhitelistAddress915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IWhitelistAddress915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IWhitelistAddress915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(F788FCBE-9F31-C679-1A39-65ACBA0053FB),
	dual,
	pointer_default(unique)
]
interface IWinAccounts915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IAccount915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IAccount915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IAccount915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IAccount915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IAccount915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IAccount915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IAccount915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IAccount915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IAccount915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IAccount915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IAccount915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IAccount915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(AEF4EABA-99E1-FCB2-DCD7-0E02E33A08CC),
	dual,
	pointer_default(unique)
]
interface IWinGroups915 : IDispatch
{
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();

	HRESULT Clear();
	HRESULT GetItem([in] ULONG index, [out, retval] IGroup915** result);
	HRESULT Erase([in] ULONG index);
	HRESULT Move([in] ULONG from, [in] ULONG to);
	[propget] HRESULT entries([out, retval] SAFEARRAY(VARIANT)* entries);
	[propget] HRESULT count([out, retval] ULONG* result);

	[propget] HRESULT new([out, retval] IGroup915** result);
	HRESULT NewClear();
	HRESULT NewCommit();

	HRESULT ImportCsv([in] BSTR separator, [in] BSTR csvData);
	HRESULT TryImportCsv([in] BSTR separator, [in] BSTR csvData, [out, retval] IImportCsvResult915** result);
	HRESULT ExportCsv([in] BSTR separator, [in] CsvColumnNames915 columnNames, [out, retval] BSTR* pCsvData);

	HRESULT FirstWhere([in] BSTR expression, [out, retval] IGroup915** result);
	HRESULT FirstWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] IGroup915** result);
	HRESULT FirstWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] IGroup915** result);
	HRESULT FirstWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] IGroup915** result);
	HRESULT FirstWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] IGroup915** result);
	HRESULT FirstWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] IGroup915** result);
	HRESULT FirstWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] IGroup915** result);
	HRESULT FirstWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] IGroup915** result);
	HRESULT FirstWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] IGroup915** result);
	HRESULT FirstWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] IGroup915** result);
	HRESULT AllWhere([in] BSTR expression, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere1([in] BSTR expression, [in] BSTR arg1, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT AllWhere9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] SAFEARRAY(VARIANT)* result);
	HRESULT EraseAll([in] BSTR expression, [out, retval] ULONG* result);
	HRESULT EraseAll1([in] BSTR expression, [in] BSTR arg1, [out, retval] ULONG* result);
	HRESULT EraseAll2([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [out, retval] ULONG* result);
	HRESULT EraseAll3([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [out, retval] ULONG* result);
	HRESULT EraseAll4([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [out, retval] ULONG* result);
	HRESULT EraseAll5([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [out, retval] ULONG* result);
	HRESULT EraseAll6([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [out, retval] ULONG* result);
	HRESULT EraseAll7([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [out, retval] ULONG* result);
	HRESULT EraseAll8([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [out, retval] ULONG* result);
	HRESULT EraseAll9([in] BSTR expression, [in] BSTR arg1, [in] BSTR arg2, [in] BSTR arg3, [in] BSTR arg4, [in] BSTR arg5, [in] BSTR arg6, [in] BSTR arg7, [in] BSTR arg8, [in] BSTR arg9, [out, retval] ULONG* result);
};

[
	object,
	uuid(D561908F-70EA-A403-C6EC-B23C41818AD4),
	dual,
	pointer_default(unique)
]
interface IWinOnLogoffCommand915 : IDispatch
{
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(3C867E50-6761-31C2-3397-1BAD2CB1D16E),
	dual,
	pointer_default(unique)
]
interface IWinOnLogoffCommandWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(621FA897-E335-537A-3A2B-D81A2C8703EA),
	dual,
	pointer_default(unique)
]
interface IWinOnLogonCommand915 : IDispatch
{
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(526C8F00-1007-D4CC-102F-A20C77E1AE9C),
	dual,
	pointer_default(unique)
]
interface IWinOnLogonCommandWithDefault915 : IDispatch
{
	[propget] HRESULT useDefault([out, retval] BOOL* result);
	[propput] HRESULT useDefault([in] BOOL value);
	[propget] HRESULT command([out, retval] BSTR* result);
	[propput] HRESULT command([in] BSTR value);
	[propget] HRESULT workDir([out, retval] BSTR* result);
	[propput] HRESULT workDir([in] BSTR value);
	[propget] HRESULT execAsService([out, retval] BOOL* result);
	[propput] HRESULT execAsService([in] BOOL value);
	[propget] HRESULT loadProfile([out, retval] BOOL* result);
	[propput] HRESULT loadProfile([in] BOOL value);
	[propget] HRESULT maxWaitTime([out, retval] ULONG* result);
	[propput] HRESULT maxWaitTime([in] ULONG value);
	[propget] HRESULT jobObject([out, retval] JobObject915* result);
	[propput] HRESULT jobObject([in] JobObject915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};

[
	object,
	uuid(B2BE8057-23A7-DFF4-43CF-C52547EDC1BA),
	dual,
	pointer_default(unique)
]
interface IWindowsFirewall915 : IDispatch
{
	[propget] HRESULT sshPortsFirewallSetting([out, retval] WindowsFirewallSetting915* result);
	[propput] HRESULT sshPortsFirewallSetting([in] WindowsFirewallSetting915 value);
	[propget] HRESULT forwardedPortsFirewallSetting([out, retval] WindowsFirewallSetting915* result);
	[propput] HRESULT forwardedPortsFirewallSetting([in] WindowsFirewallSetting915 value);
	[propget] HRESULT ftpPortsFirewallSetting([out, retval] WindowsFirewallSetting915* result);
	[propput] HRESULT ftpPortsFirewallSetting([in] WindowsFirewallSetting915 value);
	[propget] HRESULT upnpPortsFirewallSetting([out, retval] WindowsFirewallSetting915* result);
	[propput] HRESULT upnpPortsFirewallSetting([in] WindowsFirewallSetting915 value);
	[propget] HRESULT help([out, retval] BSTR* result);
	HRESULT Dump([out, retval] BSTR* result);
	HRESULT DumpEx([in] ShowDefaults915 showDefaults, [out, retval] BSTR* result);
	HRESULT SetDefaults();
};



[
	uuid(AB6ABD81-2E47-EBFE-9239-9416CBF3FF21), version(1)	// Always version 1. When we change anything, we rename everything.
]
library BssCfg915Lib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(15E86472-7162-E9E0-3992-79836E46D7CF)
	]
	coclass CImportCsvResult915
	{
		[default] interface IImportCsvResult915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0A33FAA8-B7CA-308B-498C-4DA68F473AA8)
	]
	coclass CLoadResult915
	{
		[default] interface ILoadResult915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5F9158D7-CB39-6713-51A9-B63C80FBB5A2)
	]
	coclass CBssCfg915
	{
		[default] interface IBssCfg915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A47D4C7A-CF4F-5147-19AD-74103C9A60B5)
	]
	coclass CVersion915
	{
		[default] interface IVersion915;
		interface ISupportErrorInfo;
	};

	[
		uuid(1FB9B4E0-ED4F-98DC-FF90-0E1E27CBCF11)
	]
	coclass CActState915
	{
		[default] interface IActState915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D4EF173A-2BA3-3059-E18C-0ECA6EAD56FD)
	]
	coclass CInstance915
	{
		[default] interface IInstance915;
		interface ISupportErrorInfo;
	};

	[
		uuid(E2285AB4-E380-BE56-386C-9B7DE65E9FB5)
	]
	coclass CInstances915
	{
		[default] interface IInstances915;
		interface ISupportErrorInfo;
	};

	[
		uuid(44E3ED1D-E3AA-2DD6-6D26-4279AB199303)
	]
	coclass CCertificate915
	{
		[default] interface ICertificate915;
		interface ISupportErrorInfo;
	};

	[
		uuid(04CD274B-B57A-2F95-2194-CC87671D2E33)
	]
	coclass CCertificates915
	{
		[default] interface ICertificates915;
		interface ISupportErrorInfo;
	};

	[
		uuid(E7516D95-03E9-28ED-2062-711F3CBACD4B)
	]
	coclass CHostKeypair915
	{
		[default] interface IHostKeypair915;
		interface ISupportErrorInfo;
	};

	[
		uuid(68905B28-7E4C-B46A-923F-DF49A1A6D0E9)
	]
	coclass CHostKeypairs915
	{
		[default] interface IHostKeypairs915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F6CCEA67-31C4-AFD5-1134-2ACFA7E2F85A)
	]
	coclass CPasswordCache915
	{
		[default] interface IPasswordCache915;
		interface ISupportErrorInfo;
	};

	[
		uuid(606F7ADE-E4D3-A81A-D47E-C3119F4DDF37)
	]
	coclass CPopupAndTray915
	{
		[default] interface IPopupAndTray915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F2204AB5-E625-840E-7C2A-C628EF5792D5)
	]
	coclass CHostKey915
	{
		[default] interface IHostKey915;
		interface ISupportErrorInfo;
	};

	[
		uuid(791D8759-4272-1F11-17E3-4D6B4F1C5049)
	]
	coclass CHostKeys915
	{
		[default] interface IHostKeys915;
		interface ISupportErrorInfo;
	};

	[
		uuid(AF46D71C-0CE3-95AD-3D6F-6263BAD02A67)
	]
	coclass CClientKey915
	{
		[default] interface IClientKey915;
		interface ISupportErrorInfo;
	};

	[
		uuid(780B24AD-E3A2-6824-9441-E3AD889B92B5)
	]
	coclass CClientKeys915
	{
		[default] interface IClientKeys915;
		interface ISupportErrorInfo;
	};

	[
		uuid(2AB68DFF-0A70-ED9A-D769-F2268945CF92)
	]
	coclass CPassword915
	{
		[default] interface IPassword915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9E1F7B78-9C74-50C8-868C-E83506FD2DBA)
	]
	coclass CSecretKey915
	{
		[default] interface ISecretKey915;
		interface ISupportErrorInfo;
	};

	[
		uuid(066EB60F-4DC4-E1C3-D277-BC8B85B4ADA4)
	]
	coclass CEvent915
	{
		[default] interface IEvent915;
		interface ISupportErrorInfo;
	};

	[
		uuid(72B31235-C45B-CA10-CFAE-AD6319BBC5E3)
	]
	coclass CEventList915
	{
		[default] interface IEventList915;
		interface ISupportErrorInfo;
	};

	[
		uuid(350CCFBE-E5A1-762A-8959-F22AA7F5DCD9)
	]
	coclass CDkimKeypair915
	{
		[default] interface IDkimKeypair915;
		interface ISupportErrorInfo;
	};

	[
		uuid(E7BAD830-3C68-981C-0A85-4AC86E70150F)
	]
	coclass CPriorityNameList915
	{
		[default] interface IPriorityNameList915;
		interface ISupportErrorInfo;
	};

	[
		uuid(303407AE-23E5-6C77-23AF-C2F38F147A23)
	]
	coclass CClientAuthKeypair915
	{
		[default] interface IClientAuthKeypair915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9795215F-C6F7-4DA5-7A1F-2BD020C2ADB5)
	]
	coclass CSfsEncryptedProviderSettings915
	{
		[default] interface ISfsEncryptedProviderSettings915;
		interface ISupportErrorInfo;
	};

	
	[
		uuid(292FC008-5380-72D1-C7AA-4E4158BBC7B0)
	]
	coclass CAddressVer4Type915
	{
		[default] interface IAddressVer4Type915;
	};

	[
		uuid(B795E42A-B8D2-4CA3-F499-E0BC2D2BA163)
	]
	coclass CAddressVer6Type915
	{
		[default] interface IAddressVer6Type915;
	};

	[
		uuid(7C195B8F-A409-3DD1-3676-7A0BDE0D66BD)
	]
	coclass CAdsiEncryption915
	{
		[default] interface IAdsiEncryption915;
	};

	[
		uuid(6B41F30A-5640-AC27-A0F8-989C57DBB1AB)
	]
	coclass CAuthDisp915
	{
		[default] interface IAuthDisp915;
	};

	[
		uuid(76BABB0D-0C80-E0D2-E832-745369524F2C)
	]
	coclass CAutoManageHostKeys915
	{
		[default] interface IAutoManageHostKeys915;
	};

	[
		uuid(DC94D11A-1D53-C17B-8561-C0A8F6BE04F9)
	]
	coclass CAutomaticIpBlocking915
	{
		[default] interface IAutomaticIpBlocking915;
	};

	[
		uuid(9DF53C61-FC47-3740-5DF2-4A78AD740BF8)
	]
	coclass CAutomaticUpdatesType915
	{
		[default] interface IAutomaticUpdatesType915;
	};

	[
		uuid(C88068F9-336C-D674-967C-1F028F1553E8)
	]
	coclass CBandwidthLimit915
	{
		[default] interface IBandwidthLimit915;
	};

	[
		uuid(D8F76406-293C-D14F-EB09-A41BEDA27B87)
	]
	coclass CBandwidthType915
	{
		[default] interface IBandwidthType915;
	};

	[
		uuid(19806970-62B3-5CC0-77E8-EA28F4D103D9)
	]
	coclass CCertAlgId915
	{
		[default] interface ICertAlgId915;
	};

	[
		uuid(7BF6EBF4-5C01-011A-6BBB-0284D2251E56)
	]
	coclass CCertificateFormat915
	{
		[default] interface ICertificateFormat915;
	};

	[
		uuid(82E0AE1C-0700-8A12-9B26-3B0C98F10772)
	]
	coclass CCertificateType915
	{
		[default] interface ICertificateType915;
	};

	[
		uuid(F029E28C-E8D9-A16A-9B15-11B93835F643)
	]
	coclass CConsoleVersion915
	{
		[default] interface IConsoleVersion915;
	};

	[
		uuid(C739AF33-7461-69D4-2280-E811B84486AE)
	]
	coclass CCsvColumnNames915
	{
		[default] interface ICsvColumnNames915;
	};

	[
		uuid(2EC049AA-A15C-5426-9FBB-DBA3D3689CE5)
	]
	coclass CCustomSubsysAccess915
	{
		[default] interface ICustomSubsysAccess915;
	};

	[
		uuid(202E858C-81B6-124C-DA25-1D628232630E)
	]
	coclass CDayChoice915
	{
		[default] interface IDayChoice915;
	};

	[
		uuid(64519D57-2473-F228-D990-1EF3A7299CBE)
	]
	coclass CDefaultGlobalYesNo915
	{
		[default] interface IDefaultGlobalYesNo915;
	};

	[
		uuid(80E76C15-CFD8-0264-52ED-3F0EB5B40D79)
	]
	coclass CDefaultGroupYesNo915
	{
		[default] interface IDefaultGroupYesNo915;
	};

	[
		uuid(F9427413-8872-9570-87AC-20A145FA8ECC)
	]
	coclass CDefaultYesNo915
	{
		[default] interface IDefaultYesNo915;
	};

	[
		uuid(D7BC23F9-D4DE-8673-A7DF-A39EC1FEC4F3)
	]
	coclass CDirHandleMisuse915
	{
		[default] interface IDirHandleMisuse915;
	};

	[
		uuid(8C24A5C0-2B7B-D402-022F-3C6274293F87)
	]
	coclass CDisplayTimeType915
	{
		[default] interface IDisplayTimeType915;
	};

	[
		uuid(87505FDC-3F2F-5F4B-79D3-F78CB25DC6EA)
	]
	coclass CDuplicateTaskPolicy915
	{
		[default] interface IDuplicateTaskPolicy915;
	};

	[
		uuid(D9CEC0A5-385E-1803-697A-9CD5214145CA)
	]
	coclass CEmailSending915
	{
		[default] interface IEmailSending915;
	};

	[
		uuid(AE287D40-15AE-A3D6-5631-C8C9EDD03A23)
	]
	coclass CEmulateCheckFile915
	{
		[default] interface IEmulateCheckFile915;
	};

	[
		uuid(35D944EA-EA0B-CD55-4BA5-B1EB80C8C864)
	]
	coclass CEmulateTextMode915
	{
		[default] interface IEmulateTextMode915;
	};

	[
		uuid(8C12BF89-C521-2A20-5502-6E8945B35FAE)
	]
	coclass CEmulateTextNewline915
	{
		[default] interface IEmulateTextNewline915;
	};

	[
		uuid(D8094BFA-3198-37E7-32AD-43E91E0184C3)
	]
	coclass CEventType915
	{
		[default] interface IEventType915;
	};

	[
		uuid(ABBBFC79-1182-AEB0-EB23-9AAB2871C5F8)
	]
	coclass CFileSharing915
	{
		[default] interface IFileSharing915;
	};

	[
		uuid(F94C8A82-2900-14A9-0F1D-80229C3870E1)
	]
	coclass CFileSharingBeh915
	{
		[default] interface IFileSharingBeh915;
	};

	[
		uuid(23A62BD0-F9E1-2677-3AB4-ED2E48C29130)
	]
	coclass CGitType915
	{
		[default] interface IGitType915;
	};

	[
		uuid(69DA0330-DC84-6854-804B-2AE10EC23317)
	]
	coclass CGlobalAuthMethod915
	{
		[default] interface IGlobalAuthMethod915;
	};

	[
		uuid(AA1BB3F5-EEE8-A8CB-EF00-36455F94A858)
	]
	coclass CGlobalGssApiAuth915
	{
		[default] interface IGlobalGssApiAuth915;
	};

	[
		uuid(9AEDB430-8EE6-9DCF-3CFA-23E66FA32FAE)
	]
	coclass CGlobalRequestCapable915
	{
		[default] interface IGlobalRequestCapable915;
	};

	[
		uuid(1F2AF97F-E518-513B-9915-587520E8FB21)
	]
	coclass CGroupType915
	{
		[default] interface IGroupType915;
	};

	[
		uuid(3C724D44-6C03-80F0-2598-1A3286180D98)
	]
	coclass CGssKex915
	{
		[default] interface IGssKex915;
	};

	[
		uuid(31249C5D-3B63-0C2F-A1A0-E1502C43AA4F)
	]
	coclass CHostKeyType915
	{
		[default] interface IHostKeyType915;
	};

	[
		uuid(F1572FF3-4C92-181E-F470-A6793E07BB5C)
	]
	coclass CIfTemporaryProfileLoaded915
	{
		[default] interface IIfTemporaryProfileLoaded915;
	};

	[
		uuid(BFFB3CC2-9493-397F-02F1-C5D199DCDAD3)
	]
	coclass CImageFileFormat915
	{
		[default] interface IImageFileFormat915;
	};

	[
		uuid(E9D2A843-6382-7378-D171-60E73A2DB73D)
	]
	coclass CInstanceType915
	{
		[default] interface IInstanceType915;
	};

	[
		uuid(B2AF77A2-204A-7EB2-5907-BE2201561B12)
	]
	coclass CInterfaceType915
	{
		[default] interface IInterfaceType915;
	};

	[
		uuid(1D4468E4-F4F5-CFFC-1E53-DBC3848AD25B)
	]
	coclass CIpListType915
	{
		[default] interface IIpListType915;
	};

	[
		uuid(DF485844-67E1-F0E1-EA24-B1566CE8A52D)
	]
	coclass CIpVersionType915
	{
		[default] interface IIpVersionType915;
	};

	[
		uuid(0ABAAF02-D447-4E16-2402-DEE212C91C43)
	]
	coclass CIpVersionWN915
	{
		[default] interface IIpVersionWN915;
	};

	[
		uuid(3AE185DF-9D58-57DF-04CB-C415D8C6961B)
	]
	coclass CJobObject915
	{
		[default] interface IJobObject915;
	};

	[
		uuid(E4057C3D-76AE-6E9F-A2FF-982823E5696B)
	]
	coclass CKbdiTotpAlg915
	{
		[default] interface IKbdiTotpAlg915;
	};

	[
		uuid(8B29CDB7-9A82-65B2-8063-8A00F573F546)
	]
	coclass CKbdiTotpAuth915
	{
		[default] interface IKbdiTotpAuth915;
	};

	[
		uuid(0A0BF757-4327-70B6-0051-F3AE6610FC7D)
	]
	coclass CKbdiTotpNumDigits915
	{
		[default] interface IKbdiTotpNumDigits915;
	};

	[
		uuid(1E285700-13CE-637C-E6F5-453CCDE2169D)
	]
	coclass CKeypairAlgId915
	{
		[default] interface IKeypairAlgId915;
	};

	[
		uuid(A21BB593-5666-7BA3-4C4F-5FFD9306F65B)
	]
	coclass CKeypairFormat915
	{
		[default] interface IKeypairFormat915;
	};

	[
		uuid(64702A06-D7EE-C287-4A24-F3897236E3DA)
	]
	coclass CLicenseType915
	{
		[default] interface ILicenseType915;
	};

	[
		uuid(07A1692E-EBD5-22D3-DA3F-DE6A2F0F7C4C)
	]
	coclass CLocationType915
	{
		[default] interface ILocationType915;
	};

	[
		uuid(6DD3583E-F4FA-385F-B3CE-869796B16734)
	]
	coclass CLogArchivalPathType915
	{
		[default] interface ILogArchivalPathType915;
	};

	[
		uuid(0570A224-5574-0E5E-E333-95E222221B7F)
	]
	coclass CLogFileWriteCloseTag915
	{
		[default] interface ILogFileWriteCloseTag915;
	};

	[
		uuid(0F68FF9B-9D67-9324-4817-2BE710444ED5)
	]
	coclass CLogLevel_EW915
	{
		[default] interface ILogLevel_EW915;
	};

	[
		uuid(EF85A8B0-070E-1FD4-2B26-1F10CE2579CC)
	]
	coclass CLogLevel_EWI915
	{
		[default] interface ILogLevel_EWI915;
	};

	[
		uuid(A712D590-4D0F-5B4F-CA4E-B6170F54353F)
	]
	coclass CLogLevel_EWIT915
	{
		[default] interface ILogLevel_EWIT915;
	};

	[
		uuid(41271B82-6ACD-B741-810B-93838CE0CD5B)
	]
	coclass CLogLevel_EWITD915
	{
		[default] interface ILogLevel_EWITD915;
	};

	[
		uuid(BCDC7893-252A-B833-1B76-5D9CCF7C9EC2)
	]
	coclass CLogonType915
	{
		[default] interface ILogonType915;
	};

	[
		uuid(E0017090-FAC6-AF47-B6BF-6607E67ECB34)
	]
	coclass CLookupDirection915
	{
		[default] interface ILookupDirection915;
	};

	[
		uuid(F2241496-CB6B-0D24-200D-7F660952F7BC)
	]
	coclass CNoFlowControl915
	{
		[default] interface INoFlowControl915;
	};

	[
		uuid(8082B6D3-E549-28E1-9931-041BFF5D8DCB)
	]
	coclass COmitDefaults915
	{
		[default] interface IOmitDefaults915;
	};

	[
		uuid(3956923A-6184-62E7-0385-05470E02F743)
	]
	coclass COnAccountInfoFailure915
	{
		[default] interface IOnAccountInfoFailure915;
	};

	[
		uuid(EE0BDA70-EAA8-89CB-E461-79C8FC952E22)
	]
	coclass COnDestinationExist915
	{
		[default] interface IOnDestinationExist915;
	};

	[
		uuid(50CCB2DF-5634-41A2-D6C1-BC3A8D95DBA6)
	]
	coclass COnDnsResolvingError915
	{
		[default] interface IOnDnsResolvingError915;
	};

	[
		uuid(ABA60515-E888-DCC0-2D0A-1621FE1E3C59)
	]
	coclass COnLogFileError915
	{
		[default] interface IOnLogFileError915;
	};

	[
		uuid(CA5B1FAA-154C-4205-9F05-8ECE4DE093E9)
	]
	coclass COnMoveCompletedUploadFailure915
	{
		[default] interface IOnMoveCompletedUploadFailure915;
	};

	[
		uuid(0A1ECD0D-8749-BF67-BEAF-0CA7B852339D)
	]
	coclass COnRememberedSharesListFailure915
	{
		[default] interface IOnRememberedSharesListFailure915;
	};

	[
		uuid(4EC0B328-E4E6-1CCC-4CC4-DF995E068DA2)
	]
	coclass COnShareConnectFailure915
	{
		[default] interface IOnShareConnectFailure915;
	};

	[
		uuid(3396D3BF-4DF2-664C-75E7-9320EF831E8A)
	]
	coclass COnStatsQuotaReached915
	{
		[default] interface IOnStatsQuotaReached915;
	};

	[
		uuid(96186B5F-440B-623F-F4D1-69C3A96FB276)
	]
	coclass COverrideListeningInterface915
	{
		[default] interface IOverrideListeningInterface915;
	};

	[
		uuid(62DD48E1-03CB-9EC8-1DEB-59F5B5F009C6)
	]
	coclass CPermitMoveExist915
	{
		[default] interface IPermitMoveExist915;
	};

	[
		uuid(EF39D30D-C2B7-DBC5-4F31-9C7FA56DC5B2)
	]
	coclass CPopupMode915
	{
		[default] interface IPopupMode915;
	};

	[
		uuid(18809DBD-BA52-31EA-A640-E3D09685F153)
	]
	coclass CPriorityClass915
	{
		[default] interface IPriorityClass915;
	};

	[
		uuid(A51CBB52-038A-B164-B1FA-FD293569AEE4)
	]
	coclass CProxyProtocol915
	{
		[default] interface IProxyProtocol915;
	};

	[
		uuid(D8BFB6C5-0E70-4CF9-89DE-3F46C2386F98)
	]
	coclass CProxyType915
	{
		[default] interface IProxyType915;
	};

	[
		uuid(F19A9C4E-AFE0-9194-4AC7-7328D81F478A)
	]
	coclass CPublicKeyFormat915
	{
		[default] interface IPublicKeyFormat915;
	};

	[
		uuid(B5173172-E84B-D085-4542-0EA70C92F9D6)
	]
	coclass CPwCacheAutoSave915
	{
		[default] interface IPwCacheAutoSave915;
	};

	[
		uuid(017861E1-5DE7-EE5A-99D2-E86BE6004B8B)
	]
	coclass CRemoteAdminAccessType915
	{
		[default] interface IRemoteAdminAccessType915;
	};

	[
		uuid(7620537C-BC7F-6359-EED5-F520C361E2D1)
	]
	coclass CSendBannerMessage915
	{
		[default] interface ISendBannerMessage915;
	};

	[
		uuid(96EEBA74-5812-5392-59C0-EF7E4FA92AC0)
	]
	coclass CServiceType915
	{
		[default] interface IServiceType915;
	};

	[
		uuid(5A01B862-0566-6531-5D72-B59CC88C8B55)
	]
	coclass CSfsMountType915
	{
		[default] interface ISfsMountType915;
	};

	[
		uuid(A7A601FE-866B-A9B5-3364-5EB6462254FA)
	]
	coclass CSfsProviderAcl915
	{
		[default] interface ISfsProviderAcl915;
	};

	[
		uuid(C050CBB5-11C5-5D67-DA53-0D7D9379ED91)
	]
	coclass CSfsProviderOwnerGroup915
	{
		[default] interface ISfsProviderOwnerGroup915;
	};

	[
		uuid(6E6AD3B9-E801-0A57-22B0-BB61B369ECD3)
	]
	coclass CShellAccess915
	{
		[default] interface IShellAccess915;
	};

	[
		uuid(9B694FC9-2CE4-1ABF-0122-3309325CCFF4)
	]
	coclass CShowDefaults915
	{
		[default] interface IShowDefaults915;
	};

	[
		uuid(E1CCB31D-CECB-DA1E-77BC-0ADD977B756A)
	]
	coclass CSmtpAuthType915
	{
		[default] interface ISmtpAuthType915;
	};

	[
		uuid(6DC1651E-C926-9D26-DFB0-9761972E36C8)
	]
	coclass CTaskElevation915
	{
		[default] interface ITaskElevation915;
	};

	[
		uuid(BA3EDF3E-ABA7-4D75-311C-989FBCE75077)
	]
	coclass CTaskOutputCodePage915
	{
		[default] interface ITaskOutputCodePage915;
	};

	[
		uuid(B191A7AD-7191-F32B-2777-A8F5423187C9)
	]
	coclass CTaskSecurityContext915
	{
		[default] interface ITaskSecurityContext915;
	};

	[
		uuid(38419DAB-7B1E-BA60-6B1D-81845AB3DA33)
	]
	coclass CTaskShutdownPolicy915
	{
		[default] interface ITaskShutdownPolicy915;
	};

	[
		uuid(D4033EE2-33F1-C3A0-01BB-5252A798B31D)
	]
	coclass CTaskTriggerEvent915
	{
		[default] interface ITaskTriggerEvent915;
	};

	[
		uuid(C429FB58-70FD-7841-4E54-2AF8124BAF1A)
	]
	coclass CTaskTriggerPeriod915
	{
		[default] interface ITaskTriggerPeriod915;
	};

	[
		uuid(E3A46E3F-5054-0F91-116D-1A9AA1EBE7FD)
	]
	coclass CTaskTriggerType915
	{
		[default] interface ITaskTriggerType915;
	};

	[
		uuid(4E29C1DF-B450-0E23-3A1F-1E45B9D830D8)
	]
	coclass CTaskType915
	{
		[default] interface ITaskType915;
	};

	[
		uuid(CCD0A17C-D413-1829-A108-C530338206DF)
	]
	coclass CTerminalCodePage915
	{
		[default] interface ITerminalCodePage915;
	};

	[
		uuid(42FE531C-BCA2-AE98-D2E6-ACC69987AD15)
	]
	coclass CTlsAssuranceDirect915
	{
		[default] interface ITlsAssuranceDirect915;
	};

	[
		uuid(0647EDEB-91D6-F1B0-B552-1739527FD6CF)
	]
	coclass CTlsAssuranceRelay915
	{
		[default] interface ITlsAssuranceRelay915;
	};

	[
		uuid(EC44C669-ECF4-4238-8E0B-8F38B7AADC70)
	]
	coclass CUpdateDownloadMethod915
	{
		[default] interface IUpdateDownloadMethod915;
	};

	[
		uuid(6D1A68D6-08AD-0055-D1D3-7F367EFF9D8A)
	]
	coclass CUserAuthType915
	{
		[default] interface IUserAuthType915;
	};

	[
		uuid(0C672CA3-144C-22B5-0BF9-73F7C8833BB9)
	]
	coclass CVirtAcctSecurityContext915
	{
		[default] interface IVirtAcctSecurityContext915;
	};

	[
		uuid(9634ACB2-9857-E223-F946-A7388A13C189)
	]
	coclass CWhitelistAddressType915
	{
		[default] interface IWhitelistAddressType915;
	};

	[
		uuid(22687975-0D42-9F5F-ED4F-17F69C6C41C0)
	]
	coclass CWinAccountType915
	{
		[default] interface IWinAccountType915;
	};

	[
		uuid(D67192F1-A8EE-A6E2-1C59-BFB0F4CAB393)
	]
	coclass CWindowsFirewallSetting915
	{
		[default] interface IWindowsFirewallSetting915;
	};

	[
		uuid(6B0460EC-684F-2DBB-262E-C1E1F8A56291)
	]
	coclass CAcceptInstructions915
	{
		[default] interface IAcceptInstructions915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4A1003F8-D72B-086E-A4EE-E836BFF84185)
	]
	coclass CAccessControl915
	{
		[default] interface IAccessControl915;
		interface ISupportErrorInfo;
	};

	[
		uuid(E43E3FCF-C935-48A1-84C3-8E7021E617B3)
	]
	coclass CAccount915
	{
		[default] interface IAccount915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B37944D2-4DBB-2CE2-C700-8C5BCA6048C1)
	]
	coclass CAccountAuthentication915
	{
		[default] interface IAccountAuthentication915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8EE1BDBF-F9CB-AC37-9742-AD13535B3CAB)
	]
	coclass CAccountConnectionSetup915
	{
		[default] interface IAccountConnectionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5CDD6BF2-83FC-6370-3888-FDA2C95724E5)
	]
	coclass CAccountFileTransfer915
	{
		[default] interface IAccountFileTransfer915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A4FC6EFC-D21E-7164-41C8-F44BE8C96B6A)
	]
	coclass CAccountForwarding915
	{
		[default] interface IAccountForwarding915;
		interface ISupportErrorInfo;
	};

	[
		uuid(41165852-9962-5824-9776-0935012A3F4A)
	]
	coclass CAccountKbdiTotp915
	{
		[default] interface IAccountKbdiTotp915;
		interface ISupportErrorInfo;
	};

	[
		uuid(FBF7C00F-2F6B-5B69-5B4C-4388898BD8AA)
	]
	coclass CAccountLimitsAndQuotas915
	{
		[default] interface IAccountLimitsAndQuotas915;
		interface ISupportErrorInfo;
	};

	[
		uuid(744F8019-8EA7-EC73-0B94-A8ED3EB0A752)
	]
	coclass CAccountSessionSetup915
	{
		[default] interface IAccountSessionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(1F294C45-3321-5E89-8997-E97D1252F423)
	]
	coclass CAccountTerminalAndExec915
	{
		[default] interface IAccountTerminalAndExec915;
		interface ISupportErrorInfo;
	};

	[
		uuid(196C8ABD-875B-ADB7-2C6C-B046C4A53DE4)
	]
	coclass CAccountTerminalShellSettings915
	{
		[default] interface IAccountTerminalShellSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A6422F70-33FC-DCAB-0145-852AD69EC092)
	]
	coclass CAdditionalDomains915
	{
		[default] interface IAdditionalDomains915;
		interface ISupportErrorInfo;
	};

	[
		uuid(99AFBA8A-F16F-C412-6901-A1C2008355F3)
	]
	coclass CAdditionalDomainsEntry915
	{
		[default] interface IAdditionalDomainsEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(31D15DC0-302D-AFA4-397E-6BC7AF74A9AF)
	]
	coclass CAddressAcceptRule915
	{
		[default] interface IAddressAcceptRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8EED65AD-0C86-7A61-05A1-54E6DF8A9357)
	]
	coclass CAddressAcceptRuleForIPv4_915
	{
		[default] interface IAddressAcceptRuleForIPv4_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F80D0665-A4B5-D488-5335-FE5D64BD00A2)
	]
	coclass CAddressAcceptRules915
	{
		[default] interface IAddressAcceptRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(94143EAF-90FF-1511-BFE6-22826DDC445F)
	]
	coclass CAddressAcceptRulesForIPv4_915
	{
		[default] interface IAddressAcceptRulesForIPv4_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F7E7126A-9FD3-EA57-16A7-50E817C5FA0F)
	]
	coclass CAddressRule915
	{
		[default] interface IAddressRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9815007C-0E61-4CA2-DD37-3D591983EA0F)
	]
	coclass CAddressRuleIPv6_915
	{
		[default] interface IAddressRuleIPv6_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(02BF5879-D756-C215-D19F-CB010486DABC)
	]
	coclass CAllowAcceptInstructions915
	{
		[default] interface IAllowAcceptInstructions915;
		interface ISupportErrorInfo;
	};

	[
		uuid(83B69C82-1F61-F23E-3342-2F1DB3CE6A50)
	]
	coclass CAllowAddressAcceptRule915
	{
		[default] interface IAllowAddressAcceptRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(50C8C3FB-93B5-D98F-7A2D-845DC1F615BE)
	]
	coclass CBindingIpv4_915
	{
		[default] interface IBindingIpv4_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D005D73C-279D-2619-A019-D206B4C0524E)
	]
	coclass CBindingIpv6_915
	{
		[default] interface IBindingIpv6_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(05D5C1CC-D1ED-F5AD-0DEF-90DFD9651372)
	]
	coclass CBindings915
	{
		[default] interface IBindings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3D9FA7AD-9726-B80E-3D99-14DCCF1F2184)
	]
	coclass CBindingsIpv4_915
	{
		[default] interface IBindingsIpv4_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D21309BE-8388-98AF-6523-2B63936F763D)
	]
	coclass CBindingsIpv6_915
	{
		[default] interface IBindingsIpv6_915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8EDDFADD-66CF-E3B9-4B8F-25FFD47403C3)
	]
	coclass CClientVersionRule915
	{
		[default] interface IClientVersionRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(796FA2A6-702A-7291-FA80-181BC6B25B1A)
	]
	coclass CClientVersionRules915
	{
		[default] interface IClientVersionRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(80D309CF-1284-BF06-1FB9-B5AC60750AA0)
	]
	coclass CCompression915
	{
		[default] interface ICompression915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5D163BD0-EA39-B72D-583F-FDD04E40F23A)
	]
	coclass CConnOnLogoffCommand915
	{
		[default] interface IConnOnLogoffCommand915;
		interface ISupportErrorInfo;
	};

	[
		uuid(2F7FCB28-F72F-B3D5-6298-F5CD6B1EF948)
	]
	coclass CConnOnLogoffCommandWithDefault915
	{
		[default] interface IConnOnLogoffCommandWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(80823B31-D84D-6773-ECCA-2B36490331A3)
	]
	coclass CConnOnLogonCommand915
	{
		[default] interface IConnOnLogonCommand915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8DAC52B4-01C8-A775-8F31-C1EDC4952E18)
	]
	coclass CConnOnLogonCommandWithDefault915
	{
		[default] interface IConnOnLogonCommandWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4BE0361A-684B-DF9C-8289-E7B320B06492)
	]
	coclass CConnOnUploadCommand915
	{
		[default] interface IConnOnUploadCommand915;
		interface ISupportErrorInfo;
	};

	[
		uuid(648E7D1C-4F00-2E14-A48E-44388E2371F8)
	]
	coclass CConnOnUploadCommandWithDefault915
	{
		[default] interface IConnOnUploadCommandWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D108CD32-4B4B-B10B-D83F-BCAEF3D14E85)
	]
	coclass CConnectInstructions915
	{
		[default] interface IConnectInstructions915;
		interface ISupportErrorInfo;
	};

	[
		uuid(05E13318-7649-F79E-E03E-74FB3CF5A33E)
	]
	coclass CConnectProfile915
	{
		[default] interface IConnectProfile915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BA364437-AE5B-CEEA-7F9E-29828E8F6DE8)
	]
	coclass CConnectProfiles915
	{
		[default] interface IConnectProfiles915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3C7BFC44-B1C8-1D6C-F353-AFCE4D39DAB6)
	]
	coclass CConnectRuleWithDefault915
	{
		[default] interface IConnectRuleWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(94398B8F-EA0F-D320-6EDE-67AB6D80DACA)
	]
	coclass CConnectRuleWithProfileInfo915
	{
		[default] interface IConnectRuleWithProfileInfo915;
		interface ISupportErrorInfo;
	};

	[
		uuid(E459921D-4881-DB5A-97B2-83ACECBF2CA5)
	]
	coclass CConnectRulesWithDefault915
	{
		[default] interface IConnectRulesWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F159D786-8140-21BA-3098-E096DCBDA5A0)
	]
	coclass CConnectRulesWithProfileInfo915
	{
		[default] interface IConnectRulesWithProfileInfo915;
		interface ISupportErrorInfo;
	};

	[
		uuid(1F034A1B-3DAC-F2CD-093C-666AE263E973)
	]
	coclass CConnections915
	{
		[default] interface IConnections915;
		interface ISupportErrorInfo;
	};

	[
		uuid(16EBAB4A-F0E5-A07A-7E91-F3F4056AB1F5)
	]
	coclass CCustomSubsystem915
	{
		[default] interface ICustomSubsystem915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B18F287F-28B7-5F5F-77B2-6ED76F52BC2E)
	]
	coclass CCustomSubsystems915
	{
		[default] interface ICustomSubsystems915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0EF0EDCA-250F-3389-B9E4-9144F286CA99)
	]
	coclass CDayOccurrenceGroup915
	{
		[default] interface IDayOccurrenceGroup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8599171A-1E31-0CE8-55B1-EE98DB6B8B85)
	]
	coclass CDayOfWeekGroup915
	{
		[default] interface IDayOfWeekGroup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CE2B5E42-A41A-A235-32B9-C66A8C91BF70)
	]
	coclass CDebugging915
	{
		[default] interface IDebugging915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D866F03B-E928-EE73-B027-7A6536F5D2EB)
	]
	coclass CDenialOfServiceProtection915
	{
		[default] interface IDenialOfServiceProtection915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4FC90071-6D37-5946-9419-C1875AF39570)
	]
	coclass CDomainOrder915
	{
		[default] interface IDomainOrder915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5D10E90B-319B-8B12-EC9D-8AD008E6D87A)
	]
	coclass CDomainOrderEntry915
	{
		[default] interface IDomainOrderEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F09D4DF5-AAEA-0311-E7FC-2319E5F4C8AC)
	]
	coclass CEncryptedVolume915
	{
		[default] interface IEncryptedVolume915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C27134A5-EEAC-F007-E1B2-D4A6AFDB50F6)
	]
	coclass CEncryptedVolumes915
	{
		[default] interface IEncryptedVolumes915;
		interface ISupportErrorInfo;
	};

	[
		uuid(57185540-155C-4F44-503E-5A914855E6B6)
	]
	coclass CEncryption915
	{
		[default] interface IEncryption915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B9EB4088-91CB-0439-CBE7-C8E2EF7F3905)
	]
	coclass CEnumerations915
	{
		[default] interface IEnumerations915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D3692018-D4F8-A788-5417-B71AC19CB839)
	]
	coclass CFileShare915
	{
		[default] interface IFileShare915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B375BEE2-7A0F-2029-6AFF-0A7862FC1F80)
	]
	coclass CFileShares915
	{
		[default] interface IFileShares915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0F3CE747-BDE7-DE6A-7AFA-0FEA6E1D33FF)
	]
	coclass CFileTransferSettings915
	{
		[default] interface IFileTransferSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4D6EF677-714C-49B0-00B7-825FAF31C324)
	]
	coclass CFollowerSettings915
	{
		[default] interface IFollowerSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(2C0B16DD-51F6-2B6B-7ECE-9CFA476979C5)
	]
	coclass CGlobalKbdiTotp915
	{
		[default] interface IGlobalKbdiTotp915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BDE89B12-B2DA-E2A0-FCCF-B4C5D72C67BF)
	]
	coclass CGroup915
	{
		[default] interface IGroup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C560877E-E51C-9BDD-4FD9-66C5D85DF6C8)
	]
	coclass CGroupAuthentication915
	{
		[default] interface IGroupAuthentication915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A01454EB-65E0-7C53-D827-37D25DB62FAE)
	]
	coclass CGroupConnectionSetup915
	{
		[default] interface IGroupConnectionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D3C0E34A-6FBC-7115-8BFF-185254E3C76C)
	]
	coclass CGroupFileTransfer915
	{
		[default] interface IGroupFileTransfer915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A6C9E63F-C564-E7F3-3810-66FB68998A94)
	]
	coclass CGroupForwarding915
	{
		[default] interface IGroupForwarding915;
		interface ISupportErrorInfo;
	};

	[
		uuid(35820A29-7B8D-512D-41E9-0112AB443B17)
	]
	coclass CGroupKbdiTotp915
	{
		[default] interface IGroupKbdiTotp915;
		interface ISupportErrorInfo;
	};

	[
		uuid(31D879B6-7330-3EBC-ADBB-4EB1F2083DAF)
	]
	coclass CGroupLimitsAndQuotas915
	{
		[default] interface IGroupLimitsAndQuotas915;
		interface ISupportErrorInfo;
	};

	[
		uuid(67A52AEA-14ED-E1D6-44EA-6813774FFDAE)
	]
	coclass CGroupSessionSetup915
	{
		[default] interface IGroupSessionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D68A9A99-3804-E764-27BF-84C54FD16A14)
	]
	coclass CGroupTerminalAndExec915
	{
		[default] interface IGroupTerminalAndExec915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7678286C-E7AA-19C2-ACFC-0308C84CE525)
	]
	coclass CGroupTerminalShellSettings915
	{
		[default] interface IGroupTerminalShellSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BA4B9AA6-EA4C-6E0E-86FC-F8EF709A391D)
	]
	coclass CHealthMonitoring915
	{
		[default] interface IHealthMonitoring915;
		interface ISupportErrorInfo;
	};

	[
		uuid(87D26BDB-7678-F964-2DAB-6B88B3D9DBD7)
	]
	coclass CInstanceTypeSettings915
	{
		[default] interface IInstanceTypeSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A0CD9C98-AAF6-8E13-1E1B-4781BD12A405)
	]
	coclass CInterfaceRule915
	{
		[default] interface IInterfaceRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9219F03E-9779-2948-F3A3-9BC82F1F55BB)
	]
	coclass CIpBlocking915
	{
		[default] interface IIpBlocking915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0D5D7F65-8B4E-7065-8E06-9B94997A2D93)
	]
	coclass CKex915
	{
		[default] interface IKex915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7C02A53B-AD5D-4CCE-9E17-C5AF2E93CABA)
	]
	coclass CListenInstructions915
	{
		[default] interface IListenInstructions915;
		interface ISupportErrorInfo;
	};

	[
		uuid(264775CB-18BC-1858-8607-C656FCDC4117)
	]
	coclass CListenRule915
	{
		[default] interface IListenRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BDEFF902-D634-698E-ADD8-510C50FCA312)
	]
	coclass CListeningRules915
	{
		[default] interface IListeningRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(586E7610-64E5-4433-56C1-5F24BCC47650)
	]
	coclass CLogging915
	{
		[default] interface ILogging915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0294B66E-7CF8-2DCF-CDC1-5B44438CBFFF)
	]
	coclass CMac915
	{
		[default] interface IMac915;
		interface ISupportErrorInfo;
	};

	[
		uuid(386F80B5-8804-E1AE-8934-98079A7FE9FB)
	]
	coclass CMaintenancePeriod915
	{
		[default] interface IMaintenancePeriod915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3EF970D7-DB04-F669-AD4C-95D321082E56)
	]
	coclass CMaintenancePeriods915
	{
		[default] interface IMaintenancePeriods915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4076C30B-7E08-935B-FE6D-2D3EECB133B8)
	]
	coclass CMasterSettings915
	{
		[default] interface IMasterSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B5BE96E0-940B-6010-6605-9F36101CDCC5)
	]
	coclass CMonitoredVolume915
	{
		[default] interface IMonitoredVolume915;
		interface ISupportErrorInfo;
	};

	[
		uuid(564CCD1D-9093-FF92-5632-FCC752DF7897)
	]
	coclass CMonitoredVolumes915
	{
		[default] interface IMonitoredVolumes915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0777F526-8090-F5D3-DEFB-D1FDAF79F041)
	]
	coclass CMonthGroup915
	{
		[default] interface IMonthGroup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3EB5CEAC-AF91-C902-6B04-3A3EE8931D63)
	]
	coclass CMountPointAddressAcceptRules915
	{
		[default] interface IMountPointAddressAcceptRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(07232C6D-B763-7804-BFC8-2BE0C1FE2E06)
	]
	coclass CMountPointRootPathWhitelist915
	{
		[default] interface IMountPointRootPathWhitelist915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A8E3C637-F2B6-C2B1-DF28-995E0912B546)
	]
	coclass CMountPointRootPathWhitelistEntry915
	{
		[default] interface IMountPointRootPathWhitelistEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(945F5EAC-E5DD-1591-7693-E8D1FE158F92)
	]
	coclass CMoveCompletedUploads915
	{
		[default] interface IMoveCompletedUploads915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F1764BCF-E1C0-8B26-6196-647C454D7FB4)
	]
	coclass CMoveCompletedUploadsWithDefault915
	{
		[default] interface IMoveCompletedUploadsWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(069049CF-5C69-FCC0-7F51-F15AC4978400)
	]
	coclass CNetworkShareAccountSettings915
	{
		[default] interface INetworkShareAccountSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6B60A478-3417-5B12-401A-787C684D33E5)
	]
	coclass CNetworkShareGroupSettings915
	{
		[default] interface INetworkShareGroupSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(84725301-BC93-48CF-9958-96AF431A5B70)
	]
	coclass CNetworkShareSettings915
	{
		[default] interface INetworkShareSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(1C61A42F-8A38-80D9-4BB0-9DBB2F150640)
	]
	coclass CNetworkShareTaskProfileSettings915
	{
		[default] interface INetworkShareTaskProfileSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5DECE36C-5C74-1EFF-A805-DF087448067C)
	]
	coclass CNetworkShareVirtAccountSettings915
	{
		[default] interface INetworkShareVirtAccountSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(00E57F77-E881-7D5C-17AE-BF727B4CBFD6)
	]
	coclass CNetworkShareVirtGroupSettings915
	{
		[default] interface INetworkShareVirtGroupSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(FEE15BB6-3347-F5EB-5D6E-EA92DA0E6A82)
	]
	coclass CPermanentBandwidths915
	{
		[default] interface IPermanentBandwidths915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CB4C341F-6AC3-9813-D45A-2A7C654D7F7D)
	]
	coclass CPortRangeRule915
	{
		[default] interface IPortRangeRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4D03F4DF-7612-D2C7-C8D7-706DED007C53)
	]
	coclass CPwAuthWhitelist915
	{
		[default] interface IPwAuthWhitelist915;
		interface ISupportErrorInfo;
	};

	[
		uuid(69195759-08CA-653F-D0D5-3D8D6494C712)
	]
	coclass CPwAuthWhitelistEntry915
	{
		[default] interface IPwAuthWhitelistEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5FDD83FD-DCA7-604E-D87C-0938220DCE24)
	]
	coclass CRemoteAdminAccess915
	{
		[default] interface IRemoteAdminAccess915;
		interface ISupportErrorInfo;
	};

	[
		uuid(70ED6AD7-8948-635B-147B-8C52742F5715)
	]
	coclass CServer915
	{
		[default] interface IServer915;
		interface ISupportErrorInfo;
	};

	[
		uuid(DA76DBFB-2103-777B-ACD7-F2DD3DCBFD2A)
	]
	coclass CSessions915
	{
		[default] interface ISessions915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C8F0BCF9-AD5D-13F2-A10F-9D5FDBEBF988)
	]
	coclass CSettings915
	{
		[default] interface ISettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7C4F0C04-9EE2-A40A-EF46-F838FBCB7531)
	]
	coclass CSfsMountPoint915
	{
		[default] interface ISfsMountPoint915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BB84BCF1-9F53-689E-AC0E-AE3F2C5FD2A0)
	]
	coclass CSfsMountPoints915
	{
		[default] interface ISfsMountPoints915;
		interface ISupportErrorInfo;
	};

	[
		uuid(94B2B280-7D91-13C0-A86F-EEA6AC525707)
	]
	coclass CSfsSettingsPair915
	{
		[default] interface ISfsSettingsPair915;
		interface ISupportErrorInfo;
	};

	[
		uuid(DFB7D384-D252-CB4A-1162-A24C8BF8A97F)
	]
	coclass CSfsSettingsPairs915
	{
		[default] interface ISfsSettingsPairs915;
		interface ISupportErrorInfo;
	};

	[
		uuid(05F0AEAB-1A15-E85C-4EB5-31A01033A9E2)
	]
	coclass CSfsSftpProviderSettings915
	{
		[default] interface ISfsSftpProviderSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(95A92102-13F2-FA84-2968-3DE737C5F5FE)
	]
	coclass CSfsUndefMountPoint915
	{
		[default] interface ISfsUndefMountPoint915;
		interface ISupportErrorInfo;
	};

	[
		uuid(89BEF10A-4B8C-610F-8D16-65662AAB6E39)
	]
	coclass CSfsUndefMountPoints915
	{
		[default] interface ISfsUndefMountPoints915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A37F3475-C657-3200-9FCA-D475C8F85863)
	]
	coclass CSfsWinProviderSettings915
	{
		[default] interface ISfsWinProviderSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(EB28B6B4-EDFA-5D7D-5F6B-F4A5ACFFD1B6)
	]
	coclass CSignatureAlgs915
	{
		[default] interface ISignatureAlgs915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3006017E-AC1B-7990-226D-58192393CF35)
	]
	coclass CSmtpSending915
	{
		[default] interface ISmtpSending915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9ED8A455-F7CA-B63C-272D-E249077CA115)
	]
	coclass CSrvSideC2SRules915
	{
		[default] interface ISrvSideC2SRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C13E1E25-A578-0DB3-E179-9423C9A0D010)
	]
	coclass CSrvSideIPv4C2SRule915
	{
		[default] interface ISrvSideIPv4C2SRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CA513362-830E-DABB-424F-A7654E69F88D)
	]
	coclass CSrvSideIPv4C2SRules915
	{
		[default] interface ISrvSideIPv4C2SRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(906EF5FA-AAB4-CCC4-0FE2-FEBC2B0DCE8F)
	]
	coclass CSrvSideIPv4S2CRule915
	{
		[default] interface ISrvSideIPv4S2CRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(297BE18B-8A2D-CB92-B389-3005DB7F58EE)
	]
	coclass CSrvSideIPv4S2CRules915
	{
		[default] interface ISrvSideIPv4S2CRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(5A636D2D-CECA-FA75-1F25-14631B9D293A)
	]
	coclass CSrvSideIPv6C2SRule915
	{
		[default] interface ISrvSideIPv6C2SRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7B4A961E-B9C6-E549-2D3E-0B00700978BF)
	]
	coclass CSrvSideIPv6C2SRules915
	{
		[default] interface ISrvSideIPv6C2SRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(32D621A8-1AAF-43A4-07EE-B1212B820B57)
	]
	coclass CSrvSideIPv6S2CRule915
	{
		[default] interface ISrvSideIPv6S2CRule915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7AC8151F-7952-A0F5-70F9-0667184F81D0)
	]
	coclass CSrvSideIPv6S2CRules915
	{
		[default] interface ISrvSideIPv6S2CRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F44718F2-2770-419B-492C-8936933AA456)
	]
	coclass CSrvSideS2CRules915
	{
		[default] interface ISrvSideS2CRules915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CE8EFEE1-CE7B-7985-A9C4-5B3FE751C3A9)
	]
	coclass CSshAlgorithms915
	{
		[default] interface ISshAlgorithms915;
		interface ISupportErrorInfo;
	};

	[
		uuid(4562E9E3-384D-3CA3-9019-1FA6B4478D83)
	]
	coclass CSshProfile915
	{
		[default] interface ISshProfile915;
		interface ISupportErrorInfo;
	};

	[
		uuid(BD7746A3-2A35-383F-2C39-B6653AEA9181)
	]
	coclass CSshProfiles915
	{
		[default] interface ISshProfiles915;
		interface ISupportErrorInfo;
	};

	[
		uuid(899FE03B-19EB-CCA7-51C2-D46E6CB70D18)
	]
	coclass CStats915
	{
		[default] interface IStats915;
		interface ISupportErrorInfo;
	};

	[
		uuid(1E4F42FF-2240-39BA-7312-5F13C543249A)
	]
	coclass CStatsQuotas915
	{
		[default] interface IStatsQuotas915;
		interface ISupportErrorInfo;
	};

	[
		uuid(AFF51760-6F83-1682-C1E4-E69307C3152A)
	]
	coclass CTask915
	{
		[default] interface ITask915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6D566EE1-2D2D-00EC-F3FA-C94F06D3685E)
	]
	coclass CTaskList915
	{
		[default] interface ITaskList915;
		interface ISupportErrorInfo;
	};

	[
		uuid(51349BF8-7297-231B-7264-99C52B0F8541)
	]
	coclass CTaskProfile915
	{
		[default] interface ITaskProfile915;
		interface ISupportErrorInfo;
	};

	[
		uuid(FC1514DA-4AD2-02D9-8D29-306E584D60B0)
	]
	coclass CTaskProfiles915
	{
		[default] interface ITaskProfiles915;
		interface ISupportErrorInfo;
	};

	[
		uuid(D0D2974B-D7C2-A41B-078D-600B091F5F08)
	]
	coclass CTaskSettings915
	{
		[default] interface ITaskSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(48B92536-D33F-B006-9269-80D9EC88C5AA)
	]
	coclass CTaskTrigger915
	{
		[default] interface ITaskTrigger915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6A79149C-8850-9E7A-AFFD-C40EEFD870D3)
	]
	coclass CTaskTriggers915
	{
		[default] interface ITaskTriggers915;
		interface ISupportErrorInfo;
	};

	[
		uuid(74605B05-AB10-15D7-8CD1-0C29340A84FE)
	]
	coclass CTerminalConsoleSettings915
	{
		[default] interface ITerminalConsoleSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CE001545-A81B-A050-8D3D-816D9BEBC3E5)
	]
	coclass CTlsAlgorithms915
	{
		[default] interface ITlsAlgorithms915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C143C390-FFE0-FFAE-1DC6-93FBEA188EC4)
	]
	coclass CUpdateSettings915
	{
		[default] interface IUpdateSettings915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F764E1EC-127A-42D1-BBB8-4406164A12D7)
	]
	coclass CUserAuthMethod915
	{
		[default] interface IUserAuthMethod915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0DFF2095-57B9-0249-CAEC-021A022B5006)
	]
	coclass CUserAuthMethods915
	{
		[default] interface IUserAuthMethods915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6CCD1ACB-189C-9235-6943-16B66724A853)
	]
	coclass CUserNameBlacklist915
	{
		[default] interface IUserNameBlacklist915;
		interface ISupportErrorInfo;
	};

	[
		uuid(18C18642-0DAD-DDAE-509B-372A5349451B)
	]
	coclass CUserNameBlacklistEntry915
	{
		[default] interface IUserNameBlacklistEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(0A431A9C-D96B-C459-AABA-81BCBE374F94)
	]
	coclass CVirtAccount915
	{
		[default] interface IVirtAccount915;
		interface ISupportErrorInfo;
	};

	[
		uuid(7CEA5C43-7EAA-D27F-54E0-9D328EA4A732)
	]
	coclass CVirtAccountAuthentication915
	{
		[default] interface IVirtAccountAuthentication915;
		interface ISupportErrorInfo;
	};

	[
		uuid(51F422D1-C3BD-D881-6877-B31FDDF1D8EA)
	]
	coclass CVirtAccountConnectionSetup915
	{
		[default] interface IVirtAccountConnectionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B225F46A-F7F7-2AE4-14B5-5DC2CF57BF37)
	]
	coclass CVirtAccountFileTransfer915
	{
		[default] interface IVirtAccountFileTransfer915;
		interface ISupportErrorInfo;
	};

	[
		uuid(36B3C2C7-17E3-8CC3-CD9B-C1CE956FB94F)
	]
	coclass CVirtAccountSessionSetup915
	{
		[default] interface IVirtAccountSessionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3C91DFEF-55AF-BE98-5F31-543C18B081B3)
	]
	coclass CVirtAccounts915
	{
		[default] interface IVirtAccounts915;
		interface ISupportErrorInfo;
	};

	[
		uuid(9A7B3128-6FBC-A0F5-D9AF-36DCC78E81CE)
	]
	coclass CVirtAccountsPwdPolicy915
	{
		[default] interface IVirtAccountsPwdPolicy915;
		interface ISupportErrorInfo;
	};

	[
		uuid(B09B4B5F-CABB-2CD0-8870-2D87A284D248)
	]
	coclass CVirtGroup915
	{
		[default] interface IVirtGroup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(91A811BC-C15D-211E-46B7-9C8EF691D560)
	]
	coclass CVirtGroupAuthentication915
	{
		[default] interface IVirtGroupAuthentication915;
		interface ISupportErrorInfo;
	};

	[
		uuid(870055E6-4A0B-3DE3-8A88-22AE270D891A)
	]
	coclass CVirtGroupConnectionSetup915
	{
		[default] interface IVirtGroupConnectionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(C545F32E-5026-AB66-57B2-A207486FC729)
	]
	coclass CVirtGroupFileTransfer915
	{
		[default] interface IVirtGroupFileTransfer915;
		interface ISupportErrorInfo;
	};

	[
		uuid(2D598E87-01F8-F61F-E950-522F0B9642C4)
	]
	coclass CVirtGroupSessionSetup915
	{
		[default] interface IVirtGroupSessionSetup915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6756B802-0954-B478-8D89-DA3307CD21E8)
	]
	coclass CVirtGroups915
	{
		[default] interface IVirtGroups915;
		interface ISupportErrorInfo;
	};

	[
		uuid(2DBFB88D-A24C-E48E-3342-601CABBB2C5A)
	]
	coclass CVirtualGroupWhitelist915
	{
		[default] interface IVirtualGroupWhitelist915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8B557D5B-5ADC-504E-EBE5-15DF42C451F1)
	]
	coclass CVirtualGroupWhitelistEntry915
	{
		[default] interface IVirtualGroupWhitelistEntry915;
		interface ISupportErrorInfo;
	};

	[
		uuid(FC9DC679-249D-D35A-75BB-16D2A8AD41E0)
	]
	coclass CWhitelistAddress915
	{
		[default] interface IWhitelistAddress915;
		interface ISupportErrorInfo;
	};

	[
		uuid(3B3C4D37-FCAE-4F68-36D1-A37FB120A6F4)
	]
	coclass CWhitelistedAddresses915
	{
		[default] interface IWhitelistedAddresses915;
		interface ISupportErrorInfo;
	};

	[
		uuid(634DDF3B-8819-2725-4BD2-658782E980EC)
	]
	coclass CWinAccounts915
	{
		[default] interface IWinAccounts915;
		interface ISupportErrorInfo;
	};

	[
		uuid(09DB5C5D-4E97-6C67-713D-5A7E1281D039)
	]
	coclass CWinGroups915
	{
		[default] interface IWinGroups915;
		interface ISupportErrorInfo;
	};

	[
		uuid(6D4B8CFF-DCBC-CEB3-C94F-751C44F4A6B9)
	]
	coclass CWinOnLogoffCommand915
	{
		[default] interface IWinOnLogoffCommand915;
		interface ISupportErrorInfo;
	};

	[
		uuid(A39D3EC1-3FDC-6338-5C03-42BB40125572)
	]
	coclass CWinOnLogoffCommandWithDefault915
	{
		[default] interface IWinOnLogoffCommandWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(CF83FFA1-EB58-AA5E-53BF-F13489CAFCA3)
	]
	coclass CWinOnLogonCommand915
	{
		[default] interface IWinOnLogonCommand915;
		interface ISupportErrorInfo;
	};

	[
		uuid(F0F09835-047E-F2AB-D3B3-4FEBA51EA7ED)
	]
	coclass CWinOnLogonCommandWithDefault915
	{
		[default] interface IWinOnLogonCommandWithDefault915;
		interface ISupportErrorInfo;
	};

	[
		uuid(8535CBA5-BE30-17CA-E996-43C0A3DFB3DF)
	]
	coclass CWindowsFirewall915
	{
		[default] interface IWindowsFirewall915;
		interface ISupportErrorInfo;
	};

};

